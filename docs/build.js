/*! For license information please see build.js.LICENSE.txt */
(()=>{var e={228:e=>{e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},e.exports.default=e.exports,e.exports.__esModule=!0},858:e=>{e.exports=function(e){if(Array.isArray(e))return e},e.exports.default=e.exports,e.exports.__esModule=!0},575:e=>{e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},e.exports.default=e.exports,e.exports.__esModule=!0},913:e=>{function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e},e.exports.default=e.exports,e.exports.__esModule=!0},884:e=>{e.exports=function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw i}}return o}},e.exports.default=e.exports,e.exports.__esModule=!0},521:e=>{e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.default=e.exports,e.exports.__esModule=!0},38:(e,t,n)=>{var r=n(858),i=n(884),o=n(379),a=n(521);e.exports=function(e,t){return r(e)||i(e,t)||o(e,t)||a()},e.exports.default=e.exports,e.exports.__esModule=!0},379:(e,t,n)=>{var r=n(228);e.exports=function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}},e.exports.default=e.exports,e.exports.__esModule=!0},757:(e,t,n)=>{e.exports=n(666)},396:e=>{const t=[{text:"i~&__",code:"ᑲ",name:"Nasal German i with extra low tone"},{text:"i~&_",code:"ᑤ",name:"Nasal German i with low tone"},{text:"i~&^^",code:"ᑠ",name:"Nasal German i with extra high tone"},{text:"i~&^",code:"ᑬ",name:"Nasal German i with high tone"},{text:"i~&",code:"ᑨ",name:"Nasal German i"},{text:"(i~&__)",code:"ᑳ",name:"Nasal German i with extra low tone and stress"},{text:"(i~&_)",code:"ᑥ",name:"Nasal German i with low tone and stress"},{text:"(i~&^^)",code:"ᑡ",name:"Nasal German i with extra high tone and stress"},{text:"(i~&^)",code:"ᑭ",name:"Nasal German i with high tone and stress"},{text:"(i~&)",code:"ᑩ",name:"Nasal German i with stress"},{text:"i~__",code:"ᑸ",name:"German i with extra low tone"},{text:"i~_",code:"ϖ",name:"German i with low tone"},{text:"i~^^",code:"ᑼ",name:"German i with extra high tone"},{text:"i~^",code:"Ϛ",name:"German i with high tone"},{text:"i~",code:"ϑ",name:"German i"},{text:"(i~__)",code:"ᑹ",name:"German i with extra low tone and stress"},{text:"(i~_)",code:"ϗ",name:"German i with low tone and stress"},{text:"(i~^^)",code:"ᑽ",name:"German i with extra high tone and stress"},{text:"(i~^)",code:"ϛ",name:"German i with high tone and stress"},{text:"(i~)",code:"ϓ",name:"German i with stress"},{text:"i+&__",code:"ᑰ",name:"Nasal short i with extra low tone"},{text:"i+&_",code:"ᑢ",name:"Nasal short i with low tone"},{text:"i+&^^",code:"ᑮ",name:"Nasal short i with extra high tone"},{text:"i+&^",code:"ᑪ",name:"Nasal short i with high tone"},{text:"i+&",code:"ᑦ",name:"Nasal short i"},{text:"(i+&__)",code:"ᑱ",name:"Nasal short i with extra low tone and stress"},{text:"(i+&_)",code:"ᑣ",name:"Nasal short i with low tone and stress"},{text:"(i+&^^)",code:"ᑯ",name:"Nasal short i with extra high tone and stress"},{text:"(i+&^)",code:"ᑫ",name:"Nasal short i with high tone and stress"},{text:"(i+&)",code:"ᑧ",name:"Nasal short i with stress"},{text:"i+__",code:"ᑺ",name:"Short i with extra low tone"},{text:"i+_",code:"ϔ",name:"Short i with low tone"},{text:"i+^^",code:"ᑾ",name:"Short i with extra high tone"},{text:"i+^",code:"Ϙ",name:"Short i with high tone"},{text:"i+",code:"ϐ",name:"Short i"},{text:"(i+__)",code:"ᑻ",name:"Short i with extra low tone and stress"},{text:"(i+_)",code:"ϕ",name:"Short i with low tone and stress"},{text:"(i+^^)",code:"ᑿ",name:"Short i with extra high tone and stress"},{text:"(i+^)",code:"ϙ",name:"Short i with high tone and stress"},{text:"(i+)",code:"ϒ",name:"Short i with stress"},{text:"i&__",code:"ᔰ",name:"Nasal i sound with extra low tone"},{text:"i&_",code:"ᔢ",name:"Nasal i sound with low tone"},{text:"i&^^",code:"ᔮ",name:"Nasal i sound with extra high tone"},{text:"i&^",code:"ᔪ",name:"Nasal i sound with high tone"},{text:"i&",code:"ᔦ",name:"Nasal i sound"},{text:"(i&__)",code:"ᔱ",name:"Nasal i sound with extra low tone and stress"},{text:"(i&_)",code:"ᔣ",name:"Nasal i sound with low tone and stress"},{text:"(i&^^)",code:"ᔯ",name:"Nasal i sound with extra high tone and stress"},{text:"(i&^)",code:"ᔫ",name:"Nasal i sound with high tone and stress"},{text:"(i&)",code:"ᔧ",name:"Nasal i sound with stress"},{text:"i__",code:"ᔺ",name:"I sound with extra low tone"},{text:"i_",code:"Ѵ",name:"I sound with low tone"},{text:"i^^",code:"ᔾ",name:"I sound with extra high tone"},{text:"i^",code:"Ѹ",name:"I sound with high tone"},{text:"i",code:"Ѱ",name:"I sound"},{text:"(i__)",code:"ᔻ",name:"I sound with extra low tone and stress"},{text:"(i_)",code:"ѵ",name:"I sound with low tone and stress"},{text:"(i^^)",code:"ᔿ",name:"I sound with extra high tone and stress"},{text:"(i^)",code:"ѹ",name:"I sound with high tone and stress"},{text:"(i)",code:"Ѳ",name:"I sound with stress"},{text:"e~&__",code:"ᔒ",name:"Nasal Danish oe with extra low tone"},{text:"e~&_",code:"ᔄ",name:"Nasal Danish oe with low tone"},{text:"e~&^^",code:"ᔀ",name:"Nasal Danish oe with extra high tone"},{text:"e~&^",code:"ᔌ",name:"Nasal Danish oe with high tone"},{text:"e~&",code:"ᔈ",name:"Nasal Danish oe"},{text:"(e~&__)",code:"ᔓ",name:"Nasal Danish oe with extra low tone and stress"},{text:"(e~&_)",code:"ᔅ",name:"Nasal Danish oe with low tone and stress"},{text:"(e~&^^)",code:"ᔁ",name:"Nasal Danish oe with extra high tone and stress"},{text:"(e~&^)",code:"ᔍ",name:"Nasal Danish oe with high tone and stress"},{text:"(e~&)",code:"ᔉ",name:"Nasal Danish oe with stress"},{text:"e~__",code:"ᔘ",name:"Danish oe with extra low tone"},{text:"e~_",code:"і",name:"Danish oe with low tone"},{text:"e~^^",code:"ᔜ",name:"Danish oe with extra high tone"},{text:"e~^",code:"њ",name:"Danish oe with high tone"},{text:"e~",code:"ё",name:"Danish oe"},{text:"(e~__)",code:"ᔙ",name:"Danish oe with extra low tone and stress"},{text:"(e~_)",code:"ї",name:"Danish oe with low tone and stress"},{text:"(e~^^)",code:"ᔝ",name:"Danish oe with extra high tone and stress"},{text:"(e~^)",code:"ћ",name:"Danish oe with high tone and stress"},{text:"(e~)",code:"ѓ",name:"Danish oe with stress"},{text:"e+&__",code:"ᔐ",name:"Nasal short e with extra low tone"},{text:"e+&_",code:"ᔂ",name:"Nasal short e with low tone"},{text:"e+&^^",code:"ᔎ",name:"Nasal short e with extra high tone"},{text:"e+&^",code:"ᔊ",name:"Nasal short e with high tone"},{text:"e+&",code:"ᔆ",name:"Nasal short e"},{text:"(e+&__)",code:"ᔑ",name:"Nasal short e with extra low tone and stress"},{text:"(e+&_)",code:"ᔃ",name:"Nasal short e with low tone and stress"},{text:"(e+&^^)",code:"ᔏ",name:"Nasal short e with extra high tone and stress"},{text:"(e+&^)",code:"ᔋ",name:"Nasal short e with high tone and stress"},{text:"(e+&)",code:"ᔇ",name:"Nasal short e with stress"},{text:"e+__",code:"ᔚ",name:"Short e with extra low tone"},{text:"e+_",code:"є",name:"Short e with low tone"},{text:"e+^^",code:"ᔞ",name:"Short e with extra high tone"},{text:"e+^",code:"ј",name:"Short e with high tone"},{text:"e+",code:"ѐ",name:"Short e"},{text:"(e+__)",code:"ᔛ",name:"Short e with extra low tone and stress"},{text:"(e+_)",code:"ѕ",name:"Short e with low tone and stress"},{text:"(e+^^)",code:"ᔟ",name:"Short e with extra high tone and stress"},{text:"(e+^)",code:"љ",name:"Short e with high tone and stress"},{text:"(e+)",code:"ђ",name:"Short e with stress"},{text:"e&__",code:"ᓐ",name:"Nasal e sound with extra low tone"},{text:"e&_",code:"ᓂ",name:"Nasal e sound with low tone"},{text:"e&^^",code:"ᓎ",name:"Nasal e sound with extra high tone"},{text:"e&^",code:"ᓊ",name:"Nasal e sound with high tone"},{text:"e&",code:"ᓆ",name:"Nasal e sound"},{text:"(e&__)",code:"ᓑ",name:"Nasal e sound with extra low tone and stress"},{text:"(e&_)",code:"ᓃ",name:"Nasal e sound with low tone and stress"},{text:"(e&^^)",code:"ᓏ",name:"Nasal e sound with extra high tone and stress"},{text:"(e&^)",code:"ᓋ",name:"Nasal e sound with high tone and stress"},{text:"(e&)",code:"ᓇ",name:"Nasal e sound with stress"},{text:"e__",code:"ᓚ",name:"E sound with extra low tone"},{text:"e_",code:"Д",name:"E sound with low tone"},{text:"e^^",code:"ᓞ",name:"E sound with extra high tone"},{text:"e^",code:"И",name:"E sound with high tone"},{text:"e",code:"А",name:"E sound"},{text:"(e__)",code:"ᓛ",name:"E sound with extra low tone and stress"},{text:"(e_)",code:"Е",name:"E sound with low tone and stress"},{text:"(e^^)",code:"ᓟ",name:"E sound with extra high tone and stress"},{text:"(e^)",code:"Й",name:"E sound with high tone and stress"},{text:"(e)",code:"В",name:"E sound with stress"},{text:"a+~&__",code:"ᒒ",name:"Nasal Danish æ with extra low tone"},{text:"a+~&_",code:"ᒎ",name:"Nasal Danish æ with low tone"},{text:"a+~&^^",code:"ᒊ",name:"Nasal Danish æ with extra high tone"},{text:"a+~&^",code:"ᒆ",name:"Nasal Danish æ with high tone"},{text:"a+~&",code:"ᒂ",name:"Nasal Danish æ"},{text:"(a+~&__)",code:"ᒓ",name:"Nasal Danish æ with extra low tone and stress"},{text:"(a+~&_)",code:"ᒏ",name:"Nasal Danish æ with low tone and stress"},{text:"(a+~&^^)",code:"ᒋ",name:"Nasal Danish æ with extra high tone and stress"},{text:"(a+~&^)",code:"ᒇ",name:"Nasal Danish æ with high tone and stress"},{text:"(a+~&)",code:"ᒃ",name:"Nasal Danish æ with stress"},{text:"a+~__",code:"ᒘ",name:"Danish æ with extra low tone"},{text:"a+~_",code:"ζ",name:"Danish æ with low tone"},{text:"a+~^^",code:"ᒜ",name:"Danish æ with extra high tone"},{text:"a+~^",code:"κ",name:"Danish æ with high tone"},{text:"a+~",code:"α",name:"Danish æ"},{text:"(a+~__)",code:"ᒙ",name:"Danish æ with extra low tone and stress"},{text:"(a+~_)",code:"η",name:"Danish æ with low tone and stress"},{text:"(a+~^^)",code:"ᒝ",name:"Danish æ with extra high tone and stress"},{text:"(a+~^)",code:"λ",name:"Danish æ with high tone and stress"},{text:"(a+~)",code:"γ",name:"Danish æ with stress"},{text:"a~&__",code:"ᖒ",name:"Nasal German e sound with extra low tone"},{text:"a~&_",code:"ᖄ",name:"Nasal German e sound with low tone"},{text:"a~&^^",code:"ᖀ",name:"Nasal German e sound with extra high tone"},{text:"a~&^",code:"ᖌ",name:"Nasal German e sound with high tone"},{text:"a~&",code:"ᖈ",name:"Nasal German e sound"},{text:"(a~&__)",code:"ᖓ",name:"Nasal German e sound with extra low tone and stress"},{text:"(a~&_)",code:"ᖅ",name:"Nasal German e sound with low tone and stress"},{text:"(a~&^^)",code:"ᖁ",name:"Nasal German e sound with extra high tone and stress"},{text:"(a~&^)",code:"ᖍ",name:"Nasal German e sound with high tone and stress"},{text:"(a~&)",code:"ᖉ",name:"Nasal German e sound with stress"},{text:"a~__",code:"ᖘ",name:"German e sound with extra low tone"},{text:"a~_",code:"Ԇ",name:"German e sound with low tone"},{text:"a~^^",code:"ᖜ",name:"German e sound with extra high tone"},{text:"a~^",code:"Ԋ",name:"German e sound with high tone"},{text:"a~",code:"ԁ",name:"German e sound"},{text:"(a~__)",code:"ᖙ",name:"German e sound with extra low tone and stress"},{text:"(a~_)",code:"ԇ",name:"German e sound with low tone and stress"},{text:"(a~^^)",code:"ᖝ",name:"German e sound with extra high tone and stress"},{text:"(a~^)",code:"ԋ",name:"German e sound with high tone and stress"},{text:"(a~)",code:"ԃ",name:"German e sound with stress"},{text:"a+&__",code:"ᒐ",name:"Nasal short a with extra low tone"},{text:"a+&_",code:"ᒌ",name:"Nasal short a with low tone"},{text:"a+&^^",code:"ᒈ",name:"Nasal short a with extra high tone"},{text:"a+&^",code:"ᒄ",name:"Nasal short a with high tone"},{text:"a+&",code:"ᒀ",name:"Nasal short a"},{text:"(a+&__)",code:"ᒑ",name:"Nasal short a with extra low tone and stress"},{text:"(a+&_)",code:"ᒍ",name:"Nasal short a with low tone and stress"},{text:"(a+&^^)",code:"ᒉ",name:"Nasal short a with extra high tone and stress"},{text:"(a+&^)",code:"ᒅ",name:"Nasal short a with high tone and stress"},{text:"(a+&)",code:"ᒁ",name:"Nasal short a with stress"},{text:"a+__",code:"ᒚ",name:"Short a with extra low tone"},{text:"a+_",code:"δ",name:"Short a with low tone"},{text:"a+^^",code:"ᒞ",name:"Short a with extra high tone"},{text:"a+^",code:"θ",name:"Short a with high tone"},{text:"a+",code:"ΰ",name:"Short a"},{text:"(a+__)",code:"ᒛ",name:"Short a with extra low tone and stress"},{text:"(a+_)",code:"ε",name:"Short a with low tone and stress"},{text:"(a+^^)",code:"ᒟ",name:"Short a with extra high tone and stress"},{text:"(a+^)",code:"ι",name:"Short a with high tone and stress"},{text:"(a+)",code:"β",name:"Short a with stress"},{text:"a&__",code:"ᖐ",name:"Nasal a sound with extra low tone"},{text:"a&_",code:"ᖂ",name:"Nasal a sound with low tone"},{text:"a&^^",code:"ᖎ",name:"Nasal a sound with extra high tone"},{text:"a&^",code:"ᖊ",name:"Nasal a sound with high tone"},{text:"a&",code:"ᖆ",name:"Nasal a sound"},{text:"(a&__)",code:"ᖑ",name:"Nasal a sound with extra low tone and stress"},{text:"(a&_)",code:"ᖃ",name:"Nasal a sound with low tone and stress"},{text:"(a&^^)",code:"ᖏ",name:"Nasal a sound with extra high tone and stress"},{text:"(a&^)",code:"ᖋ",name:"Nasal a sound with high tone and stress"},{text:"(a&)",code:"ᖇ",name:"Nasal a sound with stress"},{text:"a__",code:"ᖚ",name:"A sound with extra low tone"},{text:"a_",code:"Ԅ",name:"A sound with low tone"},{text:"a^^",code:"ᖞ",name:"A sound with extra high tone"},{text:"a^",code:"Ԉ",name:"A sound with high tone"},{text:"a",code:"Ԁ",name:"A sound"},{text:"(a__)",code:"ᖛ",name:"A sound with extra low tone and stress"},{text:"(a_)",code:"ԅ",name:"A sound with low tone and stress"},{text:"(a^^)",code:"ᖟ",name:"A sound with extra high tone and stress"},{text:"(a^)",code:"ԉ",name:"A sound with high tone and stress"},{text:"(a)",code:"Ԃ",name:"A sound with stress"},{text:"o~&__",code:"ᑐ",name:"Nasal German o with extra low tone"},{text:"o~&_",code:"ᑂ",name:"Nasal German o with low tone"},{text:"o~&^^",code:"ᑎ",name:"Nasal German o with extra high tone"},{text:"o~&^",code:"ᑊ",name:"Nasal German o with high tone"},{text:"o~&",code:"ᑆ",name:"Nasal German o"},{text:"(o~&__)",code:"ᑑ",name:"Nasal German o with extra low tone and stress"},{text:"(o~&_)",code:"ᑃ",name:"Nasal German o with low tone and stress"},{text:"(o~&^^)",code:"ᑏ",name:"Nasal German o with extra high tone and stress"},{text:"(o~&^)",code:"ᑋ",name:"Nasal German o with high tone and stress"},{text:"(o~&)",code:"ᑇ",name:"Nasal German o with stress"},{text:"o~__",code:"ᑚ",name:"German o with extra low tone"},{text:"o~_",code:"Δ",name:"German o with low tone"},{text:"o~^^",code:"ᑞ",name:"German o with extra high tone"},{text:"o~^",code:"Θ",name:"German o with high tone"},{text:"o~",code:"ΐ",name:"German o"},{text:"(o~__)",code:"ᑛ",name:"German o with extra low tone and stress"},{text:"(o~_)",code:"Ε",name:"German o with low tone and stress"},{text:"(o~^^)",code:"ᑟ",name:"German o with extra high tone and stress"},{text:"(o~^)",code:"Ι",name:"German o with high tone and stress"},{text:"(o~)",code:"Β",name:"German o with stress"},{text:"o+&__",code:"ᕐ",name:"Nasal short o with extra low tone"},{text:"o+&_",code:"ᕂ",name:"Nasal short o with low tone"},{text:"o+&^^",code:"ᕎ",name:"Nasal short o with extra high tone"},{text:"o+&^",code:"ᕊ",name:"Nasal short o with high tone"},{text:"o+&",code:"ᕆ",name:"Nasal short o"},{text:"(o+&__)",code:"ᕑ",name:"Nasal short o with extra low tone and stress"},{text:"(o+&_)",code:"ᕃ",name:"Nasal short o with low tone and stress"},{text:"(o+&^^)",code:"ᕏ",name:"Nasal short o with extra high tone and stress"},{text:"(o+&^)",code:"ᕋ",name:"Nasal short o with high tone and stress"},{text:"(o+&)",code:"ᕇ",name:"Nasal short o stress"},{text:"o+__",code:"ᕚ",name:"Short o with extra low tone"},{text:"o+_",code:"ӄ",name:"Short o with low tone"},{text:"o+^^",code:"ᕞ",name:"Short o with extra high tone"},{text:"o+^",code:"ӈ",name:"Short o with high tone"},{text:"o+",code:"Ӏ",name:"Short o"},{text:"(o+__)",code:"ᕛ",name:"Short o with extra low tone and stress"},{text:"(o+_)",code:"Ӆ",name:"Short o with low tone and stress"},{text:"(o+^^)",code:"ᕟ",name:"Short o with extra high tone and stress"},{text:"(o+^)",code:"Ӊ",name:"Short o with high tone and stress"},{text:"(o+)",code:"ӂ",name:"Short o stress"},{text:"o&__",code:"ᕰ",name:"Nasal o sound with extra low tone"},{text:"o&_",code:"ᕢ",name:"Nasal o sound with low tone"},{text:"o&^^",code:"ᕮ",name:"Nasal o sound with extra high tone"},{text:"o&^",code:"ᕪ",name:"Nasal o sound with high tone"},{text:"o&",code:"ᕦ",name:"Nasal o sound"},{text:"(o&__)",code:"ᕱ",name:"Nasal o sound with extra low tone and stress"},{text:"(o&_)",code:"ᕣ",name:"Nasal o sound with low tone and stress"},{text:"(o&^^)",code:"ᕯ",name:"Nasal o sound with extra high tone and stress"},{text:"(o&^)",code:"ᕫ",name:"Nasal o sound with high tone and stress"},{text:"(o&)",code:"ᕧ",name:"Nasal o sound with stress"},{text:"o__",code:"ᕺ",name:"O sound with extra low tone"},{text:"o_",code:"Ӥ",name:"O sound with low tone"},{text:"o^^",code:"ᕾ",name:"O sound with extra high tone"},{text:"o^",code:"Ө",name:"O sound with high tone"},{text:"o",code:"Ӡ",name:"O sound"},{text:"(o__)",code:"ᕻ",name:"O sound with extra low tone and stress"},{text:"(o_)",code:"ӥ",name:"O sound with low tone and stress"},{text:"(o^^)",code:"ᕿ",name:"O sound with extra high tone and stress"},{text:"(o^)",code:"ө",name:"O sound with high tone and stress"},{text:"(o)",code:"Ӣ",name:"O sound with stress"},{text:"u~&__",code:"ᓰ",name:"Nasal English r with extra low tone"},{text:"u~&_",code:"ᓢ",name:"Nasal English r with low tone"},{text:"u~&^^",code:"ᓮ",name:"Nasal English r with extra high tone"},{text:"u~&^",code:"ᓪ",name:"Nasal English r with high tone"},{text:"u~&",code:"ᓦ",name:"Nasal English r"},{text:"(u~&__)",code:"ᓱ",name:"Nasal English r with extra low tone and stress"},{text:"(u~&_)",code:"ᓣ",name:"Nasal English r with low tone and stress"},{text:"(u~&^^)",code:"ᓯ",name:"Nasal English r with extra high tone and stress"},{text:"(u~&^)",code:"ᓫ",name:"Nasal English r with high tone and stress"},{text:"(u~&)",code:"ᓧ",name:"Nasal English r with stress"},{text:"u~__",code:"ᓺ",name:"English r with extra low tone"},{text:"u~_",code:"д",name:"English r with low tone"},{text:"u~^^",code:"ᓾ",name:"English r with extra high tone"},{text:"u~^",code:"и",name:"English r with high tone"},{text:"u~",code:"а",name:"English r"},{text:"(u~__)",code:"ᓻ",name:"English r with extra low tone and stress"},{text:"(u~_)",code:"е",name:"English r with low tone and stress"},{text:"(u~^^)",code:"ᓿ",name:"English r with extra high tone and stress"},{text:"(u~^)",code:"й",name:"English r with high tone and stress"},{text:"(u~)",code:"в",name:"English r with stress"},{text:"u+&__",code:"ᖰ",name:"Nasal short u with extra low tone"},{text:"u+&_",code:"ᖢ",name:"Nasal short u with low tone"},{text:"u+&^^",code:"ᖮ",name:"Nasal short u with extra high tone"},{text:"u+&^",code:"ᖪ",name:"Nasal short u with high tone"},{text:"u+&",code:"ᖦ",name:"Nasal short u"},{text:"(u+&__)",code:"ᖱ",name:"Nasal short u with extra low tone and stress"},{text:"(u+&_)",code:"ᖣ",name:"Nasal short u with low tone and stress"},{text:"(u+&^^)",code:"ᖯ",name:"Nasal short u with extra high tone and stress"},{text:"(u+&^)",code:"ᖫ",name:"Nasal short u with high tone and stress"},{text:"(u+&)",code:"ᖧ",name:"Nasal short u with stress"},{text:"u+__",code:"ᖺ",name:"Short u with extra low tone"},{text:"u+_",code:"Ҥ",name:"Short u with low tone"},{text:"u+^^",code:"ᖾ",name:"Short u with extra high tone"},{text:"u+^",code:"Ҩ",name:"Short u with high tone"},{text:"u+",code:"Ҡ",name:"Short u"},{text:"(u+__)",code:"ᖻ",name:"Short u with extra low tone and stress"},{text:"(u+_)",code:"ҥ",name:"Short u with low tone and stress"},{text:"(u+^^)",code:"ᖿ",name:"Short u with extra high tone and stress"},{text:"(u+^)",code:"ҩ",name:"Short u with high tone and stress"},{text:"(u+)",code:"Ң",name:"Short u with stress"},{text:"u&__",code:"ᒰ",name:"Nasal u sound with extra low tone"},{text:"u&_",code:"ᒢ",name:"Nasal u sound with low tone"},{text:"u&^^",code:"ᒮ",name:"Nasal u sound with extra high tone"},{text:"u&^",code:"ᒪ",name:"Nasal u sound with high tone"},{text:"u&",code:"ᒦ",name:"Nasal u sound"},{text:"(u&__)",code:"ᒱ",name:"Nasal u sound with extra low tone and stress"},{text:"(u&_)",code:"ᒣ",name:"Nasal u sound with low tone and stress"},{text:"(u&^^)",code:"ᒯ",name:"Nasal u sound with extra high tone and stress"},{text:"(u&^)",code:"ᒫ",name:"Nasal u sound with high tone and stress"},{text:"(u&)",code:"ᒧ",name:"Nasal u sound with stress"},{text:"u__",code:"ᒺ",name:"U sound with extra low tone"},{text:"u_",code:"ϴ",name:"U sound with low tone"},{text:"u^^",code:"ᒾ",name:"U sound with extra high tone"},{text:"u^",code:"ϸ",name:"U sound with high tone"},{text:"u",code:"ϰ",name:"U sound"},{text:"(u__)",code:"ᒻ",name:"U sound with extra low tone and stress"},{text:"(u_)",code:"ϵ",name:"U sound with low tone and stress"},{text:"(u^^)",code:"ᒿ",name:"U sound with extra high tone and stress"},{text:"(u^)",code:"Ϲ",name:"U sound with high tone and stress"},{text:"(u)",code:"ϲ",name:"U sound with stress"},{text:"m+",code:"Ă",name:"M sound with nasal quality"},{text:"m",code:"Ā",name:"M sound"},{text:"n+",code:"ł",name:"Indian n sound"},{text:"n",code:"ŀ",name:"N sound"},{text:"q",code:"Š",name:"Ng sound"},{text:"g?",code:"ĸ",name:"Implosive g sound"},{text:"g.",code:"ፚ",name:"Stop g sound"},{text:"g@",code:"ፗ",name:"Tense g sound"},{text:"g",code:"İ",name:"G sound"},{text:"'",code:"ư",name:"Lack of sound, glottal stop"},{text:'"',code:"Ʋ",name:"Arabic voiced pharyngeal fricative"},{text:"d~",code:"Ñ",name:"Arabic d sound"},{text:"d!",code:"l",name:"Ejective d sound"},{text:"d?",code:"h",name:"Implosive d sound"},{text:"d*",code:"d",name:"Click d sound"},{text:"d+",code:"b",name:"Indian d sound"},{text:"d.",code:"ሺ",name:"Stop d sound"},{text:"d@",code:"ሷ",name:"Tense d sound"},{text:"d",code:"`",name:"D sound"},{text:"b?",code:"H",name:"Implosive b sound"},{text:"b!",code:"L",name:"Ejective b sound"},{text:"b.",code:"ሚ",name:"Stop b sound"},{text:"b@",code:"ሗ",name:"Tense b sound"},{text:"b",code:"@",name:"B sound"},{text:"p!",code:"8",name:"Ejective p sound"},{text:"p*",code:"4",name:"Click p sound"},{text:"p.",code:"ሊ",name:"Stop p sound"},{text:"p@",code:"ሇ",name:"Tense p sound"},{text:"p",code:"0",name:"P sound"},{text:"t+",code:"Ò",name:"Indian t sound"},{text:"t!",code:"Ü",name:"Ejective t sound"},{text:"t~",code:"Ñ",name:"Arabic t sound"},{text:"t*",code:"Ô",name:"Click t sound"},{text:"t.",code:"ኚ",name:"Stop t sound"},{text:"t@",code:"ኗ",name:"Tense t sound"},{text:"t",code:"Ð",name:"T sound"},{text:"k!",code:"X",name:"Ejective k sound"},{text:"k*",code:"T",name:"Click k sound"},{text:"k+",code:"R",name:"Arabic Q sound"},{text:"k+!",code:"Y",name:"Arabic ejective Q sound"},{text:"k.",code:"ሪ",name:"Stop k sound"},{text:"k@",code:"ሧ",name:"Tense k sound"},{text:"k",code:"P",name:"K sound"},{text:"h+",code:"Ģ",name:"Hebrew harsh h sound"},{text:"h",code:"Ġ",name:"H sound"},{text:"j+",code:"Œ",name:"Indian j sound"},{text:"j",code:"Ő",name:"J sound"},{text:"s+",code:"r",name:"Navajo s sound"},{text:"s~",code:"q",name:"Arabic s sound"},{text:"s.",code:"ቊ",name:"Stop s sound"},{text:"s@",code:"ቇ",name:"Tense s sound"},{text:"s",code:"p",name:"S sound"},{text:"f+",code:"Â",name:"Labial f sound"},{text:"f",code:"À",name:"f sound"},{text:"v+",code:"ò",name:"Labial v sound"},{text:"v",code:"ð",name:"V sound"},{text:"z+",code:"",name:"Zulu dl sound"},{text:"z",code:"",name:"Z sound"},{text:"c+~",code:"²",name:"Arabic voiced th sound"},{text:"c+",code:"°",name:"Voiced th sound"},{text:"c",code:"",name:"Unvoiced th sound"},{text:"l+",code:"Ų",name:"Indian l sound"},{text:"l*",code:"Ŵ",name:"Click l sound"},{text:"l~",code:"ű",name:"Arabic l sound"},{text:"l",code:"Ű",name:"L sound"},{text:"r~",code:"Ơ",name:"French r sound"},{text:"r+",code:"â",name:"Indian r sound"},{text:"r",code:"à",name:"Single rolling r sound"},{text:"x+",code:"ƒ",name:"Indian sh sound"},{text:"x.",code:"ᐚ",name:"Stop sh sound"},{text:"x@",code:"ᐗ",name:"Tense sh sound"},{text:"x",code:"Ɛ",name:"Sh sound"},{text:"w",code:"Đ",name:"W sound"},{text:"y",code:"ƀ",name:"Y sound"},{text:"y+",code:"Ƃ",name:"Slight y sound"},{text:" ",code:" ",name:"Hanakana Space"},{text:".",code:"!",name:"Hanakana Period"},{text:",",code:"$",name:"Hanakana comma"},{text:"(",code:"#",name:"Hanakana opening parenthesis"},{text:")",code:"+",name:"Hanakana closing parenthesis"},{text:"[",code:"&",name:"Hanakana opening bracket"},{text:"]",code:"'",name:"Hanakana closing bracket"},{text:"|",code:"%",name:"Hanakana pipe"},{text:"#",code:"(",name:"Hanakana at sign"},{text:"/",code:")",name:"Hanakana forward slash"},{text:"\\",code:"*",name:"Hanakana backward slash"},{text:":",code:'"',name:"Hanakana colon"}],n={};t.forEach((({text:e})=>{n[e]="^"+e.replace(/[\(\)\*\!\?\^\+\_\.\[\]\|\\\/]/g,(e=>`\\${e}`))}));const r=e=>{let r=e.replace(/([A-Z])/g,((e,t)=>`${t.toLowerCase()}+`)),i=[];e:for(;r.length;){for(let e of t){const t=n[e.text],o=new RegExp(t),a=r.match(o);if(a){const t=e.code;i.push(t),r=r.substr(a[0].length);continue e}}throw new Error(`${r}:${e}`)}return i.join("")};r.list=t,e.exports=r},382:function(e,t,n){!function(e,t,n,r){"use strict";function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=i(t),a=i(n),s=i(r),l=function(e,t,n){return{endTime:t,insertTime:n,type:"exponentialRampToValue",value:e}},u=function(e,t,n){return{endTime:t,insertTime:n,type:"linearRampToValue",value:e}},c=function(e,t){return{startTime:t,type:"setValue",value:e}},h=function(e,t,n){return{duration:n,startTime:t,type:"setValueCurve",values:e}},d=function(e,t,n){var r=n.startTime,i=n.target,o=n.timeConstant;return i+(t-i)*Math.exp((r-e)/o)},f=function(e){return"exponentialRampToValue"===e.type},p=function(e){return"linearRampToValue"===e.type},m=function(e){return f(e)||p(e)},g=function(e){return"setValue"===e.type},v=function(e){return"setValueCurve"===e.type},y=function e(t,n,r,i){var o=t[n];return void 0===o?i:m(o)||g(o)?o.value:v(o)?o.values[o.values.length-1]:d(r,e(t,n-1,o.startTime,i),o)},_=function(e,t,n,r,i){return void 0===n?[r.insertTime,i]:m(n)?[n.endTime,n.value]:g(n)?[n.startTime,n.value]:v(n)?[n.startTime+n.duration,n.values[n.values.length-1]]:[n.startTime,y(e,t-1,n.startTime,i)]},w=function(e){return"cancelAndHold"===e.type},b=function(e){return"cancelScheduledValues"===e.type},x=function(e){return w(e)||b(e)?e.cancelTime:f(e)||p(e)?e.endTime:e.startTime},k=function(e,t,n,r){var i=r.endTime,o=r.value;return n===o?o:0<n&&0<o||n<0&&o<0?n*Math.pow(o/n,(e-t)/(i-t)):0},E=function(e,t,n,r){return n+(e-t)/(r.endTime-t)*(r.value-n)},S=function(e,t){var n=t.duration,r=t.startTime,i=t.values;return function(e,t){var n=Math.floor(t),r=Math.ceil(t);return n===r?e[n]:(1-(t-n))*e[n]+(1-(r-t))*e[r]}(i,(e-r)/n*(i.length-1))},C=function(e){return"setTarget"===e.type},T=function(){function e(t){a.default(this,e),this._automationEvents=[],this._currenTime=0,this._defaultValue=t}return s.default(e,[{key:Symbol.iterator,value:function(){return this._automationEvents[Symbol.iterator]()}},{key:"add",value:function(e){var t=x(e);if(w(e)||b(e)){var n=this._automationEvents.findIndex((function(n){return b(e)&&v(n)?n.startTime+n.duration>=t:x(n)>=t})),r=this._automationEvents[n];if(-1!==n&&(this._automationEvents=this._automationEvents.slice(0,n)),w(e)){var i=this._automationEvents[this._automationEvents.length-1];if(void 0!==r&&m(r)){if(C(i))throw new Error("The internal list is malformed.");var o=v(i)?i.startTime+i.duration:x(i),a=v(i)?i.values[i.values.length-1]:i.value,s=f(r)?k(t,o,a,r):E(t,o,a,r),d=f(r)?l(s,t,this._currenTime):u(s,t,this._currenTime);this._automationEvents.push(d)}void 0!==i&&C(i)&&this._automationEvents.push(c(this.getValue(t),t)),void 0!==i&&v(i)&&i.startTime+i.duration>t&&(this._automationEvents[this._automationEvents.length-1]=h(new Float32Array([6,7]),i.startTime,t-i.startTime))}}else{var g=this._automationEvents.findIndex((function(e){return x(e)>t})),y=-1===g?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[g-1];if(void 0!==y&&v(y)&&x(y)+y.duration>t)return!1;var _=f(e)?l(e.value,e.endTime,this._currenTime):p(e)?u(e.value,t,this._currenTime):e;if(-1===g)this._automationEvents.push(_);else{if(v(e)&&t+e.duration>x(this._automationEvents[g]))return!1;this._automationEvents.splice(g,0,_)}}return!0}},{key:"flush",value:function(e){var t=this._automationEvents.findIndex((function(t){return x(t)>e}));if(t>1){var n=this._automationEvents.slice(t-1),r=n[0];C(r)&&n.unshift(c(y(this._automationEvents,t-2,r.startTime,this._defaultValue),r.startTime)),this._automationEvents=n}}},{key:"getValue",value:function(e){if(0===this._automationEvents.length)return this._defaultValue;var t=this._automationEvents.findIndex((function(t){return x(t)>e})),n=this._automationEvents[t],r=(-1===t?this._automationEvents.length:t)-1,i=this._automationEvents[r];if(void 0!==i&&C(i)&&(void 0===n||!m(n)||n.insertTime>e))return d(e,y(this._automationEvents,r-1,i.startTime,this._defaultValue),i);if(void 0!==i&&g(i)&&(void 0===n||!m(n)))return i.value;if(void 0!==i&&v(i)&&(void 0===n||!m(n)||i.startTime+i.duration>e))return e<i.startTime+i.duration?S(e,i):i.values[i.values.length-1];if(void 0!==i&&m(i)&&(void 0===n||!m(n)))return i.value;if(void 0!==n&&f(n)){var a=_(this._automationEvents,r,i,n,this._defaultValue),s=o.default(a,2),l=s[0],u=s[1];return k(e,l,u,n)}if(void 0!==n&&p(n)){var c=_(this._automationEvents,r,i,n,this._defaultValue),h=o.default(c,2),w=h[0],b=h[1];return E(e,w,b,n)}return this._defaultValue}}]),e}();e.AutomationEventList=T,e.createCancelAndHoldAutomationEvent=function(e){return{cancelTime:e,type:"cancelAndHold"}},e.createCancelScheduledValuesAutomationEvent=function(e){return{cancelTime:e,type:"cancelScheduledValues"}},e.createExponentialRampToValueAutomationEvent=function(e,t){return{endTime:t,type:"exponentialRampToValue",value:e}},e.createLinearRampToValueAutomationEvent=function(e,t){return{endTime:t,type:"linearRampToValue",value:e}},e.createSetTargetAutomationEvent=function(e,t,n){return{startTime:t,target:e,timeConstant:n,type:"setTarget"}},e.createSetValueAutomationEvent=c,e.createSetValueCurveAutomationEvent=h,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(38),n(575),n(913))},792:function(e){e.exports=function(){"use strict";for(var e=function(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=1),e<t?t:e>n?n:e},t={},n=0,r=["Boolean","Number","String","Function","Array","Date","RegExp","Undefined","Null"];n<r.length;n+=1){var i=r[n];t["[object "+i+"]"]=i.toLowerCase()}var o=function(e){return t[Object.prototype.toString.call(e)]||"object"},a=Math.PI,s={clip_rgb:function(t){t._clipped=!1,t._unclipped=t.slice(0);for(var n=0;n<=3;n++)n<3?((t[n]<0||t[n]>255)&&(t._clipped=!0),t[n]=e(t[n],0,255)):3===n&&(t[n]=e(t[n],0,1));return t},limit:e,type:o,unpack:function(e,t){return void 0===t&&(t=null),e.length>=3?Array.prototype.slice.call(e):"object"==o(e[0])&&t?t.split("").filter((function(t){return void 0!==e[0][t]})).map((function(t){return e[0][t]})):e[0]},last:function(e){if(e.length<2)return null;var t=e.length-1;return"string"==o(e[t])?e[t].toLowerCase():null},PI:a,TWOPI:2*a,PITHIRD:a/3,DEG2RAD:a/180,RAD2DEG:180/a},l={format:{},autodetect:[]},u=s.last,c=s.clip_rgb,h=s.type,d=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=this;if("object"===h(e[0])&&e[0].constructor&&e[0].constructor===this.constructor)return e[0];var r=u(e),i=!1;if(!r){i=!0,l.sorted||(l.autodetect=l.autodetect.sort((function(e,t){return t.p-e.p})),l.sorted=!0);for(var o=0,a=l.autodetect;o<a.length;o+=1){var s=a[o];if(r=s.test.apply(s,e))break}}if(!l.format[r])throw new Error("unknown format: "+e);var d=l.format[r].apply(null,i?e:e.slice(0,-1));n._rgb=c(d),3===n._rgb.length&&n._rgb.push(1)};d.prototype.toString=function(){return"function"==h(this.hex)?this.hex():"["+this._rgb.join(",")+"]"};var f=d,p=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(p.Color,[null].concat(e)))};p.Color=f,p.version="2.1.2";var m=p,g=s.unpack,v=Math.max,y=s.unpack,_=s.unpack,w=s.type;f.prototype.cmyk=function(){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=g(e,"rgb"),r=n[0],i=n[1],o=n[2],a=1-v(r/=255,v(i/=255,o/=255)),s=a<1?1/(1-a):0;return[(1-r-a)*s,(1-i-a)*s,(1-o-a)*s,a]}(this._rgb)},m.cmyk=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["cmyk"])))},l.format.cmyk=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=(e=y(e,"cmyk"))[0],r=e[1],i=e[2],o=e[3],a=e.length>4?e[4]:1;return 1===o?[0,0,0,a]:[n>=1?0:255*(1-n)*(1-o),r>=1?0:255*(1-r)*(1-o),i>=1?0:255*(1-i)*(1-o),a]},l.autodetect.push({p:2,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=_(e,"cmyk"),"array"===w(e)&&4===e.length)return"cmyk"}});var b=s.unpack,x=s.last,k=function(e){return Math.round(100*e)/100},E=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=b(e,"hsla"),r=x(e)||"lsa";return n[0]=k(n[0]||0),n[1]=k(100*n[1])+"%",n[2]=k(100*n[2])+"%","hsla"===r||n.length>3&&n[3]<1?(n[3]=n.length>3?n[3]:1,r="hsla"):n.length=3,r+"("+n.join(",")+")"},S=s.unpack,C=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=(e=S(e,"rgba"))[0],r=e[1],i=e[2];n/=255,r/=255,i/=255;var o,a,s=Math.min(n,r,i),l=Math.max(n,r,i),u=(l+s)/2;return l===s?(o=0,a=Number.NaN):o=u<.5?(l-s)/(l+s):(l-s)/(2-l-s),n==l?a=(r-i)/(l-s):r==l?a=2+(i-n)/(l-s):i==l&&(a=4+(n-r)/(l-s)),(a*=60)<0&&(a+=360),e.length>3&&void 0!==e[3]?[a,o,u,e[3]]:[a,o,u]},T=s.unpack,A=s.last,O=Math.round,M=s.unpack,N=Math.round,D=function(){for(var e,t=[],n=arguments.length;n--;)t[n]=arguments[n];var r,i,o,a=(t=M(t,"hsl"))[0],s=t[1],l=t[2];if(0===s)r=i=o=255*l;else{var u=[0,0,0],c=[0,0,0],h=l<.5?l*(1+s):l+s-l*s,d=2*l-h,f=a/360;u[0]=f+1/3,u[1]=f,u[2]=f-1/3;for(var p=0;p<3;p++)u[p]<0&&(u[p]+=1),u[p]>1&&(u[p]-=1),6*u[p]<1?c[p]=d+6*(h-d)*u[p]:2*u[p]<1?c[p]=h:3*u[p]<2?c[p]=d+(h-d)*(2/3-u[p])*6:c[p]=d;r=(e=[N(255*c[0]),N(255*c[1]),N(255*c[2])])[0],i=e[1],o=e[2]}return t.length>3?[r,i,o,t[3]]:[r,i,o,1]},P=/^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/,R=/^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/,I=/^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,L=/^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,V=/^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/,F=/^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/,j=Math.round,z=function(e){var t;if(e=e.toLowerCase().trim(),l.format.named)try{return l.format.named(e)}catch(e){}if(t=e.match(P)){for(var n=t.slice(1,4),r=0;r<3;r++)n[r]=+n[r];return n[3]=1,n}if(t=e.match(R)){for(var i=t.slice(1,5),o=0;o<4;o++)i[o]=+i[o];return i}if(t=e.match(I)){for(var a=t.slice(1,4),s=0;s<3;s++)a[s]=j(2.55*a[s]);return a[3]=1,a}if(t=e.match(L)){for(var u=t.slice(1,5),c=0;c<3;c++)u[c]=j(2.55*u[c]);return u[3]=+u[3],u}if(t=e.match(V)){var h=t.slice(1,4);h[1]*=.01,h[2]*=.01;var d=D(h);return d[3]=1,d}if(t=e.match(F)){var f=t.slice(1,4);f[1]*=.01,f[2]*=.01;var p=D(f);return p[3]=+t[4],p}};z.test=function(e){return P.test(e)||R.test(e)||I.test(e)||L.test(e)||V.test(e)||F.test(e)};var q=z,B=s.type;f.prototype.css=function(e){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=T(e,"rgba"),r=A(e)||"rgb";return"hsl"==r.substr(0,3)?E(C(n),r):(n[0]=O(n[0]),n[1]=O(n[1]),n[2]=O(n[2]),("rgba"===r||n.length>3&&n[3]<1)&&(n[3]=n.length>3?n[3]:1,r="rgba"),r+"("+n.slice(0,"rgb"===r?3:4).join(",")+")")}(this._rgb,e)},m.css=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["css"])))},l.format.css=q,l.autodetect.push({p:5,test:function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if(!t.length&&"string"===B(e)&&q.test(e))return"css"}});var U=s.unpack;l.format.gl=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=U(e,"rgba");return n[0]*=255,n[1]*=255,n[2]*=255,n},m.gl=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["gl"])))},f.prototype.gl=function(){var e=this._rgb;return[e[0]/255,e[1]/255,e[2]/255,e[3]]};var W=s.unpack,$=s.unpack,G=Math.floor,H=s.unpack,Y=s.type;f.prototype.hcg=function(){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n,r=W(e,"rgb"),i=r[0],o=r[1],a=r[2],s=Math.min(i,o,a),l=Math.max(i,o,a),u=l-s,c=100*u/255,h=s/(255-u)*100;return 0===u?n=Number.NaN:(i===l&&(n=(o-a)/u),o===l&&(n=2+(a-i)/u),a===l&&(n=4+(i-o)/u),(n*=60)<0&&(n+=360)),[n,c,h]}(this._rgb)},m.hcg=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["hcg"])))},l.format.hcg=function(){for(var e,t,n,r,i,o,a=[],s=arguments.length;s--;)a[s]=arguments[s];var l,u,c,h=(a=$(a,"hcg"))[0],d=a[1],f=a[2];f*=255;var p=255*d;if(0===d)l=u=c=f;else{360===h&&(h=0),h>360&&(h-=360),h<0&&(h+=360);var m=G(h/=60),g=h-m,v=f*(1-d),y=v+p*(1-g),_=v+p*g,w=v+p;switch(m){case 0:l=(e=[w,_,v])[0],u=e[1],c=e[2];break;case 1:l=(t=[y,w,v])[0],u=t[1],c=t[2];break;case 2:l=(n=[v,w,_])[0],u=n[1],c=n[2];break;case 3:l=(r=[v,y,w])[0],u=r[1],c=r[2];break;case 4:l=(i=[_,v,w])[0],u=i[1],c=i[2];break;case 5:l=(o=[w,v,y])[0],u=o[1],c=o[2]}}return[l,u,c,a.length>3?a[3]:1]},l.autodetect.push({p:1,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=H(e,"hcg"),"array"===Y(e)&&3===e.length)return"hcg"}});var X=s.unpack,Q=s.last,Z=Math.round,K=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=X(e,"rgba"),r=n[0],i=n[1],o=n[2],a=n[3],s=Q(e)||"auto";void 0===a&&(a=1),"auto"===s&&(s=a<1?"rgba":"rgb");var l="000000"+((r=Z(r))<<16|(i=Z(i))<<8|(o=Z(o))).toString(16);l=l.substr(l.length-6);var u="0"+Z(255*a).toString(16);switch(u=u.substr(u.length-2),s.toLowerCase()){case"rgba":return"#"+l+u;case"argb":return"#"+u+l;default:return"#"+l}},J=/^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/,ee=/^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/,te=function(e){if(e.match(J)){4!==e.length&&7!==e.length||(e=e.substr(1)),3===e.length&&(e=(e=e.split(""))[0]+e[0]+e[1]+e[1]+e[2]+e[2]);var t=parseInt(e,16);return[t>>16,t>>8&255,255&t,1]}if(e.match(ee)){5!==e.length&&9!==e.length||(e=e.substr(1)),4===e.length&&(e=(e=e.split(""))[0]+e[0]+e[1]+e[1]+e[2]+e[2]+e[3]+e[3]);var n=parseInt(e,16);return[n>>24&255,n>>16&255,n>>8&255,Math.round((255&n)/255*100)/100]}throw new Error("unknown hex color: "+e)},ne=s.type;f.prototype.hex=function(e){return K(this._rgb,e)},m.hex=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["hex"])))},l.format.hex=te,l.autodetect.push({p:4,test:function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if(!t.length&&"string"===ne(e)&&[3,4,5,6,7,8,9].indexOf(e.length)>=0)return"hex"}});var re=s.unpack,ie=s.TWOPI,oe=Math.min,ae=Math.sqrt,se=Math.acos,le=s.unpack,ue=s.limit,ce=s.TWOPI,he=s.PITHIRD,de=Math.cos,fe=s.unpack,pe=s.type;f.prototype.hsi=function(){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n,r=re(e,"rgb"),i=r[0],o=r[1],a=r[2],s=oe(i/=255,o/=255,a/=255),l=(i+o+a)/3,u=l>0?1-s/l:0;return 0===u?n=NaN:(n=(i-o+(i-a))/2,n/=ae((i-o)*(i-o)+(i-a)*(o-a)),n=se(n),a>o&&(n=ie-n),n/=ie),[360*n,u,l]}(this._rgb)},m.hsi=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["hsi"])))},l.format.hsi=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n,r,i,o=(e=le(e,"hsi"))[0],a=e[1],s=e[2];return isNaN(o)&&(o=0),isNaN(a)&&(a=0),o>360&&(o-=360),o<0&&(o+=360),(o/=360)<1/3?r=1-((i=(1-a)/3)+(n=(1+a*de(ce*o)/de(he-ce*o))/3)):o<2/3?i=1-((n=(1-a)/3)+(r=(1+a*de(ce*(o-=1/3))/de(he-ce*o))/3)):n=1-((r=(1-a)/3)+(i=(1+a*de(ce*(o-=2/3))/de(he-ce*o))/3)),[255*(n=ue(s*n*3)),255*(r=ue(s*r*3)),255*(i=ue(s*i*3)),e.length>3?e[3]:1]},l.autodetect.push({p:2,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=fe(e,"hsi"),"array"===pe(e)&&3===e.length)return"hsi"}});var me=s.unpack,ge=s.type;f.prototype.hsl=function(){return C(this._rgb)},m.hsl=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["hsl"])))},l.format.hsl=D,l.autodetect.push({p:2,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=me(e,"hsl"),"array"===ge(e)&&3===e.length)return"hsl"}});var ve=s.unpack,ye=Math.min,_e=Math.max,we=s.unpack,be=Math.floor,xe=s.unpack,ke=s.type;f.prototype.hsv=function(){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n,r,i,o=(e=ve(e,"rgb"))[0],a=e[1],s=e[2],l=ye(o,a,s),u=_e(o,a,s),c=u-l;return i=u/255,0===u?(n=Number.NaN,r=0):(r=c/u,o===u&&(n=(a-s)/c),a===u&&(n=2+(s-o)/c),s===u&&(n=4+(o-a)/c),(n*=60)<0&&(n+=360)),[n,r,i]}(this._rgb)},m.hsv=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["hsv"])))},l.format.hsv=function(){for(var e,t,n,r,i,o,a=[],s=arguments.length;s--;)a[s]=arguments[s];var l,u,c,h=(a=we(a,"hsv"))[0],d=a[1],f=a[2];if(f*=255,0===d)l=u=c=f;else{360===h&&(h=0),h>360&&(h-=360),h<0&&(h+=360);var p=be(h/=60),m=h-p,g=f*(1-d),v=f*(1-d*m),y=f*(1-d*(1-m));switch(p){case 0:l=(e=[f,y,g])[0],u=e[1],c=e[2];break;case 1:l=(t=[v,f,g])[0],u=t[1],c=t[2];break;case 2:l=(n=[g,f,y])[0],u=n[1],c=n[2];break;case 3:l=(r=[g,v,f])[0],u=r[1],c=r[2];break;case 4:l=(i=[y,g,f])[0],u=i[1],c=i[2];break;case 5:l=(o=[f,g,v])[0],u=o[1],c=o[2]}}return[l,u,c,a.length>3?a[3]:1]},l.autodetect.push({p:2,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=xe(e,"hsv"),"array"===ke(e)&&3===e.length)return"hsv"}});var Ee=18,Se=.95047,Ce=1,Te=1.08883,Ae=.137931034,Oe=.206896552,Me=.12841855,Ne=.008856452,De=s.unpack,Pe=Math.pow,Re=function(e){return(e/=255)<=.04045?e/12.92:Pe((e+.055)/1.055,2.4)},Ie=function(e){return e>Ne?Pe(e,1/3):e/Me+Ae},Le=function(e,t,n){return e=Re(e),t=Re(t),n=Re(n),[Ie((.4124564*e+.3575761*t+.1804375*n)/Se),Ie((.2126729*e+.7151522*t+.072175*n)/Ce),Ie((.0193339*e+.119192*t+.9503041*n)/Te)]},Ve=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=De(e,"rgb"),r=n[0],i=n[1],o=n[2],a=Le(r,i,o),s=a[0],l=a[1],u=116*l-16;return[u<0?0:u,500*(s-l),200*(l-a[2])]},Fe=s.unpack,je=Math.pow,ze=function(e){return 255*(e<=.00304?12.92*e:1.055*je(e,1/2.4)-.055)},qe=function(e){return e>Oe?e*e*e:Me*(e-Ae)},Be=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n,r,i,o=(e=Fe(e,"lab"))[0],a=e[1],s=e[2];return r=(o+16)/116,n=isNaN(a)?r:r+a/500,i=isNaN(s)?r:r-s/200,r=Ce*qe(r),n=Se*qe(n),i=Te*qe(i),[ze(3.2404542*n-1.5371385*r-.4985314*i),ze(-.969266*n+1.8760108*r+.041556*i),ze(.0556434*n-.2040259*r+1.0572252*i),e.length>3?e[3]:1]},Ue=s.unpack,We=s.type;f.prototype.lab=function(){return Ve(this._rgb)},m.lab=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["lab"])))},l.format.lab=Be,l.autodetect.push({p:2,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=Ue(e,"lab"),"array"===We(e)&&3===e.length)return"lab"}});var $e=s.unpack,Ge=s.RAD2DEG,He=Math.sqrt,Ye=Math.atan2,Xe=Math.round,Qe=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=$e(e,"lab"),r=n[0],i=n[1],o=n[2],a=He(i*i+o*o),s=(Ye(o,i)*Ge+360)%360;return 0===Xe(1e4*a)&&(s=Number.NaN),[r,a,s]},Ze=s.unpack,Ke=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=Ze(e,"rgb"),r=n[0],i=n[1],o=n[2],a=Ve(r,i,o),s=a[0],l=a[1],u=a[2];return Qe(s,l,u)},Je=s.unpack,et=s.DEG2RAD,tt=Math.sin,nt=Math.cos,rt=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=Je(e,"lch"),r=n[0],i=n[1],o=n[2];return isNaN(o)&&(o=0),[r,nt(o*=et)*i,tt(o)*i]},it=s.unpack,ot=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=(e=it(e,"lch"))[0],r=e[1],i=e[2],o=rt(n,r,i),a=o[0],s=o[1],l=o[2],u=Be(a,s,l);return[u[0],u[1],u[2],e.length>3?e[3]:1]},at=s.unpack,st=s.unpack,lt=s.type;f.prototype.lch=function(){return Ke(this._rgb)},f.prototype.hcl=function(){return Ke(this._rgb).reverse()},m.lch=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["lch"])))},m.hcl=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["hcl"])))},l.format.lch=ot,l.format.hcl=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=at(e,"hcl").reverse();return ot.apply(void 0,n)},["lch","hcl"].forEach((function(e){return l.autodetect.push({p:2,test:function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(t=st(t,e),"array"===lt(t)&&3===t.length)return e}})}));var ut={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflower:"#6495ed",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",laserlemon:"#ffff54",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrod:"#fafad2",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",maroon2:"#7f0000",maroon3:"#b03060",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",purple2:"#7f007f",purple3:"#a020f0",rebeccapurple:"#663399",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"},ct=s.type;f.prototype.name=function(){for(var e=K(this._rgb,"rgb"),t=0,n=Object.keys(ut);t<n.length;t+=1){var r=n[t];if(ut[r]===e)return r.toLowerCase()}return e},l.format.named=function(e){if(e=e.toLowerCase(),ut[e])return te(ut[e]);throw new Error("unknown color name: "+e)},l.autodetect.push({p:5,test:function(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if(!t.length&&"string"===ct(e)&&ut[e.toLowerCase()])return"named"}});var ht=s.unpack,dt=s.type,ft=s.type;f.prototype.num=function(){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=ht(e,"rgb");return(n[0]<<16)+(n[1]<<8)+n[2]}(this._rgb)},m.num=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["num"])))},l.format.num=function(e){if("number"==dt(e)&&e>=0&&e<=16777215)return[e>>16,e>>8&255,255&e,1];throw new Error("unknown num color: "+e)},l.autodetect.push({p:5,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(1===e.length&&"number"===ft(e[0])&&e[0]>=0&&e[0]<=16777215)return"num"}});var pt=s.unpack,mt=s.type,gt=Math.round;f.prototype.rgb=function(e){return void 0===e&&(e=!0),!1===e?this._rgb.slice(0,3):this._rgb.slice(0,3).map(gt)},f.prototype.rgba=function(e){return void 0===e&&(e=!0),this._rgb.slice(0,4).map((function(t,n){return n<3?!1===e?t:gt(t):t}))},m.rgb=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["rgb"])))},l.format.rgb=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var n=pt(e,"rgba");return void 0===n[3]&&(n[3]=1),n},l.autodetect.push({p:3,test:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];if(e=pt(e,"rgba"),"array"===mt(e)&&(3===e.length||4===e.length&&"number"==mt(e[3])&&e[3]>=0&&e[3]<=1))return"rgb"}});var vt=Math.log,yt=function(e){var t,n,r,i=e/100;return i<66?(t=255,n=-155.25485562709179-.44596950469579133*(n=i-2)+104.49216199393888*vt(n),r=i<20?0:.8274096064007395*(r=i-10)-254.76935184120902+115.67994401066147*vt(r)):(t=351.97690566805693+.114206453784165*(t=i-55)-40.25366309332127*vt(t),n=325.4494125711974+.07943456536662342*(n=i-50)-28.0852963507957*vt(n),r=255),[t,n,r,1]},_t=s.unpack,wt=Math.round;f.prototype.temp=f.prototype.kelvin=f.prototype.temperature=function(){return function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var n,r=_t(e,"rgb"),i=r[0],o=r[2],a=1e3,s=4e4,l=.4;s-a>l;){var u=yt(n=.5*(s+a));u[2]/u[0]>=o/i?s=n:a=n}return wt(n)}(this._rgb)},m.temp=m.kelvin=m.temperature=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return new(Function.prototype.bind.apply(f,[null].concat(e,["temp"])))},l.format.temp=l.format.kelvin=l.format.temperature=yt;var bt=s.type;f.prototype.alpha=function(e,t){return void 0===t&&(t=!1),void 0!==e&&"number"===bt(e)?t?(this._rgb[3]=e,this):new f([this._rgb[0],this._rgb[1],this._rgb[2],e],"rgb"):this._rgb[3]},f.prototype.clipped=function(){return this._rgb._clipped||!1},f.prototype.darken=function(e){void 0===e&&(e=1);var t=this.lab();return t[0]-=Ee*e,new f(t,"lab").alpha(this.alpha(),!0)},f.prototype.brighten=function(e){return void 0===e&&(e=1),this.darken(-e)},f.prototype.darker=f.prototype.darken,f.prototype.brighter=f.prototype.brighten,f.prototype.get=function(e){var t=e.split("."),n=t[0],r=t[1],i=this[n]();if(r){var o=n.indexOf(r);if(o>-1)return i[o];throw new Error("unknown channel "+r+" in mode "+n)}return i};var xt=s.type,kt=Math.pow;f.prototype.luminance=function(e){if(void 0!==e&&"number"===xt(e)){if(0===e)return new f([0,0,0,this._rgb[3]],"rgb");if(1===e)return new f([255,255,255,this._rgb[3]],"rgb");var t=this.luminance(),n=20,r=function(t,i){var o=t.interpolate(i,.5,"rgb"),a=o.luminance();return Math.abs(e-a)<1e-7||!n--?o:a>e?r(t,o):r(o,i)},i=(t>e?r(new f([0,0,0]),this):r(this,new f([255,255,255]))).rgb();return new f(i.concat([this._rgb[3]]))}return Et.apply(void 0,this._rgb.slice(0,3))};var Et=function(e,t,n){return.2126*(e=St(e))+.7152*(t=St(t))+.0722*St(n)},St=function(e){return(e/=255)<=.03928?e/12.92:kt((e+.055)/1.055,2.4)},Ct={},Tt=s.type,At=function(e,t,n){void 0===n&&(n=.5);for(var r=[],i=arguments.length-3;i-- >0;)r[i]=arguments[i+3];var o=r[0]||"lrgb";if(Ct[o]||r.length||(o=Object.keys(Ct)[0]),!Ct[o])throw new Error("interpolation mode "+o+" is not defined");return"object"!==Tt(e)&&(e=new f(e)),"object"!==Tt(t)&&(t=new f(t)),Ct[o](e,t,n).alpha(e.alpha()+n*(t.alpha()-e.alpha()))};f.prototype.mix=f.prototype.interpolate=function(e,t){void 0===t&&(t=.5);for(var n=[],r=arguments.length-2;r-- >0;)n[r]=arguments[r+2];return At.apply(void 0,[this,e,t].concat(n))},f.prototype.premultiply=function(e){void 0===e&&(e=!1);var t=this._rgb,n=t[3];return e?(this._rgb=[t[0]*n,t[1]*n,t[2]*n,n],this):new f([t[0]*n,t[1]*n,t[2]*n,n],"rgb")},f.prototype.saturate=function(e){void 0===e&&(e=1);var t=this.lch();return t[1]+=Ee*e,t[1]<0&&(t[1]=0),new f(t,"lch").alpha(this.alpha(),!0)},f.prototype.desaturate=function(e){return void 0===e&&(e=1),this.saturate(-e)};var Ot=s.type;f.prototype.set=function(e,t,n){void 0===n&&(n=!1);var r=e.split("."),i=r[0],o=r[1],a=this[i]();if(o){var s=i.indexOf(o);if(s>-1){if("string"==Ot(t))switch(t.charAt(0)){case"+":case"-":a[s]+=+t;break;case"*":a[s]*=+t.substr(1);break;case"/":a[s]/=+t.substr(1);break;default:a[s]=+t}else{if("number"!==Ot(t))throw new Error("unsupported value for Color.set");a[s]=t}var l=new f(a,i);return n?(this._rgb=l._rgb,this):l}throw new Error("unknown channel "+o+" in mode "+i)}return a};Ct.rgb=function(e,t,n){var r=e._rgb,i=t._rgb;return new f(r[0]+n*(i[0]-r[0]),r[1]+n*(i[1]-r[1]),r[2]+n*(i[2]-r[2]),"rgb")};var Mt=Math.sqrt,Nt=Math.pow;Ct.lrgb=function(e,t,n){var r=e._rgb,i=r[0],o=r[1],a=r[2],s=t._rgb,l=s[0],u=s[1],c=s[2];return new f(Mt(Nt(i,2)*(1-n)+Nt(l,2)*n),Mt(Nt(o,2)*(1-n)+Nt(u,2)*n),Mt(Nt(a,2)*(1-n)+Nt(c,2)*n),"rgb")};Ct.lab=function(e,t,n){var r=e.lab(),i=t.lab();return new f(r[0]+n*(i[0]-r[0]),r[1]+n*(i[1]-r[1]),r[2]+n*(i[2]-r[2]),"lab")};var Dt=function(e,t,n,r){var i,o,a,s,l,u,c,h,d,p,m,g;return"hsl"===r?(a=e.hsl(),s=t.hsl()):"hsv"===r?(a=e.hsv(),s=t.hsv()):"hcg"===r?(a=e.hcg(),s=t.hcg()):"hsi"===r?(a=e.hsi(),s=t.hsi()):"lch"!==r&&"hcl"!==r||(r="hcl",a=e.hcl(),s=t.hcl()),"h"===r.substr(0,1)&&(l=(i=a)[0],c=i[1],d=i[2],u=(o=s)[0],h=o[1],p=o[2]),isNaN(l)||isNaN(u)?isNaN(l)?isNaN(u)?g=Number.NaN:(g=u,1!=d&&0!=d||"hsv"==r||(m=h)):(g=l,1!=p&&0!=p||"hsv"==r||(m=c)):g=l+n*(u>l&&u-l>180?u-(l+360):u<l&&l-u>180?u+360-l:u-l),void 0===m&&(m=c+n*(h-c)),new f([g,m,d+n*(p-d)],r)},Pt=function(e,t,n){return Dt(e,t,n,"lch")};Ct.lch=Pt,Ct.hcl=Pt;Ct.num=function(e,t,n){var r=e.num(),i=t.num();return new f(r+n*(i-r),"num")};Ct.hcg=function(e,t,n){return Dt(e,t,n,"hcg")};Ct.hsi=function(e,t,n){return Dt(e,t,n,"hsi")};Ct.hsl=function(e,t,n){return Dt(e,t,n,"hsl")};Ct.hsv=function(e,t,n){return Dt(e,t,n,"hsv")};var Rt=s.clip_rgb,It=Math.pow,Lt=Math.sqrt,Vt=Math.PI,Ft=Math.cos,jt=Math.sin,zt=Math.atan2,qt=function(e,t){for(var n=e.length,r=[0,0,0,0],i=0;i<e.length;i++){var o=e[i],a=t[i]/n,s=o._rgb;r[0]+=It(s[0],2)*a,r[1]+=It(s[1],2)*a,r[2]+=It(s[2],2)*a,r[3]+=s[3]*a}return r[0]=Lt(r[0]),r[1]=Lt(r[1]),r[2]=Lt(r[2]),r[3]>.9999999&&(r[3]=1),new f(Rt(r))},Bt=s.type,Ut=Math.pow,Wt=function(e){var t="rgb",n=m("#ccc"),r=0,i=[0,1],o=[],a=[0,0],s=!1,l=[],u=!1,c=0,h=1,d=!1,f={},p=!0,g=1,v=function(e){if((e=e||["#fff","#000"])&&"string"===Bt(e)&&m.brewer&&m.brewer[e.toLowerCase()]&&(e=m.brewer[e.toLowerCase()]),"array"===Bt(e)){1===e.length&&(e=[e[0],e[0]]),e=e.slice(0);for(var t=0;t<e.length;t++)e[t]=m(e[t]);o.length=0;for(var n=0;n<e.length;n++)o.push(n/(e.length-1))}return b(),l=e},y=function(e){return e},_=function(e){return e},w=function(e,r){var i,u;if(null==r&&(r=!1),isNaN(e)||null===e)return n;u=r?e:s&&s.length>2?function(e){if(null!=s){for(var t=s.length-1,n=0;n<t&&e>=s[n];)n++;return n-1}return 0}(e)/(s.length-2):h!==c?(e-c)/(h-c):1,u=_(u),r||(u=y(u)),1!==g&&(u=Ut(u,g)),u=a[0]+u*(1-a[0]-a[1]),u=Math.min(1,Math.max(0,u));var d=Math.floor(1e4*u);if(p&&f[d])i=f[d];else{if("array"===Bt(l))for(var v=0;v<o.length;v++){var w=o[v];if(u<=w){i=l[v];break}if(u>=w&&v===o.length-1){i=l[v];break}if(u>w&&u<o[v+1]){u=(u-w)/(o[v+1]-w),i=m.interpolate(l[v],l[v+1],u,t);break}}else"function"===Bt(l)&&(i=l(u));p&&(f[d]=i)}return i},b=function(){return f={}};v(e);var x=function(e){var t=m(w(e));return u&&t[u]?t[u]():t};return x.classes=function(e){if(null!=e){if("array"===Bt(e))s=e,i=[e[0],e[e.length-1]];else{var t=m.analyze(i);s=0===e?[t.min,t.max]:m.limits(t,"e",e)}return x}return s},x.domain=function(e){if(!arguments.length)return i;c=e[0],h=e[e.length-1],o=[];var t=l.length;if(e.length===t&&c!==h)for(var n=0,r=Array.from(e);n<r.length;n+=1){var a=r[n];o.push((a-c)/(h-c))}else{for(var s=0;s<t;s++)o.push(s/(t-1));if(e.length>2){var u=e.map((function(t,n){return n/(e.length-1)})),d=e.map((function(e){return(e-c)/(h-c)}));d.every((function(e,t){return u[t]===e}))||(_=function(e){if(e<=0||e>=1)return e;for(var t=0;e>=d[t+1];)t++;var n=(e-d[t])/(d[t+1]-d[t]);return u[t]+n*(u[t+1]-u[t])})}}return i=[c,h],x},x.mode=function(e){return arguments.length?(t=e,b(),x):t},x.range=function(e,t){return v(e),x},x.out=function(e){return u=e,x},x.spread=function(e){return arguments.length?(r=e,x):r},x.correctLightness=function(e){return null==e&&(e=!0),d=e,b(),y=d?function(e){for(var t=w(0,!0).lab()[0],n=w(1,!0).lab()[0],r=t>n,i=w(e,!0).lab()[0],o=t+(n-t)*e,a=i-o,s=0,l=1,u=20;Math.abs(a)>.01&&u-- >0;)r&&(a*=-1),a<0?(s=e,e+=.5*(l-e)):(l=e,e+=.5*(s-e)),a=(i=w(e,!0).lab()[0])-o;return e}:function(e){return e},x},x.padding=function(e){return null!=e?("number"===Bt(e)&&(e=[e,e]),a=e,x):a},x.colors=function(t,n){arguments.length<2&&(n="hex");var r=[];if(0===arguments.length)r=l.slice(0);else if(1===t)r=[x(.5)];else if(t>1){var o=i[0],a=i[1]-o;r=$t(0,t,!1).map((function(e){return x(o+e/(t-1)*a)}))}else{e=[];var u=[];if(s&&s.length>2)for(var c=1,h=s.length,d=1<=h;d?c<h:c>h;d?c++:c--)u.push(.5*(s[c-1]+s[c]));else u=i;r=u.map((function(e){return x(e)}))}return m[n]&&(r=r.map((function(e){return e[n]()}))),r},x.cache=function(e){return null!=e?(p=e,x):p},x.gamma=function(e){return null!=e?(g=e,x):g},x.nodata=function(e){return null!=e?(n=m(e),x):n},x};function $t(e,t,n){for(var r=[],i=e<t,o=n?i?t+1:t-1:t,a=e;i?a<o:a>o;i?a++:a--)r.push(a);return r}var Gt=function(e){var t,n,r,i,o,a,s;if(2===(e=e.map((function(e){return new f(e)}))).length)t=e.map((function(e){return e.lab()})),o=t[0],a=t[1],i=function(e){var t=[0,1,2].map((function(t){return o[t]+e*(a[t]-o[t])}));return new f(t,"lab")};else if(3===e.length)n=e.map((function(e){return e.lab()})),o=n[0],a=n[1],s=n[2],i=function(e){var t=[0,1,2].map((function(t){return(1-e)*(1-e)*o[t]+2*(1-e)*e*a[t]+e*e*s[t]}));return new f(t,"lab")};else if(4===e.length){var l;r=e.map((function(e){return e.lab()})),o=r[0],a=r[1],s=r[2],l=r[3],i=function(e){var t=[0,1,2].map((function(t){return(1-e)*(1-e)*(1-e)*o[t]+3*(1-e)*(1-e)*e*a[t]+3*(1-e)*e*e*s[t]+e*e*e*l[t]}));return new f(t,"lab")}}else if(5===e.length){var u=Gt(e.slice(0,3)),c=Gt(e.slice(2,5));i=function(e){return e<.5?u(2*e):c(2*(e-.5))}}return i},Ht=function(e,t,n){if(!Ht[n])throw new Error("unknown blend mode "+n);return Ht[n](e,t)},Yt=function(e){return function(t,n){var r=m(n).rgb(),i=m(t).rgb();return m.rgb(e(r,i))}},Xt=function(e){return function(t,n){var r=[];return r[0]=e(t[0],n[0]),r[1]=e(t[1],n[1]),r[2]=e(t[2],n[2]),r}};Ht.normal=Yt(Xt((function(e){return e}))),Ht.multiply=Yt(Xt((function(e,t){return e*t/255}))),Ht.screen=Yt(Xt((function(e,t){return 255*(1-(1-e/255)*(1-t/255))}))),Ht.overlay=Yt(Xt((function(e,t){return t<128?2*e*t/255:255*(1-2*(1-e/255)*(1-t/255))}))),Ht.darken=Yt(Xt((function(e,t){return e>t?t:e}))),Ht.lighten=Yt(Xt((function(e,t){return e>t?e:t}))),Ht.dodge=Yt(Xt((function(e,t){return 255===e||(e=t/255*255/(1-e/255))>255?255:e}))),Ht.burn=Yt(Xt((function(e,t){return 255*(1-(1-t/255)/(e/255))})));for(var Qt=Ht,Zt=s.type,Kt=s.clip_rgb,Jt=s.TWOPI,en=Math.pow,tn=Math.sin,nn=Math.cos,rn=Math.floor,on=Math.random,an=Math.log,sn=Math.pow,ln=Math.floor,un=Math.abs,cn=function(e,t){void 0===t&&(t=null);var n={min:Number.MAX_VALUE,max:-1*Number.MAX_VALUE,sum:0,values:[],count:0};return"object"===o(e)&&(e=Object.values(e)),e.forEach((function(e){t&&"object"===o(e)&&(e=e[t]),null==e||isNaN(e)||(n.values.push(e),n.sum+=e,e<n.min&&(n.min=e),e>n.max&&(n.max=e),n.count+=1)})),n.domain=[n.min,n.max],n.limits=function(e,t){return hn(n,e,t)},n},hn=function(e,t,n){void 0===t&&(t="equal"),void 0===n&&(n=7),"array"==o(e)&&(e=cn(e));var r=e.min,i=e.max,a=e.values.sort((function(e,t){return e-t}));if(1===n)return[r,i];var s=[];if("c"===t.substr(0,1)&&(s.push(r),s.push(i)),"e"===t.substr(0,1)){s.push(r);for(var l=1;l<n;l++)s.push(r+l/n*(i-r));s.push(i)}else if("l"===t.substr(0,1)){if(r<=0)throw new Error("Logarithmic scales are only possible for values > 0");var u=Math.LOG10E*an(r),c=Math.LOG10E*an(i);s.push(r);for(var h=1;h<n;h++)s.push(sn(10,u+h/n*(c-u)));s.push(i)}else if("q"===t.substr(0,1)){s.push(r);for(var d=1;d<n;d++){var f=(a.length-1)*d/n,p=ln(f);if(p===f)s.push(a[p]);else{var m=f-p;s.push(a[p]*(1-m)+a[p+1]*m)}}s.push(i)}else if("k"===t.substr(0,1)){var g,v=a.length,y=new Array(v),_=new Array(n),w=!0,b=0,x=null;(x=[]).push(r);for(var k=1;k<n;k++)x.push(r+k/n*(i-r));for(x.push(i);w;){for(var E=0;E<n;E++)_[E]=0;for(var S=0;S<v;S++)for(var C=a[S],T=Number.MAX_VALUE,A=void 0,O=0;O<n;O++){var M=un(x[O]-C);M<T&&(T=M,A=O),_[A]++,y[S]=A}for(var N=new Array(n),D=0;D<n;D++)N[D]=null;for(var P=0;P<v;P++)null===N[g=y[P]]?N[g]=a[P]:N[g]+=a[P];for(var R=0;R<n;R++)N[R]*=1/_[R];w=!1;for(var I=0;I<n;I++)if(N[I]!==x[I]){w=!0;break}x=N,++b>200&&(w=!1)}for(var L={},V=0;V<n;V++)L[V]=[];for(var F=0;F<v;F++)L[g=y[F]].push(a[F]);for(var j=[],z=0;z<n;z++)j.push(L[z][0]),j.push(L[z][L[z].length-1]);j=j.sort((function(e,t){return e-t})),s.push(j[0]);for(var q=1;q<j.length;q+=2){var B=j[q];isNaN(B)||-1!==s.indexOf(B)||s.push(B)}}return s},dn={analyze:cn,limits:hn},fn=Math.sqrt,pn=Math.atan2,mn=Math.abs,gn=Math.cos,vn=Math.PI,yn={cool:function(){return Wt([m.hsl(180,1,.9),m.hsl(250,.7,.4)])},hot:function(){return Wt(["#000","#f00","#ff0","#fff"]).mode("rgb")}},_n={OrRd:["#fff7ec","#fee8c8","#fdd49e","#fdbb84","#fc8d59","#ef6548","#d7301f","#b30000","#7f0000"],PuBu:["#fff7fb","#ece7f2","#d0d1e6","#a6bddb","#74a9cf","#3690c0","#0570b0","#045a8d","#023858"],BuPu:["#f7fcfd","#e0ecf4","#bfd3e6","#9ebcda","#8c96c6","#8c6bb1","#88419d","#810f7c","#4d004b"],Oranges:["#fff5eb","#fee6ce","#fdd0a2","#fdae6b","#fd8d3c","#f16913","#d94801","#a63603","#7f2704"],BuGn:["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],YlOrBr:["#ffffe5","#fff7bc","#fee391","#fec44f","#fe9929","#ec7014","#cc4c02","#993404","#662506"],YlGn:["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529"],Reds:["#fff5f0","#fee0d2","#fcbba1","#fc9272","#fb6a4a","#ef3b2c","#cb181d","#a50f15","#67000d"],RdPu:["#fff7f3","#fde0dd","#fcc5c0","#fa9fb5","#f768a1","#dd3497","#ae017e","#7a0177","#49006a"],Greens:["#f7fcf5","#e5f5e0","#c7e9c0","#a1d99b","#74c476","#41ab5d","#238b45","#006d2c","#00441b"],YlGnBu:["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"],Purples:["#fcfbfd","#efedf5","#dadaeb","#bcbddc","#9e9ac8","#807dba","#6a51a3","#54278f","#3f007d"],GnBu:["#f7fcf0","#e0f3db","#ccebc5","#a8ddb5","#7bccc4","#4eb3d3","#2b8cbe","#0868ac","#084081"],Greys:["#ffffff","#f0f0f0","#d9d9d9","#bdbdbd","#969696","#737373","#525252","#252525","#000000"],YlOrRd:["#ffffcc","#ffeda0","#fed976","#feb24c","#fd8d3c","#fc4e2a","#e31a1c","#bd0026","#800026"],PuRd:["#f7f4f9","#e7e1ef","#d4b9da","#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"],Blues:["#f7fbff","#deebf7","#c6dbef","#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"],PuBuGn:["#fff7fb","#ece2f0","#d0d1e6","#a6bddb","#67a9cf","#3690c0","#02818a","#016c59","#014636"],Viridis:["#440154","#482777","#3f4a8a","#31678e","#26838f","#1f9d8a","#6cce5a","#b6de2b","#fee825"],Spectral:["#9e0142","#d53e4f","#f46d43","#fdae61","#fee08b","#ffffbf","#e6f598","#abdda4","#66c2a5","#3288bd","#5e4fa2"],RdYlGn:["#a50026","#d73027","#f46d43","#fdae61","#fee08b","#ffffbf","#d9ef8b","#a6d96a","#66bd63","#1a9850","#006837"],RdBu:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#f7f7f7","#d1e5f0","#92c5de","#4393c3","#2166ac","#053061"],PiYG:["#8e0152","#c51b7d","#de77ae","#f1b6da","#fde0ef","#f7f7f7","#e6f5d0","#b8e186","#7fbc41","#4d9221","#276419"],PRGn:["#40004b","#762a83","#9970ab","#c2a5cf","#e7d4e8","#f7f7f7","#d9f0d3","#a6dba0","#5aae61","#1b7837","#00441b"],RdYlBu:["#a50026","#d73027","#f46d43","#fdae61","#fee090","#ffffbf","#e0f3f8","#abd9e9","#74add1","#4575b4","#313695"],BrBG:["#543005","#8c510a","#bf812d","#dfc27d","#f6e8c3","#f5f5f5","#c7eae5","#80cdc1","#35978f","#01665e","#003c30"],RdGy:["#67001f","#b2182b","#d6604d","#f4a582","#fddbc7","#ffffff","#e0e0e0","#bababa","#878787","#4d4d4d","#1a1a1a"],PuOr:["#7f3b08","#b35806","#e08214","#fdb863","#fee0b6","#f7f7f7","#d8daeb","#b2abd2","#8073ac","#542788","#2d004b"],Set2:["#66c2a5","#fc8d62","#8da0cb","#e78ac3","#a6d854","#ffd92f","#e5c494","#b3b3b3"],Accent:["#7fc97f","#beaed4","#fdc086","#ffff99","#386cb0","#f0027f","#bf5b17","#666666"],Set1:["#e41a1c","#377eb8","#4daf4a","#984ea3","#ff7f00","#ffff33","#a65628","#f781bf","#999999"],Set3:["#8dd3c7","#ffffb3","#bebada","#fb8072","#80b1d3","#fdb462","#b3de69","#fccde5","#d9d9d9","#bc80bd","#ccebc5","#ffed6f"],Dark2:["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],Paired:["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928"],Pastel2:["#b3e2cd","#fdcdac","#cbd5e8","#f4cae4","#e6f5c9","#fff2ae","#f1e2cc","#cccccc"],Pastel1:["#fbb4ae","#b3cde3","#ccebc5","#decbe4","#fed9a6","#ffffcc","#e5d8bd","#fddaec","#f2f2f2"]},wn=0,bn=Object.keys(_n);wn<bn.length;wn+=1){var xn=bn[wn];_n[xn.toLowerCase()]=_n[xn]}var kn=_n;return m.average=function(e,t,n){void 0===t&&(t="lrgb"),void 0===n&&(n=null);var r=e.length;n||(n=Array.from(new Array(r)).map((function(){return 1})));var i=r/n.reduce((function(e,t){return e+t}));if(n.forEach((function(e,t){n[t]*=i})),e=e.map((function(e){return new f(e)})),"lrgb"===t)return qt(e,n);for(var o=e.shift(),a=o.get(t),s=[],l=0,u=0,c=0;c<a.length;c++)if(a[c]=(a[c]||0)*n[0],s.push(isNaN(a[c])?0:n[0]),"h"===t.charAt(c)&&!isNaN(a[c])){var h=a[c]/180*Vt;l+=Ft(h)*n[0],u+=jt(h)*n[0]}var d=o.alpha()*n[0];e.forEach((function(e,r){var i=e.get(t);d+=e.alpha()*n[r+1];for(var o=0;o<a.length;o++)if(!isNaN(i[o]))if(s[o]+=n[r+1],"h"===t.charAt(o)){var c=i[o]/180*Vt;l+=Ft(c)*n[r+1],u+=jt(c)*n[r+1]}else a[o]+=i[o]*n[r+1]}));for(var p=0;p<a.length;p++)if("h"===t.charAt(p)){for(var m=zt(u/s[p],l/s[p])/Vt*180;m<0;)m+=360;for(;m>=360;)m-=360;a[p]=m}else a[p]=a[p]/s[p];return d/=r,new f(a,t).alpha(d>.99999?1:d,!0)},m.bezier=function(e){var t=Gt(e);return t.scale=function(){return Wt(t)},t},m.blend=Qt,m.cubehelix=function(e,t,n,r,i){void 0===e&&(e=300),void 0===t&&(t=-1.5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===i&&(i=[0,1]);var o,a=0;"array"===Zt(i)?o=i[1]-i[0]:(o=0,i=[i,i]);var s=function(s){var l=Jt*((e+120)/360+t*s),u=en(i[0]+o*s,r),c=(0!==a?n[0]+s*a:n)*u*(1-u)/2,h=nn(l),d=tn(l);return m(Kt([255*(u+c*(-.14861*h+1.78277*d)),255*(u+c*(-.29227*h-.90649*d)),255*(u+c*(1.97294*h)),1]))};return s.start=function(t){return null==t?e:(e=t,s)},s.rotations=function(e){return null==e?t:(t=e,s)},s.gamma=function(e){return null==e?r:(r=e,s)},s.hue=function(e){return null==e?n:("array"===Zt(n=e)?0==(a=n[1]-n[0])&&(n=n[1]):a=0,s)},s.lightness=function(e){return null==e?i:("array"===Zt(e)?(i=e,o=e[1]-e[0]):(i=[e,e],o=0),s)},s.scale=function(){return m.scale(s)},s.hue(n),s},m.mix=m.interpolate=At,m.random=function(){for(var e="#",t=0;t<6;t++)e+="0123456789abcdef".charAt(rn(16*on()));return new f(e,"hex")},m.scale=Wt,m.analyze=dn.analyze,m.contrast=function(e,t){e=new f(e),t=new f(t);var n=e.luminance(),r=t.luminance();return n>r?(n+.05)/(r+.05):(r+.05)/(n+.05)},m.deltaE=function(e,t,n,r){void 0===n&&(n=1),void 0===r&&(r=1),e=new f(e),t=new f(t);for(var i=Array.from(e.lab()),o=i[0],a=i[1],s=i[2],l=Array.from(t.lab()),u=l[0],c=l[1],h=l[2],d=fn(a*a+s*s),p=fn(c*c+h*h),m=o<16?.511:.040975*o/(1+.01765*o),g=.0638*d/(1+.0131*d)+.638,v=d<1e-6?0:180*pn(s,a)/vn;v<0;)v+=360;for(;v>=360;)v-=360;var y=v>=164&&v<=345?.56+mn(.2*gn(vn*(v+168)/180)):.36+mn(.4*gn(vn*(v+35)/180)),_=d*d*d*d,w=fn(_/(_+1900)),b=g*(w*y+1-w),x=d-p,k=a-c,E=s-h,S=(o-u)/(n*m),C=x/(r*g);return fn(S*S+C*C+(k*k+E*E-x*x)/(b*b))},m.distance=function(e,t,n){void 0===n&&(n="lab"),e=new f(e),t=new f(t);var r=e.get(n),i=t.get(n),o=0;for(var a in r){var s=(r[a]||0)-(i[a]||0);o+=s*s}return Math.sqrt(o)},m.limits=dn.limits,m.valid=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];try{return new(Function.prototype.bind.apply(f,[null].concat(e))),!0}catch(e){return!1}},m.scales=yn,m.colors=ut,m.brewer=kn,m}()},679:(e,t,n)=>{"use strict";var r=n(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var u=Object.defineProperty,c=Object.getOwnPropertyNames,h=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,f=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var i=f(n);i&&i!==p&&e(t,i,r)}var a=c(n);h&&(a=a.concat(h(n)));for(var s=l(t),m=l(n),g=0;g<a.length;++g){var v=a[g];if(!(o[v]||r&&r[v]||m&&m[v]||s&&s[v])){var y=d(n,v);try{u(t,v,y)}catch(e){}}}}return t}},826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,s,l=i(e),u=1;u<arguments.length;u++){for(var c in a=Object(arguments[u]))n.call(a,c)&&(l[c]=a[c]);if(t){s=t(a);for(var h=0;h<s.length;h++)r.call(a,s[h])&&(l[s[h]]=a[s[h]])}}return l}},779:(e,t,n)=>{var r=n(826);e.exports=function e(t,n,i){return r(n)||(i=n||i,n=[]),i=i||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var i=[],o=0;o<t.length;o++)i.push(e(t[o],n,r).source);return c(new RegExp("(?:"+i.join("|")+")",h(r)),n)}(t,n,i):function(e,t,n){return d(o(e,n),t,n)}(t,n,i)},e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=d;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=i.exec(e));){var h=n[0],d=n[1],f=n.index;if(s+=e.slice(a,f),a=f+h.length,d)s+=d[1];else{var p=e[a],m=n[2],g=n[3],v=n[4],y=n[5],_=n[6],w=n[7];s&&(r.push(s),s="");var b=null!=m&&null!=p&&p!==m,x="+"===_||"*"===_,k="?"===_||"*"===_,E=n[2]||c,S=v||y;r.push({name:g||o++,prefix:m||"",delimiter:E,optional:k,repeat:x,partial:b,asterisk:!!w,pattern:S?u(S):w?".*":"[^"+l(E)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",h(t)));return function(t,i){for(var o="",s=t||{},l=(i||{}).pretty?a:encodeURIComponent,u=0;u<e.length;u++){var c=e[u];if("string"!=typeof c){var h,d=s[c.name];if(null==d){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var f=0;f<d.length;f++){if(h=l(d[f]),!n[u].test(h))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(h)+"`");o+=(0===f?c.prefix:c.delimiter)+h}}else{if(h=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[u].test(h))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+h+'"');o+=c.prefix+h}}else o+=c}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function u(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function h(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var d=l(u.prefix),f="(?:"+u.pattern+")";t.push(u),u.repeat&&(f+="(?:"+d+f+")*"),a+=f=u.optional?u.partial?d+"("+f+")?":"(?:"+d+"("+f+"))?":d+"("+f+")"}}var p=l(n.delimiter||"/"),m=a.slice(-p.length)===p;return i||(a=(m?a.slice(0,-p.length):a)+"(?:"+p+"(?=$))?"),a+=o?"$":i&&m?"":"(?="+p+"|$)",c(new RegExp("^"+a,h(n)),t)}},703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),i=n(418),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var h=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,p={},m={};function g(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function _(e){return e[1].toUpperCase()}function w(e,t,n,r){var i=v.hasOwnProperty(t)?v[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!f.call(m,e)||!f.call(p,e)&&(d.test(e)?m[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,_);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,_);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,_);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,k=60106,E=60107,S=60108,C=60114,T=60109,A=60110,O=60112,M=60113,N=60120,D=60115,P=60116,R=60121,I=60128,L=60129,V=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var j=Symbol.for;x=j("react.element"),k=j("react.portal"),E=j("react.fragment"),S=j("react.strict_mode"),C=j("react.profiler"),T=j("react.provider"),A=j("react.context"),O=j("react.forward_ref"),M=j("react.suspense"),N=j("react.suspense_list"),D=j("react.memo"),P=j("react.lazy"),R=j("react.block"),j("react.scope"),I=j("react.opaque.id"),L=j("react.debug_trace_mode"),V=j("react.offscreen"),F=j("react.legacy_hidden")}var z,q="function"==typeof Symbol&&Symbol.iterator;function B(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=q&&e[q]||e["@@iterator"])?e:null}function U(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var W=!1;function $(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function G(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case C:return"Profiler";case S:return"StrictMode";case M:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case A:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case D:return H(e.type);case R:return H(e._render);case P:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function ue(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var he="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},_e=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function be(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(ye).forEach((function(e){_e.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var xe=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Te=null,Ae=null;function Oe(e){if(e=Jr(e)){if("function"!=typeof Ce)throw Error(a(280));var t=e.stateNode;t&&(t=ti(t),Ce(e.stateNode,e.type,t))}}function Me(e){Te?Ae?Ae.push(e):Ae=[e]:Te=e}function Ne(){if(Te){var e=Te,t=Ae;if(Ae=Te=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function De(e,t){return e(t)}function Pe(e,t,n,r,i){return e(t,n,r,i)}function Re(){}var Ie=De,Le=!1,Ve=!1;function Fe(){null===Te&&null===Ae||(Re(),Ne())}function je(e,t){var n=e.stateNode;if(null===n)return null;var r=ti(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var ze=!1;if(h)try{var qe={};Object.defineProperty(qe,"passive",{get:function(){ze=!0}}),window.addEventListener("test",qe,qe),window.removeEventListener("test",qe,qe)}catch(me){ze=!1}function Be(e,t,n,r,i,o,a,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ue=!1,We=null,$e=!1,Ge=null,He={onError:function(e){Ue=!0,We=e}};function Ye(e,t,n,r,i,o,a,s,l){Ue=!1,We=null,Be.apply(He,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(Xe(e)!==e)throw Error(a(188))}function Ke(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ze(i),e;if(o===r)return Ze(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,it=!1,ot=[],at=null,st=null,lt=null,ut=new Map,ct=new Map,ht=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=ft(t,n,r,i,o),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function gt(e){var t=Kr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function _t(){for(it=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&vt(at)&&(at=null),null!==st&&vt(st)&&(st=null),null!==lt&&vt(lt)&&(lt=null),ut.forEach(yt),ct.forEach(yt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,_t)))}function bt(e){function t(t){return wt(t,e)}if(0<ot.length){wt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==st&&wt(st,e),null!==lt&&wt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<ht.length;n++)(r=ht[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ht.length&&null===(n=ht[0]).blockedOn;)gt(n),null===n.blockedOn&&ht.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},Et={},St={};function Ct(e){if(Et[e])return Et[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return Et[e]=n[t];return e}h&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Tt=Ct("animationend"),At=Ct("animationiteration"),Ot=Ct("animationstart"),Mt=Ct("transitionend"),Nt=new Map,Dt=new Map,Pt=["abort","abort",Tt,"animationEnd",At,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Dt.set(r,t),Nt.set(r,i),u(i,[r])}}(0,o.unstable_now)();var It=8;function Lt(e){if(0!=(1&e))return It=15,1;if(0!=(2&e))return It=14,2;if(0!=(4&e))return It=13,4;var t=24&e;return 0!==t?(It=12,t):0!=(32&e)?(It=11,32):0!=(t=192&e)?(It=10,t):0!=(256&e)?(It=9,256):0!=(t=3584&e)?(It=8,t):0!=(4096&e)?(It=7,4096):0!=(t=4186112&e)?(It=6,t):0!=(t=62914560&e)?(It=5,t):67108864&e?(It=4,67108864):0!=(134217728&e)?(It=3,134217728):0!=(t=805306368&e)?(It=2,t):0!=(1073741824&e)?(It=1,1073741824):(It=8,e)}function Vt(e,t){var n=e.pendingLanes;if(0===n)return It=0;var r=0,i=0,o=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==o)r=o,i=It=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=Lt(l),i=It):0!=(s&=o)&&(r=Lt(s),i=It)}else 0!=(o=n&~a)?(r=Lt(o),i=It):0!==s&&(r=Lt(s),i=It);if(0===r)return 0;if(r=n&((0>(r=31-Ut(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Lt(t),i<=It)return t;It=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Ut(t)),r|=e[n],t&=~i;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function jt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?jt(10,t):e;case 10:return 0===(e=zt(192&~t))?jt(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function zt(e){return e&-e}function qt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Bt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/$t|0)|0},Wt=Math.log,$t=Math.LN2,Gt=o.unstable_UserBlockingPriority,Ht=o.unstable_runWithPriority,Yt=!0;function Xt(e,t,n,r){Le||Re();var i=Zt,o=Le;Le=!0;try{Pe(i,e,t,n,r)}finally{(Le=o)||Fe()}}function Qt(e,t,n,r){Ht(Gt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var i;if(Yt)if((i=0==(4&t))&&0<ot.length&&-1<dt.indexOf(e))e=ft(null,e,t,n,r),ot.push(e);else{var o=Kt(e,t,n,r);if(null===o)i&&pt(e,r);else{if(i){if(-1<dt.indexOf(e))return e=ft(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return at=mt(at,e,t,n,r,i),!0;case"dragenter":return st=mt(st,e,t,n,r,i),!0;case"mouseover":return lt=mt(lt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return ut.set(o,mt(ut.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ct.set(o,mt(ct.get(o)||null,e,t,n,r,i)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Nr(e,t,r,null,n)}}}function Kt(e,t,n,r){var i=Se(r);if(null!==(i=Kr(i))){var o=Xe(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Qe(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Nr(e,t,r,i,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,i="value"in Jt?Jt.value:Jt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,hn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(hn),fn=i({},hn,{view:0,detail:0}),pn=sn(fn),mn=i({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=sn(mn),vn=sn(i({},mn,{dataTransfer:0})),yn=sn(i({},fn,{relatedTarget:0})),_n=sn(i({},hn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=sn(i({},hn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),bn=sn(i({},hn,{data:0})),xn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Cn(){return Sn}var Tn=sn(i({},fn,{key:function(e){if(e.key){var t=xn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),An=sn(i({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(i({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Mn=sn(i({},hn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=sn(i({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Dn=[9,13,27,32],Pn=h&&"CompositionEvent"in window,Rn=null;h&&"documentMode"in document&&(Rn=document.documentMode);var In=h&&"TextEvent"in window&&!Rn,Ln=h&&(!Pn||Rn&&8<Rn&&11>=Rn),Vn=String.fromCharCode(32),Fn=!1;function jn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var qn=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Wn(e,t,n,r){Me(r),0<(t=Pr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Gn=null;function Hn(e){Sr(e,0)}function Yn(e){if(Z(ei(e)))return e}function Xn(e,t){if("change"===e)return t}var Qn=!1;if(h){var Zn;if(h){var Kn="oninput"in document;if(!Kn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Kn="function"==typeof Jn.oninput}Zn=Kn}else Zn=!1;Qn=Zn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),Gn=$n=null)}function tr(e){if("value"===e.propertyName&&Yn(Gn)){var t=[];if(Wn(t,Gn,e,Se(e)),e=Hn,Le)e(t);else{Le=!0;try{De(e,t)}finally{Le=!1,Fe()}}}}function nr(e,t,n){"focusin"===e?(er(),Gn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Gn)}function ir(e,t){if("click"===e)return Yn(t)}function or(e,t){if("input"===e||"change"===e)return Yn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=h&&"documentMode"in document&&11>=document.documentMode,mr=null,gr=null,vr=null,yr=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==K(r)||(r="selectionStart"in(r=mr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=Pr(gr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Pt,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),br=0;br<wr.length;br++)Dt.set(wr[br],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var xr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(xr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,u){if(Ye.apply(this,arguments),Ue){if(!Ue)throw Error(a(198));var c=We;Ue=!1,We=null,$e||($e=!0,Ge=c)}}(r,t,void 0,e),e.currentTarget=null}function Sr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Er(i,s,u),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,u=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Er(i,s,u),o=l}}}if($e)throw e=Ge,$e=!1,Ge=null,e}function Cr(e,t){var n=ni(t),r=e+"__bubble";n.has(r)||(Mr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Ar(e){e[Tr]||(e[Tr]=!0,s.forEach((function(t){kr.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;i|=2,o=r}var a=ni(o),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(i|=4),Mr(o,e,i,t),a.add(s))}function Mr(e,t,n,r){var i=Dt.get(t);switch(void 0===i?2:i){case 0:i=Xt;break;case 1:i=Qt;break;default:i=Zt}n=i.bind(null,t,n,e),i=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=Kr(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Ve)return e();Ve=!0;try{Ie(e,t,n)}finally{Ve=!1,Fe()}}((function(){var r=o,i=Se(n),a=[];e:{var s=Nt.get(e);if(void 0!==s){var l=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Tn;break;case"focusin":u="focus",l=yn;break;case"focusout":u="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case Tt:case At:case Ot:l=_n;break;case Mt:l=Mn;break;case"scroll":l=pn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=An}var c=0!=(4&t),h=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var f,p=r;null!==p;){var m=(f=p).stateNode;if(5===f.tag&&null!==m&&(f=m,null!==d&&null!=(m=je(p,d))&&c.push(Dr(p,m,f))),h)break;p=p.return}0<c.length&&(s=new l(s,u,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Kr(u)&&!u[Qr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?Kr(u):null)&&(u!==(h=Xe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=gn,m="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(c=An,m="onPointerLeave",d="onPointerEnter",p="pointer"),h=null==l?s:ei(l),f=null==u?s:ei(u),(s=new c(m,p+"leave",l,n,i)).target=h,s.relatedTarget=f,m=null,Kr(i)===r&&((c=new c(d,p+"enter",u,n,i)).target=f,c.relatedTarget=h,m=c),h=m,l&&u)e:{for(d=u,p=0,f=c=l;f;f=Rr(f))p++;for(f=0,m=d;m;m=Rr(m))f++;for(;0<p-f;)c=Rr(c),p--;for(;0<f-p;)d=Rr(d),f--;for(;p--;){if(c===d||null!==d&&c===d.alternate)break e;c=Rr(c),d=Rr(d)}c=null}else c=null;null!==l&&Ir(a,s,l,c,!1),null!==u&&null!==h&&Ir(a,h,u,c,!0)}if("select"===(l=(s=r?ei(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Xn;else if(Un(s))if(Qn)g=or;else{g=rr;var v=nr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=ir);switch(g&&(g=g(e,r))?Wn(a,g,n,i):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ie(s,"number",s.value)),v=r?ei(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(mr=v,gr=r,vr=null);break;case"focusout":vr=gr=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,_r(a,n,i);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":_r(a,n,i)}var y;if(Pn)e:{switch(e){case"compositionstart":var _="onCompositionStart";break e;case"compositionend":_="onCompositionEnd";break e;case"compositionupdate":_="onCompositionUpdate";break e}_=void 0}else qn?jn(e,n)&&(_="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(_="onCompositionStart");_&&(Ln&&"ko"!==n.locale&&(qn||"onCompositionStart"!==_?"onCompositionEnd"===_&&qn&&(y=nn()):(en="value"in(Jt=i)?Jt.value:Jt.textContent,qn=!0)),0<(v=Pr(r,_)).length&&(_=new bn(_,e,null,n,i),a.push({event:_,listeners:v}),(y||null!==(y=zn(n)))&&(_.data=y))),(y=In?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Fn=!0,Vn);case"textInput":return(e=t.data)===Vn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(qn)return"compositionend"===e||!Pn&&jn(e,t)?(e=nn(),tn=en=Jt=null,qn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Pr(r,"onBeforeInput")).length&&(i=new bn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=y)}Sr(a,t)}))}function Dr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Pr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=je(e,n))&&r.unshift(Dr(e,o,i)),null!=(o=je(e,t))&&r.push(Dr(e,o,i))),e=e.return}return r}function Rr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Ir(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,i?null!=(l=je(n,o))&&a.unshift(Dr(n,l,s)):i||null!=(l=je(n,o))&&a.push(Dr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Lr(){}var Vr=null,Fr=null;function jr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var qr="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $r(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Gr=0,Hr=Math.random().toString(36).slice(2),Yr="__reactFiber$"+Hr,Xr="__reactProps$"+Hr,Qr="__reactContainer$"+Hr,Zr="__reactEvents$"+Hr;function Kr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Qr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=$r(e);null!==e;){if(n=e[Yr])return n;e=$r(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Yr]||e[Qr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ei(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ti(e){return e[Xr]||null}function ni(e){var t=e[Zr];return void 0===t&&(t=e[Zr]=new Set),t}var ri=[],ii=-1;function oi(e){return{current:e}}function ai(e){0>ii||(e.current=ri[ii],ri[ii]=null,ii--)}function si(e,t){ii++,ri[ii]=e.current,e.current=t}var li={},ui=oi(li),ci=oi(!1),hi=li;function di(e,t){var n=e.type.contextTypes;if(!n)return li;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function fi(e){return null!=e.childContextTypes}function pi(){ai(ci),ai(ui)}function mi(e,t,n){if(ui.current!==li)throw Error(a(168));si(ui,t),si(ci,n)}function gi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,H(t)||"Unknown",o));return i({},n,r)}function vi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||li,hi=ui.current,si(ui,e),si(ci,ci.current),!0}function yi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=gi(e,t,hi),r.__reactInternalMemoizedMergedChildContext=e,ai(ci),ai(ui),si(ui,e)):ai(ci),si(ci,n)}var _i=null,wi=null,bi=o.unstable_runWithPriority,xi=o.unstable_scheduleCallback,ki=o.unstable_cancelCallback,Ei=o.unstable_shouldYield,Si=o.unstable_requestPaint,Ci=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Ai=o.unstable_ImmediatePriority,Oi=o.unstable_UserBlockingPriority,Mi=o.unstable_NormalPriority,Ni=o.unstable_LowPriority,Di=o.unstable_IdlePriority,Pi={},Ri=void 0!==Si?Si:function(){},Ii=null,Li=null,Vi=!1,Fi=Ci(),ji=1e4>Fi?Ci:function(){return Ci()-Fi};function zi(){switch(Ti()){case Ai:return 99;case Oi:return 98;case Mi:return 97;case Ni:return 96;case Di:return 95;default:throw Error(a(332))}}function qi(e){switch(e){case 99:return Ai;case 98:return Oi;case 97:return Mi;case 96:return Ni;case 95:return Di;default:throw Error(a(332))}}function Bi(e,t){return e=qi(e),bi(e,t)}function Ui(e,t,n){return e=qi(e),xi(e,t,n)}function Wi(){if(null!==Li){var e=Li;Li=null,ki(e)}$i()}function $i(){if(!Vi&&null!==Ii){Vi=!0;var e=0;try{var t=Ii;Bi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ii=null}catch(t){throw null!==Ii&&(Ii=Ii.slice(e+1)),xi(Ai,Wi),t}finally{Vi=!1}}}var Gi=b.ReactCurrentBatchConfig;function Hi(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Yi=oi(null),Xi=null,Qi=null,Zi=null;function Ki(){Zi=Qi=Xi=null}function Ji(e){var t=Yi.current;ai(Yi),e.type._context._currentValue=t}function eo(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function to(e,t){Xi=e,Zi=Qi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Pa=!0),e.firstContext=null)}function no(e,t){if(Zi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qi){if(null===Xi)throw Error(a(308));Qi=t,Xi.dependencies={lanes:0,firstContext:t,responders:null}}else Qi=Qi.next=t;return e._currentValue}var ro=!1;function io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function oo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var o=e.updateQueue;ro=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?a=c:s.next=c,s=u;var h=e.alternate;if(null!==h){var d=(h=h.updateQueue).lastBaseUpdate;d!==s&&(null===d?h.firstBaseUpdate=c:d.next=c,h.lastBaseUpdate=u)}}if(null!==a){for(d=o.baseState,s=0,h=c=u=null;;){l=a.lane;var f=a.eventTime;if((r&l)===l){null!==h&&(h=h.next={eventTime:f,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,m=a;switch(l=t,f=n,m.tag){case 1:if("function"==typeof(p=m.payload)){d=p.call(f,d,l);break e}d=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=m.payload)?p.call(f,d,l):p))break e;d=i({},d,l);break e;case 2:ro=!0}}null!==a.callback&&(e.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else f={eventTime:f,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===h?(c=h=f,u=d):h=h.next=f,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===h&&(u=d),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=h,Is|=s,e.lanes=s,e.memoizedState=d}}function co(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var ho=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),i=sl(e),o=ao(r,i);o.payload=t,null!=n&&(o.callback=n),so(e,o),ll(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),i=sl(e),o=ao(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),so(e,o),ll(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=sl(e),i=ao(n,r);i.tag=2,null!=t&&(i.callback=t),so(e,i),ll(e,r,n)}};function mo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function go(e,t,n){var r=!1,i=li,o=t.contextType;return"object"==typeof o&&null!==o?o=no(o):(i=fi(t)?hi:ui.current,o=(r=null!=(r=t.contextTypes))?di(e,i):li),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function vo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function yo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ho,io(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=no(o):(o=fi(t)?hi:ui.current,i.context=di(e,o)),uo(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&po.enqueueReplaceState(i,i.state,null),uo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var _o=Array.isArray;function wo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function bo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function xo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=zl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=wo(e,t,n),r.return=e,r):((r=ql(n.type,n.key,n.props,null,e.mode,r)).ref=wo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$l(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function h(e,t,n,r,o){return null===t||7!==t.tag?((t=Bl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=ql(t.type,t.key,t.props,null,e.mode,n)).ref=wo(e,null,t),n.return=e,n;case k:return(t=$l(t,e.mode,n)).return=e,t}if(_o(t)||B(t))return(t=Bl(t,e.mode,n,null)).return=e,t;bo(e,t)}return null}function f(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===i?n.type===E?h(e,t,n.props.children,r,i):u(e,t,n,r):null;case k:return n.key===i?c(e,t,n,r):null}if(_o(n)||B(n))return null!==i?null:h(e,t,n,r,null);bo(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===E?h(t,e,r.props.children,i,r.key):u(t,e,r,i);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(_o(r)||B(r))return h(t,e=e.get(n)||null,r,i,null);bo(t,r)}return null}function m(i,a,s,l){for(var u=null,c=null,h=a,m=a=0,g=null;null!==h&&m<s.length;m++){h.index>m?(g=h,h=null):g=h.sibling;var v=f(i,h,s[m],l);if(null===v){null===h&&(h=g);break}e&&h&&null===v.alternate&&t(i,h),a=o(v,a,m),null===c?u=v:c.sibling=v,c=v,h=g}if(m===s.length)return n(i,h),u;if(null===h){for(;m<s.length;m++)null!==(h=d(i,s[m],l))&&(a=o(h,a,m),null===c?u=h:c.sibling=h,c=h);return u}for(h=r(i,h);m<s.length;m++)null!==(g=p(h,i,m,s[m],l))&&(e&&null!==g.alternate&&h.delete(null===g.key?m:g.key),a=o(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&h.forEach((function(e){return t(i,e)})),u}function g(i,s,l,u){var c=B(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var h=c=null,m=s,g=s=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var _=f(i,m,y.value,u);if(null===_){null===m&&(m=v);break}e&&m&&null===_.alternate&&t(i,m),s=o(_,s,g),null===h?c=_:h.sibling=_,h=_,m=v}if(y.done)return n(i,m),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=d(i,y.value,u))&&(s=o(y,s,g),null===h?c=y:h.sibling=y,h=y);return c}for(m=r(i,m);!y.done;g++,y=l.next())null!==(y=p(m,i,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=o(y,s,g),null===h?c=y:h.sibling=y,h=y);return e&&m.forEach((function(e){return t(i,e)})),c}return function(e,r,o,l){var u="object"==typeof o&&null!==o&&o.type===E&&null===o.key;u&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case x:e:{for(c=o.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(o.type===E){n(e,u.sibling),(r=i(u,o.props.children)).return=e,e=r;break e}break;default:if(u.elementType===o.type){n(e,u.sibling),(r=i(u,o.props)).ref=wo(e,u,o),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}o.type===E?((r=Bl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=ql(o.type,o.key,o.props,null,e.mode,l)).ref=wo(e,r,o),l.return=e,e=l)}return s(e);case k:e:{for(u=o.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$l(o,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Wl(o,e.mode,l)).return=e,e=r),s(e);if(_o(o))return m(e,r,o,l);if(B(o))return g(e,r,o,l);if(c&&bo(e,o),void 0===o&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,H(e.type)||"Component"))}return n(e,r)}}var ko=xo(!0),Eo=xo(!1),So={},Co=oi(So),To=oi(So),Ao=oi(So);function Oo(e){if(e===So)throw Error(a(174));return e}function Mo(e,t){switch(si(Ao,t),si(To,e),si(Co,So),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:fe(null,"");break;default:t=fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ai(Co),si(Co,t)}function No(){ai(Co),ai(To),ai(Ao)}function Do(e){Oo(Ao.current);var t=Oo(Co.current),n=fe(t,e.type);t!==n&&(si(To,e),si(Co,n))}function Po(e){To.current===e&&(ai(Co),ai(To))}var Ro=oi(0);function Io(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Lo=null,Vo=null,Fo=!1;function jo(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function zo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function qo(e){if(Fo){var t=Vo;if(t){var n=t;if(!zo(e,t)){if(!(t=Wr(n.nextSibling))||!zo(e,t))return e.flags=-1025&e.flags|2,Fo=!1,void(Lo=e);jo(Lo,n)}Lo=e,Vo=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Fo=!1,Lo=e}}function Bo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Lo=e}function Uo(e){if(e!==Lo)return!1;if(!Fo)return Bo(e),Fo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=Vo;t;)jo(e,t),t=Wr(t.nextSibling);if(Bo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Vo=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Vo=null}}else Vo=Lo?Wr(e.stateNode.nextSibling):null;return!0}function Wo(){Vo=Lo=null,Fo=!1}var $o=[];function Go(){for(var e=0;e<$o.length;e++)$o[e]._workInProgressVersionPrimary=null;$o.length=0}var Ho=b.ReactCurrentDispatcher,Yo=b.ReactCurrentBatchConfig,Xo=0,Qo=null,Zo=null,Ko=null,Jo=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,i,o){if(Xo=o,Qo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ho.current=null===e||null===e.memoizedState?Oa:Ma,e=n(r,i),ea){o=0;do{if(ea=!1,!(25>o))throw Error(a(301));o+=1,Ko=Zo=null,t.updateQueue=null,Ho.current=Na,e=n(r,i)}while(ea)}if(Ho.current=Aa,t=null!==Zo&&null!==Zo.next,Xo=0,Ko=Zo=Qo=null,Jo=!1,t)throw Error(a(300));return e}function ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ko?Qo.memoizedState=Ko=e:Ko=Ko.next=e,Ko}function oa(){if(null===Zo){var e=Qo.alternate;e=null!==e?e.memoizedState:null}else e=Zo.next;var t=null===Ko?Qo.memoizedState:Ko.next;if(null!==t)Ko=t,Zo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Zo=e).memoizedState,baseState:Zo.baseState,baseQueue:Zo.baseQueue,queue:Zo.queue,next:null},null===Ko?Qo.memoizedState=Ko=e:Ko=Ko.next=e}return Ko}function aa(e,t){return"function"==typeof t?t(e):t}function sa(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Zo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,u=i;do{var c=u.lane;if((Xo&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var h={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=h,o=r):l=l.next=h,Qo.lanes|=c,Is|=c}u=u.next}while(null!==u&&u!==i);null===l?o=r:l.next=s,ar(r,t.memoizedState)||(Pa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function la(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);ar(o,t.memoizedState)||(Pa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ua(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Xo&e)===e)&&(t._workInProgressVersionPrimary=r,$o.push(t))),e)return n(t._source);throw $o.push(t),Error(a(350))}function ca(e,t,n,r){var i=Ts;if(null===i)throw Error(a(349));var o=t._getVersion,s=o(t._source),l=Ho.current,u=l.useState((function(){return ua(i,t,n)})),c=u[1],h=u[0];u=Ko;var d=e.memoizedState,f=d.refs,p=f.getSnapshot,m=d.source;d=d.subscribe;var g=Qo;return e.memoizedState={refs:f,source:t,subscribe:r},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=c;var e=o(t._source);if(!ar(s,e)){e=n(t._source),ar(h,e)||(c(e),e=sl(g),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,a=e;0<a;){var l=31-Ut(a),u=1<<l;r[l]|=e,a&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=f.getSnapshot,n=f.setSnapshot;try{n(e(t._source));var r=sl(g);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(p,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:h}).dispatch=c=Ta.bind(null,Qo,e),u.queue=e,u.baseQueue=null,h=ua(i,t,n),u.memoizedState=u.baseState=h),h}function ha(e,t,n){return ca(oa(),e,t,n)}function da(e){var t=ia();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Ta.bind(null,Qo,e),[t.memoizedState,e]}function fa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Qo.updateQueue)?(t={lastEffect:null},Qo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},ia().memoizedState=e}function ma(){return oa().memoizedState}function ga(e,t,n,r){var i=ia();Qo.flags|=e,i.memoizedState=fa(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var i=oa();r=void 0===r?null:r;var o=void 0;if(null!==Zo){var a=Zo.memoizedState;if(o=a.destroy,null!==r&&na(r,a.deps))return void fa(t,n,o,r)}Qo.flags|=e,i.memoizedState=fa(1|t,n,o,r)}function ya(e,t){return ga(516,4,e,t)}function _a(e,t){return va(516,4,e,t)}function wa(e,t){return va(4,2,e,t)}function ba(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function xa(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,ba.bind(null,t,e),n)}function ka(){}function Ea(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Sa(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ca(e,t){var n=zi();Bi(98>n?98:n,(function(){e(!0)})),Bi(97<n?97:n,(function(){var n=Yo.transition;Yo.transition=1;try{e(!1),t()}finally{Yo.transition=n}}))}function Ta(e,t,n){var r=al(),i=sl(e),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Qo||null!==a&&a===Qo)ea=Jo=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,ar(l,s))return}catch(e){}ll(e,i,r)}}var Aa={readContext:no,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Oa={readContext:no,useCallback:function(e,t){return ia().memoizedState=[e,void 0===t?null:t],e},useContext:no,useEffect:ya,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,ba.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ga(4,2,e,t)},useMemo:function(e,t){var n=ia();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ia();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ta.bind(null,Qo,e),[r.memoizedState,e]},useRef:pa,useState:da,useDebugValue:ka,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ya((function(){var t=Yo.transition;Yo.transition=1;try{r(e)}finally{Yo.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return pa(e=Ca.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ia();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(Fo){var e=!1,t=function(e){return{$$typeof:I,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Gr++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Qo.mode)&&(Qo.flags|=516,fa(5,(function(){n("r:"+(Gr++).toString(36))}),void 0,null)),t}return da(t="r:"+(Gr++).toString(36)),t},unstable_isNewReconciler:!1},Ma={readContext:no,useCallback:Ea,useContext:no,useEffect:_a,useImperativeHandle:xa,useLayoutEffect:wa,useMemo:Sa,useReducer:sa,useRef:ma,useState:function(){return sa(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=sa(aa),n=t[0],r=t[1];return _a((function(){var t=Yo.transition;Yo.transition=1;try{r(e)}finally{Yo.transition=t}}),[e]),n},useTransition:function(){var e=sa(aa)[0];return[ma().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return sa(aa)[0]},unstable_isNewReconciler:!1},Na={readContext:no,useCallback:Ea,useContext:no,useEffect:_a,useImperativeHandle:xa,useLayoutEffect:wa,useMemo:Sa,useReducer:la,useRef:ma,useState:function(){return la(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return _a((function(){var t=Yo.transition;Yo.transition=1;try{r(e)}finally{Yo.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ma().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},Da=b.ReactCurrentOwner,Pa=!1;function Ra(e,t,n,r){t.child=null===e?Eo(t,null,n,r):ko(t,e.child,n,r)}function Ia(e,t,n,r,i){n=n.render;var o=t.ref;return to(t,i),r=ra(e,t,n,r,o,i),null===e||Pa?(t.flags|=1,Ra(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Ja(e,t,i))}function La(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||jl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=ql(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Va(e,t,a,r,i,o))}return a=e.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)?Ja(e,t,o):(t.flags|=1,(e=zl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Va(e,t,n,r,i,o){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Pa=!1,0==(o&i))return t.lanes=e.lanes,Ja(e,t,o);0!=(16384&e.flags)&&(Pa=!0)}return za(e,t,n,r,o)}function Fa(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gl(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gl(0,e),null;t.memoizedState={baseLanes:0},gl(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,gl(0,r);return Ra(e,t,i,n),t.child}function ja(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function za(e,t,n,r,i){var o=fi(n)?hi:ui.current;return o=di(t,o),to(t,i),n=ra(e,t,n,r,o,i),null===e||Pa?(t.flags|=1,Ra(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Ja(e,t,i))}function qa(e,t,n,r,i){if(fi(n)){var o=!0;vi(t)}else o=!1;if(to(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),go(t,n,r),yo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,u=n.contextType;u="object"==typeof u&&null!==u?no(u):di(t,u=fi(n)?hi:ui.current);var c=n.getDerivedStateFromProps,h="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;h||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==u)&&vo(t,a,r,u),ro=!1;var d=t.memoizedState;a.state=d,uo(t,r,a,i),l=t.memoizedState,s!==r||d!==l||ci.current||ro?("function"==typeof c&&(fo(t,n,c,r),l=t.memoizedState),(s=ro||mo(t,n,s,r,d,l,u))?(h||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=u,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,oo(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Hi(t.type,s),a.props=u,h=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?no(l):di(t,l=fi(n)?hi:ui.current);var f=n.getDerivedStateFromProps;(c="function"==typeof f||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==h||d!==l)&&vo(t,a,r,l),ro=!1,d=t.memoizedState,a.state=d,uo(t,r,a,i);var p=t.memoizedState;s!==h||d!==p||ci.current||ro?("function"==typeof f&&(fo(t,n,f,r),p=t.memoizedState),(u=ro||mo(t,n,u,r,d,p,l))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=u):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ba(e,t,n,r,o,i)}function Ba(e,t,n,r,i,o){ja(e,t);var a=0!=(64&t.flags);if(!r&&!a)return i&&yi(t,n,!1),Ja(e,t,o);r=t.stateNode,Da.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,s,o)):Ra(e,t,s,o),t.memoizedState=r.state,i&&yi(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?mi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&mi(0,t.context,!1),Mo(e,t.containerInfo)}var Wa,$a,Ga,Ha={dehydrated:null,retryLane:0};function Ya(e,t,n){var r,i=t.pendingProps,o=Ro.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),si(Ro,1&o),null===e?(void 0!==i.fallback&&qo(t),e=i.children,o=i.fallback,a?(e=Xa(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ha,e):"number"==typeof i.unstable_expectedLoadTime?(e=Xa(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ha,t.lanes=33554432,e):((n=Ul({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(i=function(e,t,n,r,i){var o=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zl(a,s),null!==e?r=zl(e,r):(r=Bl(r,o,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),a=t.child,o=e.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ha,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=zl(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Xa(e,t,n,r){var i=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Ul(t,i,0,null),n=Bl(n,i,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Qa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),eo(e.return,t)}function Za(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function Ka(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Ra(e,t,r.children,n),0!=(2&(r=Ro.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qa(e,n);else if(19===e.tag)Qa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Ro,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Io(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Za(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Io(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Za(t,!0,n,null,o,t.lastEffect);break;case"together":Za(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ja(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Is|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function es(e,t){if(!Fo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return fi(t.type)&&pi(),null;case 3:return No(),ai(ci),ai(ui),Go(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Uo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Po(t);var o=Oo(Ao.current);if(n=t.type,null!==e&&null!=t.stateNode)$a(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Oo(Co.current),Uo(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Yr]=t,r[Xr]=s,n){case"dialog":Cr("cancel",r),Cr("close",r);break;case"iframe":case"object":case"embed":Cr("load",r);break;case"video":case"audio":for(e=0;e<xr.length;e++)Cr(xr[e],r);break;case"source":Cr("error",r);break;case"img":case"image":case"link":Cr("error",r),Cr("load",r);break;case"details":Cr("toggle",r);break;case"input":ee(r,s),Cr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Cr("invalid",r);break;case"textarea":le(r,s),Cr("invalid",r)}for(var u in ke(n,s),e=null,s)s.hasOwnProperty(u)&&(o=s[u],"children"===u?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):l.hasOwnProperty(u)&&null!=o&&"onScroll"===u&&Cr("scroll",r));switch(n){case"input":Q(r),re(r,s,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Lr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===o.nodeType?o:o.ownerDocument,e===he&&(e=de(n)),e===he?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Yr]=t,e[Xr]=r,Wa(e,t),t.stateNode=e,u=Ee(n,r),n){case"dialog":Cr("cancel",e),Cr("close",e),o=r;break;case"iframe":case"object":case"embed":Cr("load",e),o=r;break;case"video":case"audio":for(o=0;o<xr.length;o++)Cr(xr[o],e);o=r;break;case"source":Cr("error",e),o=r;break;case"img":case"image":case"link":Cr("error",e),Cr("load",e),o=r;break;case"details":Cr("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),Cr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Cr("invalid",e);break;case"textarea":le(e,r),o=se(e,r),Cr("invalid",e);break;default:o=r}ke(n,o);var c=o;for(s in c)if(c.hasOwnProperty(s)){var h=c[s];"style"===s?be(e,h):"dangerouslySetInnerHTML"===s?null!=(h=h?h.__html:void 0)&&ge(e,h):"children"===s?"string"==typeof h?("textarea"!==n||""!==h)&&ve(e,h):"number"==typeof h&&ve(e,""+h):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=h&&"onScroll"===s&&Cr("scroll",e):null!=h&&w(e,s,h,u))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Lr)}jr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ga(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Oo(Ao.current),Oo(Co.current),Uo(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return ai(Ro),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Uo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ro.current)?0===Ds&&(Ds=3):(0!==Ds&&3!==Ds||(Ds=4),null===Ts||0==(134217727&Is)&&0==(134217727&Ls)||dl(Ts,Os))),(r||n)&&(t.flags|=4),null);case 4:return No(),null===e&&Ar(t.stateNode.containerInfo),null;case 10:return Ji(t),null;case 17:return fi(t.type)&&pi(),null;case 19:if(ai(Ro),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)es(r,!1);else{if(0!==Ds||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=Io(e))){for(t.flags|=64,es(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return si(Ro,1&Ro.current|2),t.child}e=e.sibling}null!==r.tail&&ji()>zs&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Io(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),es(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Fo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*ji()-r.renderingStartTime>zs&&1073741824!==n&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=ji(),n.sibling=null,t=Ro.current,si(Ro,s?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ns(e){switch(e.tag){case 1:fi(e.type)&&pi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(No(),ai(ci),ai(ui),Go(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Po(e),null;case 13:return ai(Ro),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ai(Ro),null;case 4:return No(),null;case 10:return Ji(e),null;case 23:case 24:return vl(),null;default:return null}}function rs(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function is(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Oo(Co.current);var a,s=null;switch(n){case"input":o=J(e,o),r=J(e,r),s=[];break;case"option":o=oe(e,o),r=oe(e,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=se(e,o),r=se(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Lr)}for(h in ke(n,r),n=null,o)if(!r.hasOwnProperty(h)&&o.hasOwnProperty(h)&&null!=o[h])if("style"===h){var u=o[h];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(l.hasOwnProperty(h)?s||(s=[]):(s=s||[]).push(h,null));for(h in r){var c=r[h];if(u=null!=o?o[h]:void 0,r.hasOwnProperty(h)&&c!==u&&(null!=c||null!=u))if("style"===h)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(h,n)),n=c;else"dangerouslySetInnerHTML"===h?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(h,c)):"children"===h?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(h,""+c):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(l.hasOwnProperty(h)?(null!=c&&"onScroll"===h&&Cr("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===I?c.toString():(s=s||[]).push(h,c))}n&&(s=s||[]).push("style",n);var h=s;(t.updateQueue=h)&&(t.flags|=4)}},Ga=function(e,t,n,r){n!==r&&(t.flags|=4)};var os="function"==typeof WeakMap?WeakMap:Map;function as(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ws||(Ws=!0,$s=r),is(0,t)},n}function ss(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return is(0,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Gs?Gs=new Set([this]):Gs.add(this),is(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ls="function"==typeof WeakSet?WeakSet:Set;function us(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Rl(e,t)}else t.current=null}function cs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Hi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function hs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Nl(n,e),Ml(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Hi(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&co(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}co(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&jr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&bt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function ds(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=we("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function fs(e,t){if(wi&&"function"==typeof wi.onCommitFiberUnmount)try{wi.onCommitFiberUnmount(_i,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Nl(t,n);else{r=t;try{i()}catch(e){Rl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(us(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Rl(t,e)}break;case 5:us(t);break;case 4:_s(e,t)}}function ps(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ms(e){return 5===e.tag||3===e.tag||4===e.tag}function gs(e){e:{for(var t=e.return;null!==t;){if(ms(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ms(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vs(e,n,t):ys(e,n,t)}function vs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Lr));else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function ys(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ys(e,t,n),e=e.sibling;null!==e;)ys(e,t,n),e=e.sibling}function _s(e,t){for(var n,r,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,u=l;;)if(fs(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(fs(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ws(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,i),t=Ee(e,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?be(n,l):"dangerouslySetInnerHTML"===s?ge(n,l):"children"===s?ve(n,l):w(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ae(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,bt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(js=ji(),ds(t.child,!0)),void bs(t);case 19:return void bs(t);case 17:return;case 23:case 24:return void ds(t,null!==t.memoizedState)}throw Error(a(163))}function bs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=Ll.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function xs(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ks=Math.ceil,Es=b.ReactCurrentDispatcher,Ss=b.ReactCurrentOwner,Cs=0,Ts=null,As=null,Os=0,Ms=0,Ns=oi(0),Ds=0,Ps=null,Rs=0,Is=0,Ls=0,Vs=0,Fs=null,js=0,zs=1/0;function qs(){zs=ji()+500}var Bs,Us=null,Ws=!1,$s=null,Gs=null,Hs=!1,Ys=null,Xs=90,Qs=[],Zs=[],Ks=null,Js=0,el=null,tl=-1,nl=0,rl=0,il=null,ol=!1;function al(){return 0!=(48&Cs)?ji():-1!==tl?tl:tl=ji()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===zi()?1:2;if(0===nl&&(nl=Rs),0!==Gi.transition){0!==rl&&(rl=null!==Fs?Fs.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=zi(),e=jt(0!=(4&Cs)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Js)throw Js=0,el=null,Error(a(185));if(null===(e=ul(e,t)))return null;Bt(e,t,n),e===Ts&&(Ls|=t,4===Ds&&dl(e,Os));var r=zi();1===t?0!=(8&Cs)&&0==(48&Cs)?fl(e):(cl(e,n),0===Cs&&(qs(),Wi())):(0==(4&Cs)||98!==r&&99!==r||(null===Ks?Ks=new Set([e]):Ks.add(e)),cl(e,n)),Fs=e}function ul(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ut(s),u=1<<l,c=o[l];if(-1===c){if(0==(u&r)||0!=(u&i)){c=t,Lt(u);var h=It;o[l]=10<=h?c+250:6<=h?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=Vt(e,e===Ts?Os:0),t=It,0===r)null!==n&&(n!==Pi&&ki(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Pi&&ki(n)}15===t?(n=fl.bind(null,e),null===Ii?(Ii=[n],Li=xi(Ai,$i)):Ii.push(n),n=Pi):n=14===t?Ui(99,fl.bind(null,e)):Ui(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),hl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function hl(e){if(tl=-1,rl=nl=0,0!=(48&Cs))throw Error(a(327));var t=e.callbackNode;if(Ol()&&e.callbackNode!==t)return null;var n=Vt(e,e===Ts?Os:0);if(0===n)return null;var r=n,i=Cs;Cs|=16;var o=wl();for(Ts===e&&Os===r||(qs(),yl(e,r));;)try{kl();break}catch(t){_l(e,t)}if(Ki(),Es.current=o,Cs=i,null!==As?r=0:(Ts=null,Os=0,r=Ds),0!=(Rs&Ls))yl(e,0);else if(0!==r){if(2===r&&(Cs|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(n=Ft(e))&&(r=bl(e,n))),1===r)throw t=Ps,yl(e,0),dl(e,n),cl(e,ji()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Cl(e);break;case 3:if(dl(e,n),(62914560&n)===n&&10<(r=js+500-ji())){if(0!==Vt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=qr(Cl.bind(null,e),r);break}Cl(e);break;case 4:if(dl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Ut(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=ji()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ks(n/1960))-n)){e.timeoutHandle=qr(Cl.bind(null,e),n);break}Cl(e);break;case 5:Cl(e);break;default:throw Error(a(329))}}return cl(e,ji()),e.callbackNode===t?hl.bind(null,e):null}function dl(e,t){for(t&=~Vs,t&=~Ls,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),r=1<<n;e[n]=-1,t&=~r}}function fl(e){if(0!=(48&Cs))throw Error(a(327));if(Ol(),e===Ts&&0!=(e.expiredLanes&Os)){var t=Os,n=bl(e,t);0!=(Rs&Ls)&&(n=bl(e,t=Vt(e,t)))}else n=bl(e,t=Vt(e,0));if(0!==e.tag&&2===n&&(Cs|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=Ft(e))&&(n=bl(e,t))),1===n)throw n=Ps,yl(e,0),dl(e,t),cl(e,ji()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cl(e),cl(e,ji()),null}function pl(e,t){var n=Cs;Cs|=1;try{return e(t)}finally{0===(Cs=n)&&(qs(),Wi())}}function ml(e,t){var n=Cs;Cs&=-2,Cs|=8;try{return e(t)}finally{0===(Cs=n)&&(qs(),Wi())}}function gl(e,t){si(Ns,Ms),Ms|=t,Rs|=t}function vl(){Ms=Ns.current,ai(Ns)}function yl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==As)for(n=As.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pi();break;case 3:No(),ai(ci),ai(ui),Go();break;case 5:Po(r);break;case 4:No();break;case 13:case 19:ai(Ro);break;case 10:Ji(r);break;case 23:case 24:vl()}n=n.return}Ts=e,As=zl(e.current,null),Os=Ms=Rs=t,Ds=0,Ps=null,Vs=Ls=Is=0}function _l(e,t){for(;;){var n=As;try{if(Ki(),Ho.current=Aa,Jo){for(var r=Qo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Jo=!1}if(Xo=0,Ko=Zo=Qo=null,ea=!1,Ss.current=null,null===n||null===n.return){Ds=1,Ps=t,As=null;break}e:{var o=e,a=n.return,s=n,l=t;if(t=Os,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var h=0!=(1&Ro.current),d=a;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var m=d.memoizedProps;f=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!h)}}if(f){var g=d.updateQueue;if(null===g){var v=new Set;v.add(u),d.updateQueue=v}else g.add(u);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=ao(-1,1);y.tag=2,so(s,y)}s.lanes|=1;break e}l=void 0,s=t;var _=o.pingCache;if(null===_?(_=o.pingCache=new os,l=new Set,_.set(u,l)):void 0===(l=_.get(u))&&(l=new Set,_.set(u,l)),!l.has(s)){l.add(s);var w=Il.bind(null,o,u,s);u.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error((H(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ds&&(Ds=2),l=rs(l,s),d=a;do{switch(d.tag){case 3:o=l,d.flags|=4096,t&=-t,d.lanes|=t,lo(d,as(0,o,t));break e;case 1:o=l;var b=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof b.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Gs||!Gs.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,lo(d,ss(d,o,t));break e}}d=d.return}while(null!==d)}Sl(n)}catch(e){t=e,As===n&&null!==n&&(As=n=n.return);continue}break}}function wl(){var e=Es.current;return Es.current=Aa,null===e?Aa:e}function bl(e,t){var n=Cs;Cs|=16;var r=wl();for(Ts===e&&Os===t||yl(e,t);;)try{xl();break}catch(t){_l(e,t)}if(Ki(),Cs=n,Es.current=r,null!==As)throw Error(a(261));return Ts=null,Os=0,Ds}function xl(){for(;null!==As;)El(As)}function kl(){for(;null!==As&&!Ei();)El(As)}function El(e){var t=Bs(e.alternate,e,Ms);e.memoizedProps=e.pendingProps,null===t?Sl(e):As=t,Ss.current=null}function Sl(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ts(n,t,Ms)))return void(As=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ms)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ns(t)))return n.flags&=2047,void(As=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(As=t);As=t=e}while(null!==t);0===Ds&&(Ds=5)}function Cl(e){var t=zi();return Bi(99,Tl.bind(null,e,t)),null}function Tl(e,t){do{Ol()}while(null!==Ys);if(0!=(48&Cs))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<o;){var u=31-Ut(o),c=1<<u;i[u]=0,s[u]=-1,l[u]=-1,o&=~c}if(null!==Ks&&0==(24&r)&&Ks.has(e)&&Ks.delete(e),e===Ts&&(As=Ts=null,Os=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Cs,Cs|=32,Ss.current=null,Vr=Yt,fr(s=dr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,o=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var h=0,d=-1,f=-1,p=0,m=0,g=s,v=null;t:for(;;){for(var y;g!==l||0!==o&&3!==g.nodeType||(d=h+o),g!==u||0!==c&&3!==g.nodeType||(f=h+c),3===g.nodeType&&(h+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===s)break t;if(v===l&&++p===o&&(d=h),v===u&&++m===c&&(f=h),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}l=-1===d||-1===f?null:{start:d,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:s,selectionRange:l},Yt=!1,il=null,ol=!1,Us=r;do{try{Al()}catch(e){if(null===Us)throw Error(a(330));Rl(Us,e),Us=Us.nextEffect}}while(null!==Us);il=null,Us=r;do{try{for(s=e;null!==Us;){var _=Us.flags;if(16&_&&ve(Us.stateNode,""),128&_){var w=Us.alternate;if(null!==w){var b=w.ref;null!==b&&("function"==typeof b?b(null):b.current=null)}}switch(1038&_){case 2:gs(Us),Us.flags&=-3;break;case 6:gs(Us),Us.flags&=-3,ws(Us.alternate,Us);break;case 1024:Us.flags&=-1025;break;case 1028:Us.flags&=-1025,ws(Us.alternate,Us);break;case 4:ws(Us.alternate,Us);break;case 8:_s(s,l=Us);var x=l.alternate;ps(l),null!==x&&ps(x)}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(a(330));Rl(Us,e),Us=Us.nextEffect}}while(null!==Us);if(b=Fr,w=dr(),_=b.focusedElem,s=b.selectionRange,w!==_&&_&&_.ownerDocument&&hr(_.ownerDocument.documentElement,_)){null!==s&&fr(_)&&(w=s.start,void 0===(b=s.end)&&(b=w),"selectionStart"in _?(_.selectionStart=w,_.selectionEnd=Math.min(b,_.value.length)):(b=(w=_.ownerDocument||document)&&w.defaultView||window).getSelection&&(b=b.getSelection(),l=_.textContent.length,x=Math.min(s.start,l),s=void 0===s.end?x:Math.min(s.end,l),!b.extend&&x>s&&(l=s,s=x,x=l),l=cr(_,x),o=cr(_,s),l&&o&&(1!==b.rangeCount||b.anchorNode!==l.node||b.anchorOffset!==l.offset||b.focusNode!==o.node||b.focusOffset!==o.offset)&&((w=w.createRange()).setStart(l.node,l.offset),b.removeAllRanges(),x>s?(b.addRange(w),b.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),b.addRange(w))))),w=[];for(b=_;b=b.parentNode;)1===b.nodeType&&w.push({element:b,left:b.scrollLeft,top:b.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<w.length;_++)(b=w[_]).element.scrollLeft=b.left,b.element.scrollTop=b.top}Yt=!!Vr,Fr=Vr=null,e.current=n,Us=r;do{try{for(_=e;null!==Us;){var k=Us.flags;if(36&k&&hs(_,Us.alternate,Us),128&k){w=void 0;var E=Us.ref;if(null!==E){var S=Us.stateNode;switch(Us.tag){case 5:w=S;break;default:w=S}"function"==typeof E?E(w):E.current=w}}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(a(330));Rl(Us,e),Us=Us.nextEffect}}while(null!==Us);Us=null,Ri(),Cs=i}else e.current=n;if(Hs)Hs=!1,Ys=e,Xs=t;else for(Us=r;null!==Us;)t=Us.nextEffect,Us.nextEffect=null,8&Us.flags&&((k=Us).sibling=null,k.stateNode=null),Us=t;if(0===(r=e.pendingLanes)&&(Gs=null),1===r?e===el?Js++:(Js=0,el=e):Js=0,n=n.stateNode,wi&&"function"==typeof wi.onCommitFiberRoot)try{wi.onCommitFiberRoot(_i,n,void 0,64==(64&n.current.flags))}catch(e){}if(cl(e,ji()),Ws)throw Ws=!1,e=$s,$s=null,e;return 0!=(8&Cs)||Wi(),null}function Al(){for(;null!==Us;){var e=Us.alternate;ol||null===il||(0!=(8&Us.flags)?Je(Us,il)&&(ol=!0):13===Us.tag&&xs(e,Us)&&Je(Us,il)&&(ol=!0));var t=Us.flags;0!=(256&t)&&cs(e,Us),0==(512&t)||Hs||(Hs=!0,Ui(97,(function(){return Ol(),null}))),Us=Us.nextEffect}}function Ol(){if(90!==Xs){var e=97<Xs?97:Xs;return Xs=90,Bi(e,Dl)}return!1}function Ml(e,t){Qs.push(t,e),Hs||(Hs=!0,Ui(97,(function(){return Ol(),null})))}function Nl(e,t){Zs.push(t,e),Hs||(Hs=!0,Ui(97,(function(){return Ol(),null})))}function Dl(){if(null===Ys)return!1;var e=Ys;if(Ys=null,0!=(48&Cs))throw Error(a(331));var t=Cs;Cs|=32;var n=Zs;Zs=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===o)throw Error(a(330));Rl(o,e)}}for(n=Qs,Qs=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===o)throw Error(a(330));Rl(o,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Cs=t,Wi(),!0}function Pl(e,t,n){so(e,t=as(0,t=rs(n,t),1)),t=al(),null!==(e=ul(e,1))&&(Bt(e,1,t),cl(e,t))}function Rl(e,t){if(3===e.tag)Pl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Pl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Gs||!Gs.has(r))){var i=ss(n,e=rs(t,e),1);if(so(n,i),i=al(),null!==(n=ul(n,1)))Bt(n,1,i),cl(n,i);else if("function"==typeof r.componentDidCatch&&(null===Gs||!Gs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Il(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,Ts===e&&(Os&n)===n&&(4===Ds||3===Ds&&(62914560&Os)===Os&&500>ji()-js?yl(e,0):Vs|=n),cl(e,t)}function Ll(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===zi()?1:2:(0===nl&&(nl=Rs),0===(t=zt(62914560&~nl))&&(t=4194304))),n=al(),null!==(e=ul(e,t))&&(Bt(e,t,n),cl(e,n))}function Vl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new Vl(e,t,n,r)}function jl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function ql(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)jl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case E:return Bl(n.children,i,o,t);case L:s=8,i|=16;break;case S:s=8,i|=1;break;case C:return(e=Fl(12,n,t,8|i)).elementType=C,e.type=C,e.lanes=o,e;case M:return(e=Fl(13,n,t,i)).type=M,e.elementType=M,e.lanes=o,e;case N:return(e=Fl(19,n,t,i)).elementType=N,e.lanes=o,e;case V:return Ul(n,i,o,t);case F:return(e=Fl(24,n,t,i)).elementType=F,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:s=10;break e;case A:s=9;break e;case O:s=11;break e;case D:s=14;break e;case P:s=16,r=null;break e;case R:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Bl(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Ul(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=V,e.lanes=n,e}function Wl(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function $l(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Gl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=qt(0),this.expirationTimes=qt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=qt(0),this.mutableSourceEagerHydrationData=null}function Hl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yl(e,t,n,r){var i=t.current,o=al(),s=sl(i);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(fi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var u=n.type;if(fi(u)){n=gi(n,u,l);break e}}n=l}else n=li;return null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),so(i,t),ll(i,s,o),s}function Xl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Ql(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Zl(e,t){Ql(e,t),(e=e.alternate)&&Ql(e,t)}function Kl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Gl(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,io(t),e[Qr]=n.current,Ar(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Xl(a);s.call(e)}}Yl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Kl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Xl(a);l.call(e)}}ml((function(){Yl(t,a,e,i)}))}return Xl(a)}function tu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return Hl(e,t,null,n)}Bs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ci.current)Pa=!0;else{if(0==(n&r)){switch(Pa=!1,t.tag){case 3:Ua(t),Wo();break;case 5:Do(t);break;case 1:fi(t.type)&&vi(t);break;case 4:Mo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;si(Yi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ya(e,t,n):(si(Ro,1&Ro.current),null!==(t=Ja(e,t,n))?t.sibling:null);si(Ro,1&Ro.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ka(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),si(Ro,Ro.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return Ja(e,t,n)}Pa=0!=(16384&e.flags)}else Pa=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=di(t,ui.current),to(t,n),i=ra(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,fi(r)){var o=!0;vi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,io(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&fo(t,r,s,e),i.updater=po,t.stateNode=i,i._reactInternals=t,yo(t,r,e,n),t=Ba(null,t,r,!0,o,n)}else t.tag=0,Ra(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return jl(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===D)return 14}return 2}(i),e=Hi(i,e),o){case 0:t=za(null,t,i,e,n);break e;case 1:t=qa(null,t,i,e,n);break e;case 11:t=Ia(null,t,i,e,n);break e;case 14:t=La(null,t,i,Hi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,za(e,t,r,i=t.elementType===r?i:Hi(r,i),n);case 1:return r=t.type,i=t.pendingProps,qa(e,t,r,i=t.elementType===r?i:Hi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,oo(e,t),uo(t,r,null,n),(r=t.memoizedState.element)===i)Wo(),t=Ja(e,t,n);else{if((o=(i=t.stateNode).hydrate)&&(Vo=Wr(t.stateNode.containerInfo.firstChild),Lo=t,o=Fo=!0),o){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(o=e[i])._workInProgressVersionPrimary=e[i+1],$o.push(o);for(n=Eo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ra(e,t,r,n),Wo();t=t.child}return t;case 5:return Do(t),null===e&&qo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,zr(r,i)?s=null:null!==o&&zr(r,o)&&(t.flags|=16),ja(e,t),Ra(e,t,s,n),t.child;case 6:return null===e&&qo(t),null;case 13:return Ya(e,t,n);case 4:return Mo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):Ra(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ia(e,t,r,i=t.elementType===r?i:Hi(r,i),n);case 7:return Ra(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ra(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var l=t.type._context;if(si(Yi,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=ar(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!ci.current){t=Ja(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===l.tag&&((c=ao(-1,n&-n)).tag=2,so(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),eo(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ra(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,to(t,n),r=r(i=no(i,o.unstable_observedBits)),t.flags|=1,Ra(e,t,r,n),t.child;case 14:return o=Hi(i=t.type,t.pendingProps),La(e,t,i,o=Hi(i.type,o),r,n);case 15:return Va(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Hi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,fi(r)?(e=!0,vi(t)):e=!1,to(t,n),go(t,r,i),yo(t,r,i,n),Ba(null,t,r,!0,e,n);case 19:return Ka(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Kl.prototype.render=function(e){Yl(e,this._internalRoot,null,null)},Kl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yl(null,e,null,(function(){t[Qr]=null}))},et=function(e){13===e.tag&&(ll(e,4,al()),Zl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,al()),Zl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=sl(e);ll(e,n,t),Zl(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ti(r);if(!i)throw Error(a(90));Z(r),ne(r,i)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},De=pl,Pe=function(e,t,n,r,i){var o=Cs;Cs|=4;try{return Bi(98,e.bind(null,t,n,r,i))}finally{0===(Cs=o)&&(qs(),Wi())}},Re=function(){0==(49&Cs)&&(function(){if(null!==Ks){var e=Ks;Ks=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cl(e,ji())}))}Wi()}(),Ol())},Ie=function(e,t){var n=Cs;Cs|=2;try{return e(t)}finally{0===(Cs=n)&&(qs(),Wi())}};var nu={Events:[Jr,ei,ti,Me,Ne,Ol,{current:!1}]},ru={findFiberByHostInstance:Kr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},iu={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ke(e))?null:e.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ou=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ou.isDisabled&&ou.supportsFiber)try{_i=ou.inject(iu),wi=ou}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,t.createPortal=tu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ke(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Cs;if(0!=(48&n))return e(t);Cs|=1;try{if(e)return Bi(99,e.bind(null,t))}finally{Cs=n,Wi()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return eu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(ml((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Qr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return tu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return eu(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,h=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,f=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,_=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function b(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case h:case o:case s:case a:case f:return e;default:switch(e=e&&e.$$typeof){case u:case d:case g:case m:case l:return e;default:return t}}case i:return t}}}function x(e){return b(e)===h}t.AsyncMode=c,t.ConcurrentMode=h,t.ContextConsumer=u,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=o,t.Lazy=g,t.Memo=m,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=f,t.isAsyncMode=function(e){return x(e)||b(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return b(e)===u},t.isContextProvider=function(e){return b(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return b(e)===d},t.isFragment=function(e){return b(e)===o},t.isLazy=function(e){return b(e)===g},t.isMemo=function(e){return b(e)===m},t.isPortal=function(e){return b(e)===i},t.isProfiler=function(e){return b(e)===s},t.isStrictMode=function(e){return b(e)===a},t.isSuspense=function(e){return b(e)===f},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===h||e===s||e===a||e===f||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===l||e.$$typeof===u||e.$$typeof===d||e.$$typeof===y||e.$$typeof===_||e.$$typeof===w||e.$$typeof===v)},t.typeOf=b},864:(e,t,n)=>{"use strict";e.exports=n(921)},408:(e,t,n)=>{"use strict";var r=n(418),i=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;i=h("react.element"),o=h("react.portal"),t.Fragment=h("react.fragment"),t.StrictMode=h("react.strict_mode"),t.Profiler=h("react.profiler"),a=h("react.provider"),s=h("react.context"),l=h("react.forward_ref"),t.Suspense=h("react.suspense"),u=h("react.memo"),c=h("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function f(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(f(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var _=y.prototype=new v;_.constructor=y,r(_,g.prototype),_.isPureReactComponent=!0;var w={current:null},b=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)b.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];o.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:w.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var S=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=e),e=""===r?"."+C(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),T(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(S,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+C(s=e[u],u);l+=T(s,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(s=e.next()).done;)l+=T(s=s.value,t,n,c=r+C(s,u++),a);else if("object"===s)throw t=""+e,Error(f(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function A(e,t,n){if(null==e)return e;var r=[],i=0;return T(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function N(){var e=M.current;if(null===e)throw Error(f(321));return e}var D={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:A,forEach:function(e,t,n){A(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return A(e,(function(){t++})),t},toArray:function(e){return A(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(f(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,n){if(null==e)throw Error(f(267,e));var o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)b.call(t,c)&&!x.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){u=Array(c);for(var h=0;h<c;h++)u[h]=arguments[h+2];o.children=u}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var i=t&&t.prototype instanceof g?t:g,o=Object.create(i.prototype),a=new A(r||[]);return o._invoke=function(e,t,n){var r=h;return function(i,o){if(r===f)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return M()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=S(a,n);if(s){if(s===m)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=p,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=f;var l=c(e,t,n);if("normal"===l.type){if(r=n.done?p:d,l.arg===m)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=p,n.method="throw",n.arg=l.arg)}}}(e,n,a),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var h="suspendedStart",d="suspendedYield",f="executing",p="completed",m={};function g(){}function v(){}function y(){}var _={};_[o]=function(){return this};var w=Object.getPrototypeOf,b=w&&w(w(O([])));b&&b!==n&&r.call(b,o)&&(_=b);var x=y.prototype=g.prototype=Object.create(_);function k(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(i,o,a,s){var l=c(e[i],e,o);if("throw"!==l.type){var u=l.arg,h=u.value;return h&&"object"==typeof h&&r.call(h,"__await")?t.resolve(h.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(h).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,s)}))}s(l.arg)}var i;this._invoke=function(e,r){function o(){return new t((function(t,i){n(e,r,t,i)}))}return i=i?i.then(o,o):o()}}function S(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,S(e,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var i=c(r,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var o=i.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function A(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function n(){for(;++i<e.length;)if(r.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:M}}function M(){return{value:t,done:!0}}return v.prototype=x.constructor=y,y.constructor=v,v.displayName=l(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},k(E.prototype),E.prototype[a]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,i,o){void 0===o&&(o=Promise);var a=new E(u(t,n,r,i),o);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},k(x),l(x,s,"Generator"),x[o]=function(){return this},x.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,A.prototype={constructor:A,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(r,i){return s.type="throw",s.arg=e,n.next=r,i&&(n.method="next",n.arg=t),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var l=r.call(a,"catchLoc"),u=r.call(a,"finallyLoc");if(l&&u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;T(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,h=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(h,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(h,0))},r=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,v=-1,y=5,_=0;t.unstable_shouldYield=function(){return t.unstable_now()>=_},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,b=w.port2;w.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();_=e+y;try{g(!0,e)?b.postMessage(null):(m=!1,g=null)}catch(e){throw b.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,b.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},i=function(){f(v),v=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<S(i,t)))break e;e[r]=t,e[n]=i,n=r}}function k(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,l=e[s];if(void 0!==a&&0>S(a,n))void 0!==l&&0>S(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>S(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],T=[],A=1,O=null,M=3,N=!1,D=!1,P=!1;function R(e){for(var t=k(T);null!==t;){if(null===t.callback)E(T);else{if(!(t.startTime<=e))break;E(T),t.sortIndex=t.expirationTime,x(C,t)}t=k(T)}}function I(e){if(P=!1,R(e),!D)if(null!==k(C))D=!0,n(L);else{var t=k(T);null!==t&&r(I,t.startTime-e)}}function L(e,n){D=!1,P&&(P=!1,i()),N=!0;var o=M;try{for(R(n),O=k(C);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,M=O.priorityLevel;var s=a(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?O.callback=s:O===k(C)&&E(C),R(n)}else E(C);O=k(C)}if(null!==O)var l=!0;else{var u=k(T);null!==u&&r(I,u.startTime-n),l=!1}return l}finally{O=null,M=o,N=!1}}var V=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||N||(D=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return k(C)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=V,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,o,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:A++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,x(T,e),null===k(C)&&e===k(T)&&(P?i():P=!0,r(I,a-s))):(e.sortIndex=l,x(C,e),D||N||(D=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(294),t=n(935);function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}var o=n(697),a=n.n(o);function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function l(e){return"/"===e.charAt(0)}function u(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}const c=function(e,t){if(!e)throw new Error("Invariant failed")};function h(e){return"/"===e.charAt(0)?e:"/"+e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function f(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function m(e,t,n,r){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=s({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],o=e&&l(e),a=t&&l(t),s=o||a;if(e&&l(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var c=i[i.length-1];n="."===c||".."===c||""===c}else n=!1;for(var h=0,d=i.length;d>=0;d--){var f=i[d];"."===f?u(i,d):".."===f?(u(i,d),h++):h&&(u(i,d),h--)}if(!s)for(;h--;h)i.unshift("..");!s||""===i[0]||i[0]&&l(i[0])||i.unshift("");var p=i.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p}(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function g(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var v=!("undefined"==typeof window||!window.document||!window.document.createElement);function y(e,t){t(window.confirm(e))}var _="popstate",w="hashchange";function b(){try{return window.history.state||{}}catch(e){return{}}}function x(e){void 0===e&&(e={}),v||c(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,a=o.forceRefresh,l=void 0!==a&&a,u=o.getUserConfirmation,x=void 0===u?y:u,k=o.keyLength,E=void 0===k?6:k,S=e.basename?f(h(e.basename)):"";function C(e){var t=e||{},n=t.key,r=t.state,i=window.location,o=i.pathname+i.search+i.hash;return S&&(o=d(o,S)),m(o,r,n)}function T(){return Math.random().toString(36).substr(2,E)}var A=g();function O(e){s(q,e),q.length=n.length,A.notifyListeners(q.location,q.action)}function M(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||P(C(e.state))}function N(){P(C(b()))}var D=!1;function P(e){D?(D=!1,O()):A.confirmTransitionTo(e,"POP",x,(function(t){t?O({action:"POP",location:e}):function(e){var t=q.location,n=I.indexOf(t.key);-1===n&&(n=0);var r=I.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(D=!0,V(i))}(e)}))}var R=C(b()),I=[R.key];function L(e){return S+p(e)}function V(e){n.go(e)}var F=0;function j(e){1===(F+=e)&&1===e?(window.addEventListener(_,M),i&&window.addEventListener(w,N)):0===F&&(window.removeEventListener(_,M),i&&window.removeEventListener(w,N))}var z=!1,q={length:n.length,action:"POP",location:R,createHref:L,push:function(e,t){var i="PUSH",o=m(e,t,T(),q.location);A.confirmTransitionTo(o,i,x,(function(e){if(e){var t=L(o),a=o.key,s=o.state;if(r)if(n.pushState({key:a,state:s},null,t),l)window.location.href=t;else{var u=I.indexOf(q.location.key),c=I.slice(0,u+1);c.push(o.key),I=c,O({action:i,location:o})}else window.location.href=t}}))},replace:function(e,t){var i="REPLACE",o=m(e,t,T(),q.location);A.confirmTransitionTo(o,i,x,(function(e){if(e){var t=L(o),a=o.key,s=o.state;if(r)if(n.replaceState({key:a,state:s},null,t),l)window.location.replace(t);else{var u=I.indexOf(q.location.key);-1!==u&&(I[u]=o.key),O({action:i,location:o})}else window.location.replace(t)}}))},go:V,goBack:function(){V(-1)},goForward:function(){V(1)},block:function(e){void 0===e&&(e=!1);var t=A.setPrompt(e);return z||(j(1),z=!0),function(){return z&&(z=!1,j(-1)),t()}},listen:function(e){var t=A.appendListener(e);return j(1),function(){j(-1),t()}}};return q}var k=1073741823,E="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function S(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const C=e.createContext||function(t,n){var r,o,s,l="__create-react-context-"+((E[s="__global_unique_id__"]=(E[s]||0)+1)+"__"),u=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=S(t.props.value),t}i(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,i=e.value;((o=r)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?t=0:(t="function"==typeof n?n(r,i):k,0!=(t|=0)&&this.emitter.set(e.value,t))}var o,a},r.render=function(){return this.props.children},t}(e.Component);u.childContextTypes=((r={})[l]=a().object.isRequired,r);var c=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}i(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?k:t},r.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?k:e},r.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},r.getValue=function(){return this.context[l]?this.context[l].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return c.contextTypes=((o={})[l]=a().object,o),{Provider:u,Consumer:c}};var T=n(779),A=n.n(T);function O(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n(864),n(679);var M=function(e){var t=C();return t.displayName="Router-History",t}(),N=function(e){var t=C();return t.displayName="Router",t}(),D=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}i(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(N.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(M.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var P={},R=0;function I(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,o=void 0!==i&&i,a=n.strict,s=void 0!==a&&a,l=n.sensitive,u=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=P[n]||(P[n]={});if(r[e])return r[e];var i=[],o={regexp:A()(e,i,t),keys:i};return R<1e4&&(r[e]=o,R++),o}(n,{end:o,strict:s,sensitive:u}),i=r.regexp,a=r.keys,l=i.exec(e);if(!l)return null;var c=l[0],h=l.slice(1),d=e===c;return o&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=h[n],e}),{})}}),null)}var L=function(t){function n(){return t.apply(this,arguments)||this}return i(n,t),n.prototype.render=function(){var t=this;return e.createElement(N.Consumer,null,(function(n){n||c(!1);var r=t.props.location||n.location,i=s({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?I(r.pathname,t.props):n.match}),o=t.props,a=o.children,l=o.component,u=o.render;return Array.isArray(a)&&0===a.length&&(a=null),e.createElement(N.Provider,{value:i},i.match?a?"function"==typeof a?a(i):a:l?e.createElement(l,i):u?u(i):null:"function"==typeof a?a(i):null)}))},n}(e.Component);e.Component;var V=function(t){function n(){return t.apply(this,arguments)||this}return i(n,t),n.prototype.render=function(){var t=this;return e.createElement(N.Consumer,null,(function(n){n||c(!1);var r,i,o=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==i&&e.isValidElement(t)){r=t;var a=t.props.path||t.props.from;i=a?I(o.pathname,s({},t.props,{path:a})):n.match}})),i?e.cloneElement(r,{location:o,computedMatch:i}):null}))},n}(e.Component),F=e.useContext,j=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).history=x(e.props),e}return i(n,t),n.prototype.render=function(){return e.createElement(D,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var z=function(e,t){return"function"==typeof e?e(t):e},q=function(e,t){return"string"==typeof e?m(e,null,null,t):e},B=function(e){return e},U=e.forwardRef;void 0===U&&(U=B);var W=U((function(t,n){var r=t.innerRef,i=t.navigate,o=t.onClick,a=O(t,["innerRef","navigate","onClick"]),l=a.target,u=s({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),i())}});return u.ref=B!==U&&n||r,e.createElement("a",u)})),$=U((function(t,n){var r=t.component,i=void 0===r?W:r,o=t.replace,a=t.to,l=t.innerRef,u=O(t,["component","replace","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||c(!1);var r=t.history,h=q(z(a,t.location),t.location),d=h?r.createHref(h):"",f=s({},u,{href:d,navigate:function(){var e=z(a,t.location);(o?r.replace:r.push)(e)}});return B!==U?f.ref=n||l:f.innerRef=l,e.createElement(i,f)}))})),G=function(e){return e},H=e.forwardRef;function Y(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}void 0===H&&(H=G),H((function(t,n){var r=t["aria-current"],i=void 0===r?"page":r,o=t.activeClassName,a=void 0===o?"active":o,l=t.activeStyle,u=t.className,h=t.exact,d=t.isActive,f=t.location,p=t.sensitive,m=t.strict,g=t.style,v=t.to,y=t.innerRef,_=O(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(N.Consumer,null,(function(t){t||c(!1);var r=f||t.location,o=q(z(v,r),r),w=o.pathname,b=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=b?I(r.pathname,{path:b,exact:h,sensitive:p,strict:m}):null,k=!!(d?d(x,r):x),E=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,S=k?s({},g,{},l):g,C=s({"aria-current":k&&i||null,className:E,style:S,to:o},_);return G!==H?C.ref=n||y:C.innerRef=y,e.createElement($,C)}))}));const X=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var Q=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Z=X((function(e){return Q.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var K=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),J=Math.abs,ee=String.fromCharCode;function te(e){return e.trim()}function ne(e,t,n){return e.replace(t,n)}function re(e,t){return e.indexOf(t)}function ie(e,t){return 0|e.charCodeAt(t)}function oe(e,t,n){return e.slice(t,n)}function ae(e){return e.length}function se(e){return e.length}function le(e,t){return t.push(e),e}var ue=1,ce=1,he=0,de=0,fe=0,pe="";function me(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:ue,column:ce,length:a,return:""}}function ge(e,t,n){return me(e,t.root,t.parent,n,t.props,t.children,0)}function ve(){return fe=de>0?ie(pe,--de):0,ce--,10===fe&&(ce=1,ue--),fe}function ye(){return fe=de<he?ie(pe,de++):0,ce++,10===fe&&(ce=1,ue++),fe}function _e(){return ie(pe,de)}function we(){return de}function be(e,t){return oe(pe,e,t)}function xe(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ke(e){return ue=ce=1,he=ae(pe=e),de=0,[]}function Ee(e){return pe="",e}function Se(e){return te(be(de-1,Ae(91===e?e+2:40===e?e+1:e)))}function Ce(e){for(;(fe=_e())&&fe<33;)ye();return xe(e)>2||xe(fe)>3?"":" "}function Te(e,t){for(;--t&&ye()&&!(fe<48||fe>102||fe>57&&fe<65||fe>70&&fe<97););return be(e,we()+(t<6&&32==_e()&&32==ye()))}function Ae(e){for(;ye();)switch(fe){case e:return de;case 34:case 39:return Ae(34===e||39===e?e:fe);case 40:41===e&&Ae(e);break;case 92:ye()}return de}function Oe(e,t){for(;ye()&&e+fe!==57&&(e+fe!==84||47!==_e()););return"/*"+be(t,de-1)+"*"+ee(47===e?e:ye())}function Me(e){for(;!xe(_e());)ye();return be(e,de)}var Ne="-ms-",De="-moz-",Pe="-webkit-",Re="comm",Ie="rule",Le="decl";function Ve(e,t){for(var n="",r=se(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function Fe(e,t,n,r){switch(e.type){case"@import":case Le:return e.return=e.return||e.value;case Re:return"";case Ie:e.value=e.props.join(",")}return ae(n=Ve(e.children,r))?e.return=e.value+"{"+n+"}":""}function je(e,t){switch(function(e,t){return(((t<<2^ie(e,0))<<2^ie(e,1))<<2^ie(e,2))<<2^ie(e,3)}(e,t)){case 5103:return Pe+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return Pe+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return Pe+e+De+e+Ne+e+e;case 6828:case 4268:return Pe+e+Ne+e+e;case 6165:return Pe+e+Ne+"flex-"+e+e;case 5187:return Pe+e+ne(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return Pe+e+Ne+"flex-item-"+ne(e,/flex-|-self/,"")+e;case 4675:return Pe+e+Ne+"flex-line-pack"+ne(e,/align-content|flex-|-self/,"")+e;case 5548:return Pe+e+Ne+ne(e,"shrink","negative")+e;case 5292:return Pe+e+Ne+ne(e,"basis","preferred-size")+e;case 6060:return Pe+"box-"+ne(e,"-grow","")+Pe+e+Ne+ne(e,"grow","positive")+e;case 4554:return Pe+ne(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return ne(ne(ne(e,/(zoom-|grab)/,Pe+"$1"),/(image-set)/,Pe+"$1"),e,"")+e;case 5495:case 3959:return ne(e,/(image-set\([^]*)/,Pe+"$1$`$1");case 4968:return ne(ne(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+Pe+e+e;case 4095:case 3583:case 4068:case 2532:return ne(e,/(.+)-inline(.+)/,Pe+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(ae(e)-1-t>6)switch(ie(e,t+1)){case 109:if(45!==ie(e,t+4))break;case 102:return ne(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+De+(108==ie(e,t+3)?"$3":"$2-$3"))+e;case 115:return~re(e,"stretch")?je(ne(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==ie(e,t+1))break;case 6444:switch(ie(e,ae(e)-3-(~re(e,"!important")&&10))){case 107:return ne(e,":",":"+Pe)+e;case 101:return ne(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+Pe+(45===ie(e,14)?"inline-":"")+"box$3$1"+Pe+"$2$3$1"+Ne+"$2box$3")+e}break;case 5936:switch(ie(e,t+11)){case 114:return Pe+e+Ne+ne(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return Pe+e+Ne+ne(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return Pe+e+Ne+ne(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return Pe+e+Ne+e+e}return e}function ze(e){return Ee(qe("",null,null,null,[""],e=ke(e),0,[0],e))}function qe(e,t,n,r,i,o,a,s,l){for(var u=0,c=0,h=a,d=0,f=0,p=0,m=1,g=1,v=1,y=0,_="",w=i,b=o,x=r,k=_;g;)switch(p=y,y=ye()){case 34:case 39:case 91:case 40:k+=Se(y);break;case 9:case 10:case 13:case 32:k+=Ce(p);break;case 92:k+=Te(we()-1,7);continue;case 47:switch(_e()){case 42:case 47:le(Ue(Oe(ye(),we()),t,n),l);break;default:k+="/"}break;case 123*m:s[u++]=ae(k)*v;case 125*m:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+c:f>0&&ae(k)-h&&le(f>32?We(k+";",r,n,h-1):We(ne(k," ","")+";",r,n,h-2),l);break;case 59:k+=";";default:if(le(x=Be(k,t,n,u,c,i,s,_,w=[],b=[],h),o),123===y)if(0===c)qe(k,t,x,x,w,o,h,s,b);else switch(d){case 100:case 109:case 115:qe(e,x,x,r&&le(Be(e,x,x,0,0,i,s,_,i,w=[],h),b),i,b,h,s,r?w:b);break;default:qe(k,x,x,x,[""],b,h,s,b)}}u=c=f=0,m=v=1,_=k="",h=a;break;case 58:h=1+ae(k),f=p;default:if(m<1)if(123==y)--m;else if(125==y&&0==m++&&125==ve())continue;switch(k+=ee(y),y*m){case 38:v=c>0?1:(k+="\f",-1);break;case 44:s[u++]=(ae(k)-1)*v,v=1;break;case 64:45===_e()&&(k+=Se(ye())),d=_e(),c=ae(_=k+=Me(we())),y++;break;case 45:45===p&&2==ae(k)&&(m=0)}}return o}function Be(e,t,n,r,i,o,a,s,l,u,c){for(var h=i-1,d=0===i?o:[""],f=se(d),p=0,m=0,g=0;p<r;++p)for(var v=0,y=oe(e,h+1,h=J(m=a[p])),_=e;v<f;++v)(_=te(m>0?d[v]+" "+y:ne(y,/&\f/g,d[v])))&&(l[g++]=_);return me(e,t,n,0===i?Ie:s,l,u,c)}function Ue(e,t,n){return me(e,t,n,Re,ee(fe),oe(e,2,-2),0)}function We(e,t,n,r){return me(e,t,n,Le,oe(e,0,r),oe(e,r+1,-1),r)}var $e=new WeakMap,Ge=function(e){if("rule"===e.type&&e.parent&&e.length){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||$e.get(n))&&!r){$e.set(e,!0);for(var i=[],o=function(e,t){return Ee(function(e,t){var n=-1,r=44;do{switch(xe(r)){case 0:38===r&&12===_e()&&(t[n]=1),e[n]+=Me(de-1);break;case 2:e[n]+=Se(r);break;case 4:if(44===r){e[++n]=58===_e()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=ee(r)}}while(r=ye());return e}(ke(e),t))}(t,i),a=n.props,s=0,l=0;s<o.length;s++)for(var u=0;u<a.length;u++,l++)e.props[l]=i[s]?o[s].replace(/&\f/g,a[u]):a[u]+" "+o[s]}}},He=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},Ye=[function(e,t,n,r){if(!e.return)switch(e.type){case Le:e.return=je(e.value,e.length);break;case"@keyframes":return Ve([ge(ne(e.value,"@","@"+Pe),e,"")],r);case Ie:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return Ve([ge(ne(t,/:(read-\w+)/,":-moz-$1"),e,"")],r);case"::placeholder":return Ve([ge(ne(t,/:(plac\w+)/,":-webkit-input-$1"),e,""),ge(ne(t,/:(plac\w+)/,":-moz-$1"),e,""),ge(ne(t,/:(plac\w+)/,Ne+"input-$1"),e,"")],r)}return""}))}}];const Xe=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,i,o=e.stylisPlugins||Ye,a={},s=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)a[t[n]]=!0;s.push(e)}));var l,u,c,h,d=[Fe,(h=function(e){l.insert(e)},function(e){e.root||(e=e.return)&&h(e)})],f=(u=[Ge,He].concat(o,d),c=se(u),function(e,t,n,r){for(var i="",o=0;o<c;o++)i+=u[o](e,t,n,r)||"";return i});i=function(e,t,n,r){l=n,Ve(ze(e?e+"{"+t.styles+"}":t.styles),f),r&&(p.inserted[t.name]=!0)};var p={key:t,sheet:new K({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend}),nonce:e.nonce,inserted:a,registered:{},insert:i};return p.sheet.hydrate(s),p},Qe=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},Ze={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Ke=/[A-Z]|^ms/g,Je=/_EMO_([^_]+?)_([^]*?)_EMO_/g,et=function(e){return 45===e.charCodeAt(1)},tt=function(e){return null!=e&&"boolean"!=typeof e},nt=X((function(e){return et(e)?e:e.replace(Ke,"-$&").toLowerCase()})),rt=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Je,(function(e,t,n){return ot={name:t,styles:n,next:ot},t}))}return 1===Ze[e]||et(e)||"number"!=typeof t||0===t?t:t+"px"};function it(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return ot={name:n.name,styles:n.styles,next:ot},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)ot={name:r.name,styles:r.styles,next:ot},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=it(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":tt(a)&&(r+=nt(o)+":"+rt(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=it(e,t,a);switch(o){case"animation":case"animationName":r+=nt(o)+":"+s+";";break;default:r+=o+"{"+s+"}"}}else for(var l=0;l<a.length;l++)tt(a[l])&&(r+=nt(o)+":"+rt(o,a[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=ot,o=n(e);return ot=i,it(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var ot,at=/label:\s*([^\s;\n{]+)\s*(;|$)/g,st=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";ot=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=it(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=it(n,t,e[a]),r&&(i+=o[a]);at.lastIndex=0;for(var s,l="";null!==(s=at.exec(i));)l+="-"+s[1];return{name:Qe(i)+l,styles:i,next:ot}},lt=(Object.prototype.hasOwnProperty,(0,e.createContext)("undefined"!=typeof HTMLElement?Xe({key:"css"}):null)),ut=(lt.Provider,function(t){return(0,e.forwardRef)((function(n,r){var i=(0,e.useContext)(lt);return t(n,i,r)}))}),ct=(0,e.createContext)({});function ht(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var dt=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}},ft=Z,pt=function(e){return"theme"!==e},mt=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?ft:pt},gt=function(e,t,n){var r;if(t){var i=t.shouldForwardProp;r=e.__emotion_forwardProp&&i?function(t){return e.__emotion_forwardProp(t)&&i(t)}:i}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},vt=function t(n,r){var i,o,a=n.__emotion_real===n,l=a&&n.__emotion_base||n;void 0!==r&&(i=r.label,o=r.target);var u=gt(n,r,a),c=u||mt(l),h=!c("as");return function(){var d=arguments,f=a&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==i&&f.push("label:"+i+";"),null==d[0]||void 0===d[0].raw)f.push.apply(f,d);else{f.push(d[0][0]);for(var p=d.length,m=1;m<p;m++)f.push(d[m],d[0][m])}var g=ut((function(t,n,r){var i=h&&t.as||l,a="",s=[],d=t;if(null==t.theme){for(var p in d={},t)d[p]=t[p];d.theme=(0,e.useContext)(ct)}"string"==typeof t.className?a=ht(n.registered,s,t.className):null!=t.className&&(a=t.className+" ");var m=st(f.concat(s),n.registered,d);dt(n,m,"string"==typeof i),a+=n.key+"-"+m.name,void 0!==o&&(a+=" "+o);var g=h&&void 0===u?mt(i):c,v={};for(var y in t)h&&"as"===y||g(y)&&(v[y]=t[y]);return v.className=a,v.ref=r,(0,e.createElement)(i,v)}));return g.displayName=void 0!==i?i:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",g.defaultProps=n.defaultProps,g.__emotion_real=g,g.__emotion_base=l,g.__emotion_styles=f,g.__emotion_forwardProp=u,Object.defineProperty(g,"toString",{value:function(){return"."+o}}),g.withComponent=function(e,n){return t(e,s({},r,n,{shouldForwardProp:gt(g,n,!0)})).apply(void 0,f)},g}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){vt[e]=vt(e)}));const yt=vt;var _t=n(382);const wt=new WeakSet,bt=new WeakMap,xt=new WeakMap,kt=new WeakMap,Et=new WeakMap,St=new WeakMap,Ct=new WeakMap,Tt=new WeakMap,At=new WeakMap,Ot=new WeakMap,Mt={construct:()=>Mt},Nt=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,Dt=(e,t)=>{const n=[];let r=e.replace(/^[\s]+/,""),i=r.match(Nt);for(;null!==i;){const e=i[1].slice(1,-1),o=i[0].replace(/([\s]+)?;?$/,"").replace(e,new URL(e,t).toString());n.push(o),r=r.slice(i[0].length).replace(/^[\s]+/,""),i=r.match(Nt)}return[n.join(";"),r]},Pt=e=>{if(void 0!==e&&!Array.isArray(e))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},Rt=e=>{if(!(e=>{try{new new Proxy(e,Mt)}catch{return!1}return!0})(e))throw new TypeError("The given value for processorCtor should be a constructor.");if(null===e.prototype||"object"!=typeof e.prototype)throw new TypeError("The given value for processorCtor should have a prototype.")},It=(e,t)=>{const n=e.get(t);if(void 0===n)throw new Error("A value with the given key could not be found.");return n},Lt=(e,t)=>{const n=Array.from(e).filter(t);if(n.length>1)throw Error("More than one element was found.");if(0===n.length)throw Error("No element was found.");const[r]=n;return e.delete(r),r},Vt=(e,t,n,r)=>{const i=It(e,t),o=Lt(i,(e=>e[0]===n&&e[1]===r));return 0===i.size&&e.delete(t),o},Ft=e=>It(Ct,e),jt=e=>{if(wt.has(e))throw new Error("The AudioNode is already stored.");wt.add(e),Ft(e).forEach((e=>e(!0)))},zt=e=>"port"in e,qt=e=>{if(!wt.has(e))throw new Error("The AudioNode is not stored.");wt.delete(e),Ft(e).forEach((e=>e(!1)))},Bt=(e,t)=>{!zt(e)&&t.every((e=>0===e.size))&&qt(e)},Ut={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},Wt=(e,t)=>e.context===t,$t=e=>{try{e.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0},Gt=()=>new DOMException("","IndexSizeError"),Ht=e=>{var t;e.getChannelData=(t=e.getChannelData,n=>{try{return t.call(e,n)}catch(e){if(12===e.code)throw Gt();throw e}})},Yt={numberOfChannels:1},Xt=-34028234663852886e22,Qt=-Xt,Zt=e=>wt.has(e),Kt={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},Jt=e=>It(bt,e),en=e=>It(kt,e),tn=(e,t)=>{const{activeInputs:n}=Jt(e);n.forEach((n=>n.forEach((([n])=>{t.includes(e)||tn(n,[...t,e])}))));const r=(e=>"playbackRate"in e)(e)?[e.playbackRate]:zt(e)?Array.from(e.parameters.values()):(e=>"frequency"in e&&"gain"in e)(e)?[e.Q,e.detune,e.frequency,e.gain]:(e=>"offset"in e)(e)?[e.offset]:(e=>!("frequency"in e)&&"gain"in e)(e)?[e.gain]:(e=>"detune"in e&&"frequency"in e)(e)?[e.detune,e.frequency]:(e=>"pan"in e)(e)?[e.pan]:[];for(const e of r){const n=en(e);void 0!==n&&n.activeInputs.forEach((([e])=>tn(e,t)))}Zt(e)&&qt(e)},nn=e=>{tn(e.destination,[])},rn=e=>"context"in e,on=e=>rn(e[0]),an=(e,t,n,r)=>{for(const t of e)if(n(t)){if(r)return!1;throw Error("The set contains at least one similar element.")}return e.add(t),!0},sn=(e,t,[n,r],i)=>{an(e,[t,n,r],(e=>e[0]===t&&e[1]===n),i)},ln=(e,[t,n,r],i)=>{const o=e.get(t);void 0===o?e.set(t,new Set([[n,r]])):an(o,[n,r],(e=>e[0]===n),i)},un=e=>"inputs"in e,cn=(e,t,n,r)=>{if(un(t)){const i=t.inputs[r];return e.connect(i,n,0),[i,n,0]}return e.connect(t,n,r),[t,n,r]},hn=(e,t,n)=>{for(const r of e)if(r[0]===t&&r[1]===n)return e.delete(r),r;return null},dn=(e,t)=>{if(!Ft(e).delete(t))throw new Error("Missing the expected event listener.")},fn=(e,t,n)=>{const r=It(e,t),i=Lt(r,(e=>e[0]===n));return 0===r.size&&e.delete(t),i},pn=(e,t,n,r)=>{un(t)?e.disconnect(t.inputs[r],n,0):e.disconnect(t,n,r)},mn=e=>It(xt,e),gn=e=>It(Et,e),vn=e=>Tt.has(e),yn=e=>!wt.has(e),_n=e=>new Promise((t=>{const n=e.createScriptProcessor(256,1,1),r=e.createGain(),i=e.createBuffer(1,2,44100),o=i.getChannelData(0);o[0]=1,o[1]=1;const a=e.createBufferSource();a.buffer=i,a.loop=!0,a.connect(n).connect(e.destination),a.connect(r),a.disconnect(r),n.onaudioprocess=r=>{const i=r.inputBuffer.getChannelData(0);Array.prototype.some.call(i,(e=>1===e))?t(!0):t(!1),a.stop(),n.onaudioprocess=null,a.disconnect(n),n.disconnect(e.destination)},a.start()})),wn=(e,t)=>{const n=new Map;for(const t of e)for(const e of t){const t=n.get(e);n.set(e,void 0===t?1:t+1)}n.forEach(((e,n)=>t(n,e)))},bn=e=>"context"in e,xn=e=>{const t=new Map;var n,r;e.connect=(r=e.connect.bind(e),(e,n=0,i=0)=>{const o=bn(e)?r(e,n,i):r(e,n),a=t.get(e);return void 0===a?t.set(e,[{input:i,output:n}]):a.every((e=>e.input!==i||e.output!==n))&&a.push({input:i,output:n}),o}),e.disconnect=(n=e.disconnect,(r,i,o)=>{if(n.apply(e),void 0===r)t.clear();else if("number"==typeof r)for(const[e,n]of t){const i=n.filter((e=>e.output!==r));0===i.length?t.delete(e):t.set(e,i)}else if(t.has(r))if(void 0===i)t.delete(r);else{const e=t.get(r);if(void 0!==e){const n=e.filter((e=>e.output!==i&&(e.input!==o||void 0===o)));0===n.length?t.delete(r):t.set(r,n)}}for(const[n,r]of t)r.forEach((t=>{bn(n)?e.connect(n,t.output,t.input):e.connect(n,t.output)}))})},kn=(e,t,n,r,i)=>{const[o,a]=((e,t,n,r)=>{const{activeInputs:i,passiveInputs:o}=Jt(t),a=hn(i[r],e,n);return null===a?[Vt(o,e,n,r)[2],!1]:[a[2],!0]})(e,n,r,i);if(null!==o&&(dn(e,o),!a||t||vn(e)||pn(mn(e),mn(n),r,i)),Zt(n)){const{activeInputs:e}=Jt(n);Bt(n,e)}},En=(e,t,n,r)=>{const[i,o]=((e,t,n)=>{const{activeInputs:r,passiveInputs:i}=en(t),o=hn(r,e,n);return null===o?[fn(i,e,n)[1],!1]:[o[2],!0]})(e,n,r);null!==i&&(dn(e,i),!o||t||vn(e)||mn(e).disconnect(gn(n),r))};class Sn{constructor(e){this._map=new Map(e)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(e,t=null){return this._map.forEach(((n,r)=>e.call(t,n,r,this)))}get(e){return this._map.get(e)}has(e){return this._map.has(e)}keys(){return this._map.keys()}values(){return this._map.values()}}const Cn={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,parameterData:{},processorOptions:{}};function Tn(e,t,n,r,i){if("function"==typeof e.copyFromChannel)0===t[n].byteLength&&(t[n]=new Float32Array(128)),e.copyFromChannel(t[n],r,i);else{const o=e.getChannelData(r);if(0===t[n].byteLength)t[n]=o.slice(i,i+128);else{const e=new Float32Array(o.buffer,i*Float32Array.BYTES_PER_ELEMENT,128);t[n].set(e)}}}const An=(e,t,n,r,i)=>{"function"==typeof e.copyToChannel?0!==t[n].byteLength&&e.copyToChannel(t[n],r,i):0!==t[n].byteLength&&e.getChannelData(r).set(t[n],i)},On=(e,t)=>{const n=[];for(let r=0;r<e;r+=1){const e=[],i="number"==typeof t?t:t[r];for(let t=0;t<i;t+=1)e.push(new Float32Array(128));n.push(e)}return n},Mn=async(e,t,n,r,i,o,a)=>{const s=null===t?128*Math.ceil(e.context.length/128):t.length,l=r.channelCount*r.numberOfInputs,u=i.reduce(((e,t)=>e+t),0),c=0===u?null:n.createBuffer(u,s,n.sampleRate);if(void 0===o)throw new Error("Missing the processor constructor.");const h=Jt(e),d=await((e,t)=>{const n=It(Ot,e),r=mn(t);return It(n,r)})(n,e),f=On(r.numberOfInputs,r.channelCount),p=On(r.numberOfOutputs,i),m=Array.from(e.parameters.keys()).reduce(((e,t)=>({...e,[t]:new Float32Array(128)})),{});for(let u=0;u<s;u+=128){if(r.numberOfInputs>0&&null!==t)for(let e=0;e<r.numberOfInputs;e+=1)for(let n=0;n<r.channelCount;n+=1)Tn(t,f[e],n,n,u);void 0!==o.parameterDescriptors&&null!==t&&o.parameterDescriptors.forEach((({name:e},n)=>{Tn(t,m,e,l+n,u)}));for(let e=0;e<r.numberOfInputs;e+=1)for(let t=0;t<i[e];t+=1)0===p[e][t].byteLength&&(p[e][t]=new Float32Array(128));try{const e=f.map(((e,t)=>0===h.activeInputs[t].size?[]:e)),t=a(u/n.sampleRate,n.sampleRate,(()=>d.process(e,p,m)));if(null!==c)for(let e=0,t=0;e<r.numberOfOutputs;e+=1){for(let n=0;n<i[e];n+=1)An(c,p[e],n,t+n,u);t+=i[e]}if(!t)break}catch(t){e.dispatchEvent(new ErrorEvent("processorerror",{colno:t.colno,filename:t.filename,lineno:t.lineno,message:t.message}));break}}return c},Nn={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},Dn={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},Pn={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},Rn={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},In={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},Ln=e=>{const{port1:t,port2:n}=new MessageChannel;return new Promise((r=>{n.onmessage=()=>{t.close(),n.close(),r()},t.postMessage(e,[e])}))},Vn={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},Fn=(e,t,n)=>{const r=t[n];if(void 0===r)throw e();return r},jn={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},zn={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},qn=()=>new DOMException("","InvalidStateError"),Bn=()=>new DOMException("","InvalidAccessError"),Un={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},Wn=(e,t,n,r,i,o,a,s,l,u,c)=>{const h=u.length;let d=s;for(let s=0;s<h;s+=1){let h=n[0]*u[s];for(let t=1;t<i;t+=1){const r=d-t&l-1;h+=n[t]*o[r],h-=e[t]*a[r]}for(let e=i;e<r;e+=1)h+=n[e]*o[d-e&l-1];for(let n=i;n<t;n+=1)h-=e[n]*a[d-n&l-1];o[d]=u[s],a[d]=h,d=d+1&l-1,c[s]=h}return d},$n={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},Gn=e=>{const t=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const n=e.decodeAudioData(t.buffer,(()=>{}));return void 0!==n&&(n.catch((()=>{})),!0)}catch{}return!1},Hn=(e,t,n)=>{const r=t[n];void 0!==r&&r!==e[n]&&(e[n]=r)},Yn=(e,t)=>{Hn(e,t,"channelCount"),Hn(e,t,"channelCountMode"),Hn(e,t,"channelInterpretation")},Xn=e=>"function"==typeof e.getFloatTimeDomainData,Qn=(e,t,n)=>{const r=t[n];void 0!==r&&r!==e[n].value&&(e[n].value=r)},Zn=e=>{var t;e.start=(t=e.start,(n=0,r=0,i)=>{if("number"==typeof i&&i<0||r<0||n<0)throw new RangeError("The parameters can't be negative.");t.call(e,n,r,i)})},Kn=e=>{var t;e.stop=(t=e.stop,(n=0)=>{if(n<0)throw new RangeError("The parameter can't be negative.");t.call(e,n)})},Jn=(e,t)=>null===e?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(e*t))))),er=(e,t)=>{const n=e.createBiquadFilter();return Yn(n,t),Qn(n,t,"Q"),Qn(n,t,"detune"),Qn(n,t,"frequency"),Qn(n,t,"gain"),Hn(n,t,"type"),n},tr=(e,t)=>{const n=e.createChannelSplitter(t.numberOfOutputs);return Yn(n,t),(e=>{const t=e.numberOfOutputs;Object.defineProperty(e,"channelCount",{get:()=>t,set:e=>{if(e!==t)throw qn()}}),Object.defineProperty(e,"channelCountMode",{get:()=>"explicit",set:e=>{if("explicit"!==e)throw qn()}}),Object.defineProperty(e,"channelInterpretation",{get:()=>"discrete",set:e=>{if("discrete"!==e)throw qn()}})})(n),n},nr=(e,t)=>(e.connect=t.connect.bind(t),e.disconnect=t.disconnect.bind(t),e),rr=(e,t)=>{const n=e.createDelay(t.maxDelayTime);return Yn(n,t),Qn(n,t,"delayTime"),n},ir=(e,t)=>{const n=e.createGain();return Yn(n,t),Qn(n,t,"gain"),n};function or(e,t){const n=t[0]*t[0]+t[1]*t[1];return[(e[0]*t[0]+e[1]*t[1])/n,(e[1]*t[0]-e[0]*t[1])/n]}function ar(e,t){let n=[0,0];for(let o=e.length-1;o>=0;o-=1)i=t,n=[(r=n)[0]*i[0]-r[1]*i[1],r[0]*i[1]+r[1]*i[0]],n[0]+=e[o];var r,i;return n}const sr=(e,t,n,r)=>e.createScriptProcessor(t,n,r),lr=()=>new DOMException("","NotSupportedError"),ur={numberOfChannels:1},cr={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,periodicWave:void 0,type:"sine"},hr={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},dr={disableNormalization:!1},fr={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},pr=()=>new DOMException("","UnknownError"),mr={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},gr=e=>{if(null===e)return!1;const t=e.length;return t%2!=0?0!==e[Math.floor(t/2)]:e[t/2-1]+e[t/2]!==0},vr=(e,t,n,r)=>{let i=Object.getPrototypeOf(e);for(;!i.hasOwnProperty(t);)i=Object.getPrototypeOf(i);const{get:o,set:a}=Object.getOwnPropertyDescriptor(i,t);Object.defineProperty(e,t,{get:n(o),set:r(a)})},yr=(e,t,n)=>{try{e.setValueAtTime(t,n)}catch(r){if(9!==r.code)throw r;yr(e,t,n+1e-7)}},_r=e=>{const t=e.createOscillator();try{t.start(-1)}catch(e){return e instanceof RangeError}return!1},wr=e=>{const t=e.createBuffer(1,1,44100),n=e.createBufferSource();n.buffer=t,n.start(),n.stop();try{return n.stop(),!0}catch{return!1}},br=e=>{const t=e.createOscillator();try{t.stop(-1)}catch(e){return e instanceof RangeError}return!1},xr=(e,t)=>{const n=t.createGain();e.connect(n);const r=(i=e.disconnect,()=>{i.call(e,n),e.removeEventListener("ended",r)});var i;e.addEventListener("ended",r),nr(e,n),e.stop=(t=>{let r=!1;return(i=0)=>{if(r)try{t.call(e,i)}catch{n.gain.setValueAtTime(0,i)}else t.call(e,i),r=!0}})(e.stop)},kr=(e,t)=>n=>{const r={value:e};return Object.defineProperties(n,{currentTarget:r,target:r}),"function"==typeof t?t.call(e,n):t.handleEvent.call(e,n)},Er=(e=>(t,n,[r,i,o],a)=>{e(t[i],[n,r,o],(e=>e[0]===n&&e[1]===r),a)})(an),Sr=(e=>(t,n,[r,i,o],a)=>{const s=t.get(r);void 0===s?t.set(r,new Set([[i,n,o]])):e(s,[i,n,o],(e=>e[0]===i&&e[1]===n),a)})(an),Cr=(e=>(t,n,r,i)=>e(t[i],(e=>e[0]===n&&e[1]===r)))(Lt),Tr=new WeakMap,Ar=(e=>t=>{var n;return null!==(n=e.get(t))&&void 0!==n?n:0})(Tr),Or=(Mr=new Map,Nr=new WeakMap,(e,t)=>{const n=Nr.get(e);if(void 0!==n)return n;const r=Mr.get(e);if(void 0!==r)return r;try{const n=t();return n instanceof Promise?(Mr.set(e,n),n.catch((()=>!1)).then((t=>(Mr.delete(e),Nr.set(e,t),t)))):(Nr.set(e,n),n)}catch{return Nr.set(e,!1),!1}});var Mr,Nr;const Dr="undefined"==typeof window?null:window,Pr=((e,t)=>(n,r)=>{const i=n.createAnalyser();if(Yn(i,r),!(r.maxDecibels>r.minDecibels))throw t();return Hn(i,r,"fftSize"),Hn(i,r,"maxDecibels"),Hn(i,r,"minDecibels"),Hn(i,r,"smoothingTimeConstant"),e(Xn,(()=>Xn(i)))||(e=>{e.getFloatTimeDomainData=t=>{const n=new Uint8Array(t.length);e.getByteTimeDomainData(n);const r=Math.max(n.length,e.fftSize);for(let e=0;e<r;e+=1)t[e]=.0078125*(n[e]-128);return t}})(i),i})(Or,Gt),Rr=(e=>t=>{const n=e(t);if(null===n.renderer)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return n.renderer})(Jt),Ir=((e,t,n)=>async(r,i,o,a)=>{const s=e(r),l=[...a,r];await Promise.all(s.activeInputs.map(((e,a)=>Array.from(e).filter((([e])=>!l.includes(e))).map((async([e,s])=>{const u=t(e),c=await u.render(e,i,l),h=r.context.destination;n(e)||r===h&&n(r)||c.connect(o,s,a)})))).reduce(((e,t)=>[...e,...t]),[]))})(Jt,Rr,vn),Lr=((e,t,n)=>()=>{const r=new WeakMap;return{render(i,o,a){const s=r.get(o);return void 0!==s?Promise.resolve(s):(async(i,o,a)=>{let s=t(i);if(!Wt(s,o)){const t={channelCount:s.channelCount,channelCountMode:s.channelCountMode,channelInterpretation:s.channelInterpretation,fftSize:s.fftSize,maxDecibels:s.maxDecibels,minDecibels:s.minDecibels,smoothingTimeConstant:s.smoothingTimeConstant};s=e(o,t)}return r.set(o,s),await n(i,o,s,a),s})(i,o,a)}}})(Pr,mn,Ir),Vr=(Fr=St,e=>{const t=Fr.get(e);if(void 0===t)throw qn();return t});var Fr;const jr=(e=>null===e?null:e.hasOwnProperty("OfflineAudioContext")?e.OfflineAudioContext:e.hasOwnProperty("webkitOfflineAudioContext")?e.webkitOfflineAudioContext:null)(Dr),zr=(e=>t=>null!==e&&t instanceof e)(jr),qr=new WeakMap,Br=(e=>class{constructor(e){this._nativeEventTarget=e,this._listeners=new WeakMap}addEventListener(t,n,r){if(null!==n){let i=this._listeners.get(n);void 0===i&&(i=e(this,n),"function"==typeof n&&this._listeners.set(n,i)),this._nativeEventTarget.addEventListener(t,i,r)}}dispatchEvent(e){return this._nativeEventTarget.dispatchEvent(e)}removeEventListener(e,t,n){const r=null===t?void 0:this._listeners.get(t);this._nativeEventTarget.removeEventListener(e,void 0===r?null:r,n)}})(kr),Ur=(e=>null===e?null:e.hasOwnProperty("AudioContext")?e.AudioContext:e.hasOwnProperty("webkitAudioContext")?e.webkitAudioContext:null)(Dr),Wr=(e=>t=>null!==e&&t instanceof e)(Ur),$r=(e=>t=>null!==e&&"function"==typeof e.AudioNode&&t instanceof e.AudioNode)(Dr),Gr=(e=>t=>null!==e&&"function"==typeof e.AudioParam&&t instanceof e.AudioParam)(Dr),Hr=((e,t,n,r,i,o,a,s,l,u,c,h,d,f,p)=>class extends u{constructor(t,r,i,o){super(i),this._context=t,this._nativeAudioNode=i;const a=c(t);h(a)&&!0!==n(_n,(()=>_n(a)))&&xn(i),xt.set(this,i),Ct.set(this,new Set),"closed"!==t.state&&r&&jt(this),e(this,o,i)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(e){this._nativeAudioNode.channelCount=e}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(e){this._nativeAudioNode.channelCountMode=e}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(e){this._nativeAudioNode.channelInterpretation=e}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(e,n=0,s=0){if(n<0||n>=this._nativeAudioNode.numberOfOutputs)throw i();const u=c(this._context),h=p(u);if(d(e)||f(e))throw o();if(rn(e)){const i=mn(e);try{const t=cn(this._nativeAudioNode,i,n,s),r=yn(this);(h||r)&&this._nativeAudioNode.disconnect(...t),"closed"!==this.context.state&&!r&&yn(e)&&jt(e)}catch(e){if(12===e.code)throw o();throw e}if(t(this,e,n,s,h)){const t=l([this],e);wn(t,r(h))}return e}const m=gn(e);if("playbackRate"===m.name&&1024===m.maxValue)throw a();try{this._nativeAudioNode.connect(m,n),(h||yn(this))&&this._nativeAudioNode.disconnect(m,n)}catch(e){if(12===e.code)throw o();throw e}if(((e,t,n,r)=>{const{activeInputs:i,passiveInputs:o}=en(t),{outputs:a}=Jt(e),s=Ft(e),l=a=>{const s=mn(e),l=gn(t);if(a){const t=fn(o,e,n);sn(i,e,t,!1),r||vn(e)||s.connect(l,n)}else{const t=((e,t,n)=>Lt(e,(e=>e[0]===t&&e[1]===n)))(i,e,n);ln(o,t,!1),r||vn(e)||s.disconnect(l,n)}};return!!an(a,[t,n],(e=>e[0]===t&&e[1]===n),!0)&&(s.add(l),Zt(e)?sn(i,e,[n,l],!0):ln(o,[e,n,l],!0),!0)})(this,e,n,h)){const t=l([this],e);wn(t,r(h))}}disconnect(e,t,n){let r;const a=c(this._context),u=p(a);if(void 0===e)r=((e,t)=>{const n=Jt(e),r=[];for(const i of n.outputs)on(i)?kn(e,t,...i):En(e,t,...i),r.push(i[0]);return n.outputs.clear(),r})(this,u);else if("number"==typeof e){if(e<0||e>=this.numberOfOutputs)throw i();r=((e,t,n)=>{const r=Jt(e),i=[];for(const o of r.outputs)o[1]===n&&(on(o)?kn(e,t,...o):En(e,t,...o),i.push(o[0]),r.outputs.delete(o));return i})(this,u,e)}else{if(void 0!==t&&(t<0||t>=this.numberOfOutputs))throw i();if(rn(e)&&void 0!==n&&(n<0||n>=e.numberOfInputs))throw i();if(r=((e,t,n,r,i)=>{const o=Jt(e);return Array.from(o.outputs).filter((e=>!(e[0]!==n||void 0!==r&&e[1]!==r||void 0!==i&&e[2]!==i))).map((n=>(on(n)?kn(e,t,...n):En(e,t,...n),o.outputs.delete(n),n[0])))})(this,u,e,t,n),0===r.length)throw o()}for(const e of r){const t=l([this],e);wn(t,s)}}})((Yr=bt,(e,t,n)=>{const r=[];for(let e=0;e<n.numberOfInputs;e+=1)r.push(new Set);Yr.set(e,{activeInputs:r,outputs:new Set,passiveInputs:new WeakMap,renderer:t})}),((e,t,n,r,i,o,a,s,l,u,c,h,d)=>{const f=new WeakMap;return(p,m,g,v,y)=>{const{activeInputs:_,passiveInputs:w}=o(m),{outputs:b}=o(p),x=s(p),k=o=>{const s=l(m),u=l(p);if(o){const t=Vt(w,p,g,v);e(_,p,t,!1),y||h(p)||n(u,s,g,v),d(m)&&jt(m)}else{const e=r(_,p,g,v);t(w,v,e,!1),y||h(p)||i(u,s,g,v);const n=a(m);if(0===n)c(m)&&Bt(m,_);else{const e=f.get(m);void 0!==e&&clearTimeout(e),f.set(m,setTimeout((()=>{c(m)&&Bt(m,_)}),1e3*n))}}};return!!u(b,[m,g,v],(e=>e[0]===m&&e[1]===g&&e[2]===v),!0)&&(x.add(k),c(p)?e(_,p,[g,v,k],!0):t(w,v,[p,g,k],!0),!0)}})(Er,Sr,cn,Cr,pn,Jt,Ar,Ft,mn,an,Zt,vn,yn),Or,((e,t,n,r,i,o)=>a=>(s,l)=>{const u=e.get(s);if(void 0===u){if(!a&&o(s)){const e=r(s),{outputs:o}=n(s);for(const n of o)if(on(n)){const i=r(n[0]);t(e,i,n[1],n[2])}else{const t=i(n[0]);e.disconnect(t,n[1])}}e.set(s,l)}else e.set(s,u+l)})(Tt,pn,Jt,mn,gn,Zt),Gt,Bn,lr,((e,t,n,r,i,o,a,s)=>(l,u)=>{const c=t.get(l);if(void 0===c)throw new Error("Missing the expected cycle count.");const h=o(l.context),d=s(h);if(c===u){if(t.delete(l),!d&&a(l)){const t=r(l),{outputs:o}=n(l);for(const n of o)if(on(n)){const i=r(n[0]);e(t,i,n[1],n[2])}else{const e=i(n[0]);t.connect(e,n[1])}}}else t.set(l,c-u)})(cn,Tt,Jt,mn,gn,Vr,Zt,zr),((e,t,n)=>function r(i,o){const a=rn(o)?o:n(e,o);if((e=>"delayTime"in e)(a))return[];if(i[0]===a)return[i];if(i.includes(a))return[];const{outputs:s}=t(a);return Array.from(s).map((e=>r([...i,a],e[0]))).reduce(((e,t)=>e.concat(t)),[])})(qr,Jt,It),Br,Vr,Wr,$r,Gr,zr);var Yr;const Xr=((e,t,n,r,i,o)=>class extends e{constructor(e,n){const a=i(e),s={...Ut,...n},l=r(a,s);super(e,!1,l,o(a)?t():null),this._nativeAnalyserNode=l}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(e){this._nativeAnalyserNode.fftSize=e}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(e){const t=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=e,!(e>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=t,n()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(e){const t=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=e,!(this._nativeAnalyserNode.maxDecibels>e))throw this._nativeAnalyserNode.minDecibels=t,n()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(e){this._nativeAnalyserNode.smoothingTimeConstant=e}getByteFrequencyData(e){this._nativeAnalyserNode.getByteFrequencyData(e)}getByteTimeDomainData(e){this._nativeAnalyserNode.getByteTimeDomainData(e)}getFloatFrequencyData(e){this._nativeAnalyserNode.getFloatFrequencyData(e)}getFloatTimeDomainData(e){this._nativeAnalyserNode.getFloatTimeDomainData(e)}})(Hr,Lr,Gt,Pr,Vr,zr),Qr=new WeakSet,Zr=(e=>null===e?null:e.hasOwnProperty("AudioBuffer")?e.AudioBuffer:null)(Dr),Kr=(Jr=new Uint32Array(1),e=>(Jr[0]=e,Jr[0]));var Jr;const ei=((e,t)=>n=>{n.copyFromChannel=(r,i,o=0)=>{const a=e(o),s=e(i);if(s>=n.numberOfChannels)throw t();const l=n.length,u=n.getChannelData(s),c=r.length;for(let e=a<0?-a:0;e+a<l&&e<c;e+=1)r[e]=u[e+a]},n.copyToChannel=(r,i,o=0)=>{const a=e(o),s=e(i);if(s>=n.numberOfChannels)throw t();const l=n.length,u=n.getChannelData(s),c=r.length;for(let e=a<0?-a:0;e+a<l&&e<c;e+=1)u[e+a]=r[e]}})(Kr,Gt),ti=(e=>t=>{t.copyFromChannel=(n=>(r,i,o=0)=>{const a=e(o),s=e(i);if(a<t.length)return n.call(t,r,s,a)})(t.copyFromChannel),t.copyToChannel=(n=>(r,i,o=0)=>{const a=e(o),s=e(i);if(a<t.length)return n.call(t,r,s,a)})(t.copyToChannel)})(Kr),ni=((e,t,n,r,i,o,a,s)=>{let l=null;return class u{constructor(u){if(null===i)throw new Error("Missing the native OfflineAudioContext constructor.");const{length:c,numberOfChannels:h,sampleRate:d}={...Yt,...u};null===l&&(l=new i(1,1,44100));const f=null!==r&&t(o,o)?new r({length:c,numberOfChannels:h,sampleRate:d}):l.createBuffer(h,c,d);if(0===f.numberOfChannels)throw n();return"function"!=typeof f.copyFromChannel?(a(f),Ht(f)):t($t,(()=>$t(f)))||s(f),e.add(f),f}static[Symbol.hasInstance](t){return null!==t&&"object"==typeof t&&Object.getPrototypeOf(t)===u.prototype||e.has(t)}}})(Qr,Or,lr,Zr,jr,(e=>()=>{if(null===e)return!1;try{new e({length:1,sampleRate:44100})}catch{return!1}return!0})(Zr),ei,ti),ri=(e=>(t,n)=>{const r=e(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});n.connect(r).connect(t.destination);const i=()=>{n.removeEventListener("ended",i),n.disconnect(r),r.disconnect()};n.addEventListener("ended",i)})(ir),ii=((e,t,n)=>async(r,i,o,a)=>{const s=t(r);await Promise.all(Array.from(s.activeInputs).map((async([t,r])=>{const s=e(t),l=await s.render(t,i,a);n(t)||l.connect(o,r)})))})(Rr,en,vn),oi=(e=>(t,n,r,i)=>e(n,t,r,i))(ii),ai=((e,t,n,r,i,o,a,s,l,u,c)=>(l,h)=>{const d=l.createBufferSource();return Yn(d,h),Qn(d,h,"playbackRate"),Hn(d,h,"buffer"),Hn(d,h,"loop"),Hn(d,h,"loopEnd"),Hn(d,h,"loopStart"),t(n,(()=>n(l)))||(e=>{e.start=(t=>{let n=!1;return(r=0,i=0,o)=>{if(n)throw qn();t.call(e,r,i,o),n=!0}})(e.start)})(d),t(r,(()=>r(l)))||(e=>{var t;e.start=(t=e.start,(n=0,r=0,i)=>{const o=e.buffer,a=null===o?r:Math.min(o.duration,r);null!==o&&a>o.duration-.5/e.context.sampleRate?t.call(e,n,0,0):t.call(e,n,a,i)})})(d),t(i,(()=>i(l)))||u(d,l),t(o,(()=>o(l)))||Zn(d),t(a,(()=>a(l)))||c(d,l),t(s,(()=>s(l)))||Kn(d),e(l,d),d})(ri,Or,(e=>{const t=e.createBufferSource();t.start();try{t.start()}catch{return!0}return!1}),(e=>{const t=e.createBufferSource(),n=e.createBuffer(1,1,44100);t.buffer=n;try{t.start(0,1)}catch{return!1}return!0}),(e=>{const t=e.createBufferSource();t.start();try{t.stop()}catch{return!1}return!0}),_r,wr,br,0,(e=>(t,n)=>{const r=n.createBuffer(1,1,44100);null===t.buffer&&(t.buffer=r),e(t,"buffer",(e=>()=>{const n=e.call(t);return n===r?null:n}),(e=>n=>e.call(t,null===n?r:n)))})(vr),xr),si=((e,t)=>(n,r,i,o)=>(e(r).replay(i),t(r,n,i,o)))((e=>t=>{const n=e(t);if(null===n.renderer)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return n.renderer})(en),ii),li=((e,t,n,r,i)=>()=>{const o=new WeakMap;let a=null,s=null;return{set start(e){a=e},set stop(e){s=e},render(l,u,c){const h=o.get(u);return void 0!==h?Promise.resolve(h):(async(l,u,c)=>{let h=n(l);const d=Wt(h,u);if(!d){const e={buffer:h.buffer,channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,loop:h.loop,loopEnd:h.loopEnd,loopStart:h.loopStart,playbackRate:h.playbackRate.value};h=t(u,e),null!==a&&h.start(...a),null!==s&&h.stop(s)}return o.set(u,h),d?await e(u,l.playbackRate,h.playbackRate,c):await r(u,l.playbackRate,h.playbackRate,c),await i(l,u,h,c),h})(l,u,c)}}})(oi,ai,mn,si,Ir),ui=((e,t,n,r,i,o,a,s,l,u,c,h,d)=>(r,f,p,m=null,g=null)=>{const v=new _t.AutomationEventList(p.defaultValue),y=f?(e=>({replay(t){for(const n of e)if("exponentialRampToValue"===n.type){const{endTime:e,value:r}=n;t.exponentialRampToValueAtTime(r,e)}else if("linearRampToValue"===n.type){const{endTime:e,value:r}=n;t.linearRampToValueAtTime(r,e)}else if("setTarget"===n.type){const{startTime:e,target:r,timeConstant:i}=n;t.setTargetAtTime(r,e,i)}else if("setValue"===n.type){const{startTime:e,value:r}=n;t.setValueAtTime(r,e)}else{if("setValueCurve"!==n.type)throw new Error("Can't apply an unknown automation.");{const{duration:e,startTime:r,values:i}=n;t.setValueCurveAtTime(i,r,e)}}}}))(v):null,_={get defaultValue(){return p.defaultValue},get maxValue(){return null===m?p.maxValue:m},get minValue(){return null===g?p.minValue:g},get value(){return p.value},set value(e){p.value=e,_.setValueAtTime(e,r.context.currentTime)},cancelAndHoldAtTime(e){if("function"==typeof p.cancelAndHoldAtTime)null===y&&v.flush(r.context.currentTime),v.add(i(e)),p.cancelAndHoldAtTime(e);else{const t=Array.from(v).pop();null===y&&v.flush(r.context.currentTime),v.add(i(e));const n=Array.from(v).pop();p.cancelScheduledValues(e),t!==n&&void 0!==n&&("exponentialRampToValue"===n.type?p.exponentialRampToValueAtTime(n.value,n.endTime):"linearRampToValue"===n.type?p.linearRampToValueAtTime(n.value,n.endTime):"setValue"===n.type?p.setValueAtTime(n.value,n.startTime):"setValueCurve"===n.type&&p.setValueCurveAtTime(n.values,n.startTime,n.duration))}return _},cancelScheduledValues:e=>(null===y&&v.flush(r.context.currentTime),v.add(o(e)),p.cancelScheduledValues(e),_),exponentialRampToValueAtTime(e,t){if(0===e)throw new RangeError;if(!Number.isFinite(t)||t<0)throw new RangeError;return null===y&&v.flush(r.context.currentTime),v.add(a(e,t)),p.exponentialRampToValueAtTime(e,t),_},linearRampToValueAtTime:(e,t)=>(null===y&&v.flush(r.context.currentTime),v.add(s(e,t)),p.linearRampToValueAtTime(e,t),_),setTargetAtTime:(e,t,n)=>(null===y&&v.flush(r.context.currentTime),v.add(l(e,t,n)),p.setTargetAtTime(e,t,n),_),setValueAtTime:(e,t)=>(null===y&&v.flush(r.context.currentTime),v.add(u(e,t)),p.setValueAtTime(e,t),_),setValueCurveAtTime(e,t,n){const i=e instanceof Float32Array?e:new Float32Array(e);if(null!==h&&"webkitAudioContext"===h.name){const e=t+n,o=r.context.sampleRate,a=Math.ceil(t*o),s=Math.floor(e*o),l=s-a,u=new Float32Array(l);for(let e=0;e<l;e+=1){const r=(i.length-1)/n*((a+e)/o-t),s=Math.floor(r),l=Math.ceil(r);u[e]=s===l?i[s]:(1-(r-s))*i[s]+(1-(l-r))*i[l]}null===y&&v.flush(r.context.currentTime),v.add(c(u,t,n)),p.setValueCurveAtTime(u,t,n);const h=s/o;h<e&&d(_,u[u.length-1],h),d(_,i[i.length-1],e)}else null===y&&v.flush(r.context.currentTime),v.add(c(i,t,n)),p.setValueCurveAtTime(i,t,n);return _}};return n.set(_,p),t.set(_,r),e(_,y),_})((ci=kt,(e,t)=>{ci.set(e,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:t})}),qr,Et,0,_t.createCancelAndHoldAutomationEvent,_t.createCancelScheduledValuesAutomationEvent,_t.createExponentialRampToValueAutomationEvent,_t.createLinearRampToValueAutomationEvent,_t.createSetTargetAutomationEvent,_t.createSetValueAutomationEvent,_t.createSetValueCurveAutomationEvent,Ur,yr);var ci;const hi=((e,t,n,r,i,o,a,s)=>class extends e{constructor(e,r){const s=o(e),l={...Kt,...r},u=i(s,l),c=a(s),h=c?t():null;super(e,!1,u,h),this._audioBufferSourceNodeRenderer=h,this._isBufferNullified=!1,this._isBufferSet=null!==l.buffer,this._nativeAudioBufferSourceNode=u,this._onended=null,this._playbackRate=n(this,c,u.playbackRate,Qt,Xt)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(e){if(this._nativeAudioBufferSourceNode.buffer=e,null!==e){if(this._isBufferSet)throw r();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(e){this._nativeAudioBufferSourceNode.loop=e}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(e){this._nativeAudioBufferSourceNode.loopEnd=e}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(e){this._nativeAudioBufferSourceNode.loopStart=e}get onended(){return this._onended}set onended(e){const t="function"==typeof e?s(this,e):null;this._nativeAudioBufferSourceNode.onended=t;const n=this._nativeAudioBufferSourceNode.onended;this._onended=null!==n&&n===t?e:n}get playbackRate(){return this._playbackRate}start(e=0,t=0,n){if(this._nativeAudioBufferSourceNode.start(e,t,n),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.start=void 0===n?[e,t]:[e,t,n]),"closed"!==this.context.state){jt(this);const e=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",e),Zt(this)&&qt(this)};this._nativeAudioBufferSourceNode.addEventListener("ended",e)}}stop(e=0){this._nativeAudioBufferSourceNode.stop(e),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=e)}})(Hr,li,ui,qn,ai,Vr,zr,kr),di=((e,t,n,r,i,o,a,s)=>class extends e{constructor(e,t){const n=o(e),r=a(n),l=i(n,t,r);super(e,!1,l,r?(e=>{let t=null;return{render:(n,r,i)=>(null===t&&(t=(async(t,n,r)=>{const i=n.destination;return await e(t,n,i,r),i})(n,r,i)),t)}})(s):null),this._isNodeOfNativeOfflineAudioContext=r,this._nativeAudioDestinationNode=l}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(e){if(this._isNodeOfNativeOfflineAudioContext)throw r();if(e>this._nativeAudioDestinationNode.maxChannelCount)throw n();this._nativeAudioDestinationNode.channelCount=e}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(e){if(this._isNodeOfNativeOfflineAudioContext)throw r();this._nativeAudioDestinationNode.channelCountMode=e}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}})(Hr,0,Gt,qn,((e,t)=>(n,r,i)=>{const o=n.destination;if(o.channelCount!==r)try{o.channelCount=r}catch{}i&&"explicit"!==o.channelCountMode&&(o.channelCountMode="explicit"),0===o.maxChannelCount&&Object.defineProperty(o,"maxChannelCount",{value:r});const a=e(n,{channelCount:r,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,gain:1});return t(a,"channelCount",(e=>()=>e.call(a)),(e=>t=>{e.call(a,t);try{o.channelCount=t}catch(e){if(t>o.maxChannelCount)throw e}})),t(a,"channelCountMode",(e=>()=>e.call(a)),(e=>t=>{e.call(a,t),o.channelCountMode=t})),t(a,"channelInterpretation",(e=>()=>e.call(a)),(e=>t=>{e.call(a,t),o.channelInterpretation=t})),Object.defineProperty(a,"maxChannelCount",{get:()=>o.maxChannelCount}),a.connect(o),a})(ir,vr),Vr,zr,Ir),fi=((e,t,n,r,i)=>()=>{const o=new WeakMap;return{render(a,s,l){const u=o.get(s);return void 0!==u?Promise.resolve(u):(async(a,s,l)=>{let u=n(a);const c=Wt(u,s);if(!c){const e={Q:u.Q.value,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,detune:u.detune.value,frequency:u.frequency.value,gain:u.gain.value,type:u.type};u=t(s,e)}return o.set(s,u),c?(await e(s,a.Q,u.Q,l),await e(s,a.detune,u.detune,l),await e(s,a.frequency,u.frequency,l),await e(s,a.gain,u.gain,l)):(await r(s,a.Q,u.Q,l),await r(s,a.detune,u.detune,l),await r(s,a.frequency,u.frequency,l),await r(s,a.gain,u.gain,l)),await i(a,s,u,l),u})(a,s,l)}}})(oi,er,mn,si,Ir),pi=(e=>(t,n)=>e.set(t,n))(Tr),mi=((e,t,n,r,i,o,a,s)=>class extends e{constructor(e,r){const l=o(e),u={...Nn,...r},c=i(l,u),h=a(l);super(e,!1,c,h?n():null),this._Q=t(this,h,c.Q,Qt,Xt),this._detune=t(this,h,c.detune,1200*Math.log2(Qt),-1200*Math.log2(Qt)),this._frequency=t(this,h,c.frequency,e.sampleRate/2,0),this._gain=t(this,h,c.gain,40*Math.log10(Qt),Xt),this._nativeBiquadFilterNode=c,s(this,1)}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(e){this._nativeBiquadFilterNode.type=e}getFrequencyResponse(e,t,n){try{this._nativeBiquadFilterNode.getFrequencyResponse(e,t,n)}catch(e){if(11===e.code)throw r();throw e}if(e.length!==t.length||t.length!==n.length)throw r()}})(Hr,ui,fi,Bn,er,Vr,zr,pi),gi=((e,t)=>(n,r,i)=>{const o=new Set;return n.connect=(s=n.connect,(i,a=0,l=0)=>{const u=0===o.size;if(t(i))return s.call(n,i,a,l),e(o,[i,a,l],(e=>e[0]===i&&e[1]===a&&e[2]===l),!0),u&&r(),i;s.call(n,i,a),e(o,[i,a],(e=>e[0]===i&&e[1]===a),!0),u&&r()}),n.disconnect=(a=n.disconnect,(e,r,s)=>{const l=o.size>0;if(void 0===e)a.apply(n),o.clear();else if("number"==typeof e){a.call(n,e);for(const t of o)t[1]===e&&o.delete(t)}else{t(e)?a.call(n,e,r,s):a.call(n,e,r);for(const t of o)t[0]!==e||void 0!==r&&t[1]!==r||void 0!==s&&t[2]!==s||o.delete(t)}const u=0===o.size;l&&u&&i()}),n;var a,s})(an,$r),vi=((e,t)=>(n,r)=>{const i=n.createChannelMerger(r.numberOfInputs);return null!==e&&"webkitAudioContext"===e.name&&t(n,i),Yn(i,r),i})(Ur,((e,t)=>(n,r)=>{r.channelCount=1,r.channelCountMode="explicit",Object.defineProperty(r,"channelCount",{get:()=>1,set:()=>{throw e()}}),Object.defineProperty(r,"channelCountMode",{get:()=>"explicit",set:()=>{throw e()}});const i=n.createBufferSource();t(r,(()=>{const e=r.numberOfInputs;for(let t=0;t<e;t+=1)i.connect(r,0,t)}),(()=>i.disconnect(r)))})(qn,gi)),yi=((e,t,n,r,i)=>class extends e{constructor(e,o){const a=r(e),s={...Dn,...o};super(e,!1,n(a,s),i(a)?t():null)}})(Hr,((e,t,n)=>()=>{const r=new WeakMap;return{render(i,o,a){const s=r.get(o);return void 0!==s?Promise.resolve(s):(async(i,o,a)=>{let s=t(i);if(!Wt(s,o)){const t={channelCount:s.channelCount,channelCountMode:s.channelCountMode,channelInterpretation:s.channelInterpretation,numberOfInputs:s.numberOfInputs};s=e(o,t)}return r.set(o,s),await n(i,o,s,a),s})(i,o,a)}}})(vi,mn,Ir),vi,Vr,zr),_i=((e,t,n,r,i,o)=>class extends e{constructor(e,o){const a=r(e),s=(e=>({...e,channelCount:e.numberOfOutputs}))({...Pn,...o});super(e,!1,n(a,s),i(a)?t():null)}})(Hr,((e,t,n)=>()=>{const r=new WeakMap;return{render(i,o,a){const s=r.get(o);return void 0!==s?Promise.resolve(s):(async(i,o,a)=>{let s=t(i);if(!Wt(s,o)){const t={channelCount:s.channelCount,channelCountMode:s.channelCountMode,channelInterpretation:s.channelInterpretation,numberOfOutputs:s.numberOfOutputs};s=e(o,t)}return r.set(o,s),await n(i,o,s,a),s})(i,o,a)}}})(tr,mn,Ir),tr,Vr,zr),wi=((e,t,n,r)=>(i,{offset:o,...a})=>{const s=i.createBuffer(1,2,44100),l=t(i,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),u=n(i,{...a,gain:o}),c=s.getChannelData(0);c[0]=1,c[1]=1,l.buffer=s,l.loop=!0;const h={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(e){u.channelCount=e},get channelCountMode(){return u.channelCountMode},set channelCountMode(e){u.channelCountMode=e},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(e){u.channelInterpretation=e},get context(){return u.context},get inputs(){return[]},get numberOfInputs(){return l.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get offset(){return u.gain},get onended(){return l.onended},set onended(e){l.onended=e},addEventListener:(...e)=>l.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>l.dispatchEvent(e[0]),removeEventListener:(...e)=>l.removeEventListener(e[0],e[1],e[2]),start(e=0){l.start.call(l,e)},stop(e=0){l.stop.call(l,e)}};return e(i,l),r(nr(h,u),(()=>l.connect(u)),(()=>l.disconnect(u)))})(ri,ai,ir,gi),bi=((e,t,n,r,i)=>(o,a)=>{if(void 0===o.createConstantSource)return n(o,a);const s=o.createConstantSource();return Yn(s,a),Qn(s,a,"offset"),t(r,(()=>r(o)))||Zn(s),t(i,(()=>i(o)))||Kn(s),e(o,s),s})(ri,Or,wi,_r,br),xi=((e,t,n,r,i,o,a)=>class extends e{constructor(e,a){const s=i(e),l={...Rn,...a},u=r(s,l),c=o(s),h=c?n():null;super(e,!1,u,h),this._constantSourceNodeRenderer=h,this._nativeConstantSourceNode=u,this._offset=t(this,c,u.offset,Qt,Xt),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(e){const t="function"==typeof e?a(this,e):null;this._nativeConstantSourceNode.onended=t;const n=this._nativeConstantSourceNode.onended;this._onended=null!==n&&n===t?e:n}start(e=0){if(this._nativeConstantSourceNode.start(e),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.start=e),"closed"!==this.context.state){jt(this);const e=()=>{this._nativeConstantSourceNode.removeEventListener("ended",e),Zt(this)&&qt(this)};this._nativeConstantSourceNode.addEventListener("ended",e)}}stop(e=0){this._nativeConstantSourceNode.stop(e),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=e)}})(Hr,ui,((e,t,n,r,i)=>()=>{const o=new WeakMap;let a=null,s=null;return{set start(e){a=e},set stop(e){s=e},render(l,u,c){const h=o.get(u);return void 0!==h?Promise.resolve(h):(async(l,u,c)=>{let h=n(l);const d=Wt(h,u);if(!d){const e={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,offset:h.offset.value};h=t(u,e),null!==a&&h.start(a),null!==s&&h.stop(s)}return o.set(u,h),d?await e(u,l.offset,h.offset,c):await r(u,l.offset,h.offset,c),await i(l,u,h,c),h})(l,u,c)}}})(oi,bi,mn,si,Ir),bi,Vr,zr,kr),ki=((e,t)=>(n,r)=>{const i=n.createConvolver();if(Yn(i,r),r.disableNormalization===i.normalize&&(i.normalize=!r.disableNormalization),Hn(i,r,"buffer"),r.channelCount>2)throw e();if(t(i,"channelCount",(e=>()=>e.call(i)),(t=>n=>{if(n>2)throw e();return t.call(i,n)})),"max"===r.channelCountMode)throw e();return t(i,"channelCountMode",(e=>()=>e.call(i)),(t=>n=>{if("max"===n)throw e();return t.call(i,n)})),i})(lr,vr),Ei=((e,t,n,r,i,o)=>class extends e{constructor(e,a){const s=r(e),l={...In,...a},u=n(s,l);super(e,!1,u,i(s)?t():null),this._isBufferNullified=!1,this._nativeConvolverNode=u,null!==l.buffer&&o(this,l.buffer.duration)}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(e){if(this._nativeConvolverNode.buffer=e,null===e&&null!==this._nativeConvolverNode.buffer){const e=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=e.createBuffer(1,1,44100),this._isBufferNullified=!0,o(this,0)}else this._isBufferNullified=!1,o(this,null===this._nativeConvolverNode.buffer?0:this._nativeConvolverNode.buffer.duration)}get normalize(){return this._nativeConvolverNode.normalize}set normalize(e){this._nativeConvolverNode.normalize=e}})(Hr,((e,t,n)=>()=>{const r=new WeakMap;return{render(i,o,a){const s=r.get(o);return void 0!==s?Promise.resolve(s):(async(i,o,a)=>{let s=t(i);if(!Wt(s,o)){const t={buffer:s.buffer,channelCount:s.channelCount,channelCountMode:s.channelCountMode,channelInterpretation:s.channelInterpretation,disableNormalization:!s.normalize};s=e(o,t)}return r.set(o,s),un(s)?await n(i,o,s.inputs[0],a):await n(i,o,s,a),s})(i,o,a)}}})(ki,mn,Ir),ki,Vr,zr,pi),Si=((e,t,n,r,i,o,a)=>class extends e{constructor(e,s){const l=i(e),u={...Vn,...s},c=r(l,u),h=o(l);super(e,!1,c,h?n(u.maxDelayTime):null),this._delayTime=t(this,h,c.delayTime),a(this,u.maxDelayTime)}get delayTime(){return this._delayTime}})(Hr,ui,((e,t,n,r,i)=>o=>{const a=new WeakMap;return{render(s,l,u){const c=a.get(l);return void 0!==c?Promise.resolve(c):(async(s,l,u)=>{let c=n(s);const h=Wt(c,l);if(!h){const e={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,delayTime:c.delayTime.value,maxDelayTime:o};c=t(l,e)}return a.set(l,c),h?await e(l,s.delayTime,c.delayTime,u):await r(l,s.delayTime,c.delayTime,u),await i(s,l,c,u),c})(s,l,u)}}})(oi,rr,mn,si,Ir),rr,Vr,zr,pi),Ci=(e=>(t,n)=>{const r=t.createDynamicsCompressor();if(Yn(r,n),n.channelCount>2)throw e();if("max"===n.channelCountMode)throw e();return Qn(r,n,"attack"),Qn(r,n,"knee"),Qn(r,n,"ratio"),Qn(r,n,"release"),Qn(r,n,"threshold"),r})(lr),Ti=((e,t,n,r,i,o,a,s)=>class extends e{constructor(e,i){const l=o(e),u={...jn,...i},c=r(l,u),h=a(l);super(e,!1,c,h?n():null),this._attack=t(this,h,c.attack),this._knee=t(this,h,c.knee),this._nativeDynamicsCompressorNode=c,this._ratio=t(this,h,c.ratio),this._release=t(this,h,c.release),this._threshold=t(this,h,c.threshold),s(this,.006)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(e){const t=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=e,e>2)throw this._nativeDynamicsCompressorNode.channelCount=t,i()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(e){const t=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=e,"max"===e)throw this._nativeDynamicsCompressorNode.channelCountMode=t,i()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}})(Hr,ui,((e,t,n,r,i)=>()=>{const o=new WeakMap;return{render(a,s,l){const u=o.get(s);return void 0!==u?Promise.resolve(u):(async(a,s,l)=>{let u=n(a);const c=Wt(u,s);if(!c){const e={attack:u.attack.value,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,knee:u.knee.value,ratio:u.ratio.value,release:u.release.value,threshold:u.threshold.value};u=t(s,e)}return o.set(s,u),c?(await e(s,a.attack,u.attack,l),await e(s,a.knee,u.knee,l),await e(s,a.ratio,u.ratio,l),await e(s,a.release,u.release,l),await e(s,a.threshold,u.threshold,l)):(await r(s,a.attack,u.attack,l),await r(s,a.knee,u.knee,l),await r(s,a.ratio,u.ratio,l),await r(s,a.release,u.release,l),await r(s,a.threshold,u.threshold,l)),await i(a,s,u,l),u})(a,s,l)}}})(oi,Ci,mn,si,Ir),Ci,lr,Vr,zr,pi),Ai=((e,t,n,r,i,o)=>class extends e{constructor(e,a){const s=i(e),l={...zn,...a},u=r(s,l),c=o(s);super(e,!1,u,c?n():null),this._gain=t(this,c,u.gain,Qt,Xt)}get gain(){return this._gain}})(Hr,ui,((e,t,n,r,i)=>()=>{const o=new WeakMap;return{render(a,s,l){const u=o.get(s);return void 0!==u?Promise.resolve(u):(async(a,s,l)=>{let u=n(a);const c=Wt(u,s);if(!c){const e={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,gain:u.gain.value};u=t(s,e)}return o.set(s,u),c?await e(s,a.gain,u.gain,l):await r(s,a.gain,u.gain,l),await i(a,s,u,l),u})(a,s,l)}}})(oi,ir,mn,si,Ir),ir,Vr,zr),Oi=((e,t,n,r)=>(i,o,{channelCount:a,channelCountMode:s,channelInterpretation:l,feedback:u,feedforward:c})=>{const h=Jn(o,i.sampleRate),d=u instanceof Float64Array?u:new Float64Array(u),f=c instanceof Float64Array?c:new Float64Array(c),p=d.length,m=f.length,g=Math.min(p,m);if(0===p||p>20)throw r();if(0===d[0])throw t();if(0===m||m>20)throw r();if(0===f[0])throw t();if(1!==d[0]){for(let e=0;e<m;e+=1)f[e]/=d[0];for(let e=1;e<p;e+=1)d[e]/=d[0]}const v=n(i,h,a,a);v.channelCount=a,v.channelCountMode=s,v.channelInterpretation=l;const y=[],_=[],w=[];for(let e=0;e<a;e+=1){y.push(0);const e=new Float32Array(32),t=new Float32Array(32);e.fill(0),t.fill(0),_.push(e),w.push(t)}v.onaudioprocess=e=>{const t=e.inputBuffer,n=e.outputBuffer,r=t.numberOfChannels;for(let e=0;e<r;e+=1){const r=t.getChannelData(e),i=n.getChannelData(e);y[e]=Wn(d,p,f,m,g,_[e],w[e],y[e],32,r,i)}};const b=i.sampleRate/2;return nr({get bufferSize(){return h},get channelCount(){return v.channelCount},set channelCount(e){v.channelCount=e},get channelCountMode(){return v.channelCountMode},set channelCountMode(e){v.channelCountMode=e},get channelInterpretation(){return v.channelInterpretation},set channelInterpretation(e){v.channelInterpretation=e},get context(){return v.context},get inputs(){return[v]},get numberOfInputs(){return v.numberOfInputs},get numberOfOutputs(){return v.numberOfOutputs},addEventListener:(...e)=>v.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>v.dispatchEvent(e[0]),getFrequencyResponse(t,n,r){if(t.length!==n.length||n.length!==r.length)throw e();const i=t.length;for(let e=0;e<i;e+=1){const i=-Math.PI*(t[e]/b),o=[Math.cos(i),Math.sin(i)],a=or(ar(f,o),ar(d,o));n[e]=Math.sqrt(a[0]*a[0]+a[1]*a[1]),r[e]=Math.atan2(a[1],a[0])}},removeEventListener:(...e)=>v.removeEventListener(e[0],e[1],e[2])},v)})(Bn,qn,sr,lr),Mi=((e,t,n,r)=>i=>e(Gn,(()=>Gn(i)))?Promise.resolve(e(r,r)).then((e=>{if(!e){const e=n(i,512,0,1);i.oncomplete=()=>{e.onaudioprocess=null,e.disconnect()},e.onaudioprocess=()=>i.currentTime,e.connect(i.destination)}return i.startRendering()})):new Promise((e=>{const n=t(i,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});i.oncomplete=t=>{n.disconnect(),e(t.renderedBuffer)},n.connect(i.destination),i.startRendering()})))(Or,ir,sr,((e,t)=>()=>{if(null===t)return Promise.resolve(!1);const n=new t(1,1,44100),r=e(n,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise((e=>{n.oncomplete=()=>{r.disconnect(),e(0!==n.currentTime)},n.startRendering()}))})(ir,jr)),Ni=((e,t,n,r,i)=>(o,a)=>{const s=new WeakMap;let l=null;return{render(u,c,h){const d=s.get(c);return void 0!==d?Promise.resolve(d):(async(u,c,h)=>{let d=null,f=t(u);const p=Wt(f,c);if(void 0===c.createIIRFilter?d=e(c,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):p||(f=c.createIIRFilter(a,o)),s.set(c,null===d?f:d),null!==d){if(null===l){if(null===n)throw new Error("Missing the native OfflineAudioContext constructor.");const e=new n(u.context.destination.channelCount,u.context.length,c.sampleRate);l=(async()=>(await r(u,e,e.destination,h),((e,t,n,r)=>{const i=n instanceof Float64Array?n:new Float64Array(n),o=r instanceof Float64Array?r:new Float64Array(r),a=i.length,s=o.length,l=Math.min(a,s);if(1!==i[0]){for(let e=0;e<a;e+=1)o[e]/=i[0];for(let e=1;e<s;e+=1)i[e]/=i[0]}const u=new Float32Array(32),c=new Float32Array(32),h=t.createBuffer(e.numberOfChannels,e.length,e.sampleRate),d=e.numberOfChannels;for(let t=0;t<d;t+=1){const n=e.getChannelData(t),r=h.getChannelData(t);u.fill(0),c.fill(0),Wn(i,a,o,s,l,u,c,0,32,n,r)}return h})(await i(e),c,o,a)))()}const e=await l;return d.buffer=e,d.start(0),d}return await r(u,c,f,h),f})(u,c,h)}}})(ai,mn,jr,Ir,Mi),Di=((e,t,n,r,i,o)=>class extends e{constructor(e,a){const s=r(e),l=i(s),u={...Un,...a},c=t(s,l?null:e.baseLatency,u);super(e,!1,c,l?n(u.feedback,u.feedforward):null),(e=>{var t;e.getFrequencyResponse=(t=e.getFrequencyResponse,(n,r,i)=>{if(n.length!==r.length||r.length!==i.length)throw Bn();return t.call(e,n,r,i)})})(c),this._nativeIIRFilterNode=c,o(this,1)}getFrequencyResponse(e,t,n){return this._nativeIIRFilterNode.getFrequencyResponse(e,t,n)}})(Hr,(e=>(t,n,r)=>{if(void 0===t.createIIRFilter)return e(t,n,r);const i=t.createIIRFilter(r.feedforward,r.feedback);return Yn(i,r),i})(Oi),Ni,Vr,zr,pi),Pi=((e,t,n,r,i)=>(o,a)=>{const s=a.listener,{forwardX:l,forwardY:u,forwardZ:c,positionX:h,positionY:d,positionZ:f,upX:p,upY:m,upZ:g}=void 0===s.forwardX?(()=>{const l=t(a,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),u=i(a),c=r(a,256,9,0),h=(t,r)=>{const i=n(a,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:r});return i.connect(l,0,t),i.start(),Object.defineProperty(i.offset,"defaultValue",{get:()=>r}),e({context:o},u,i.offset,Qt,Xt)};let d=[0,0,-1,0,1,0],f=[0,0,0];return c.onaudioprocess=({inputBuffer:e})=>{const t=[e.getChannelData(0)[0],e.getChannelData(1)[0],e.getChannelData(2)[0],e.getChannelData(3)[0],e.getChannelData(4)[0],e.getChannelData(5)[0]];t.some(((e,t)=>e!==d[t]))&&(s.setOrientation(...t),d=t);const n=[e.getChannelData(6)[0],e.getChannelData(7)[0],e.getChannelData(8)[0]];n.some(((e,t)=>e!==f[t]))&&(s.setPosition(...n),f=n)},l.connect(c),{forwardX:h(0,0),forwardY:h(1,0),forwardZ:h(2,-1),positionX:h(6,0),positionY:h(7,0),positionZ:h(8,0),upX:h(3,0),upY:h(4,1),upZ:h(5,0)}})():s;return{get forwardX(){return l},get forwardY(){return u},get forwardZ(){return c},get positionX(){return h},get positionY(){return d},get positionZ(){return f},get upX(){return p},get upY(){return m},get upZ(){return g}}})(ui,vi,bi,sr,zr),Ri=new WeakMap,Ii=((e,t,n,r,i,o)=>class extends n{constructor(n,o){super(n),this._nativeContext=n,St.set(this,n),r(n)&&i.set(n,new Set),this._destination=new e(this,o),this._listener=t(this,n),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(e){const t="function"==typeof e?o(this,e):null;this._nativeContext.onstatechange=t;const n=this._nativeContext.onstatechange;this._onstatechange=null!==n&&n===t?e:n}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}})(di,Pi,Br,zr,Ri,kr),Li=((e,t,n,r,i,o)=>(a,s)=>{const l=a.createOscillator();return Yn(l,s),Qn(l,s,"detune"),Qn(l,s,"frequency"),void 0!==s.periodicWave?l.setPeriodicWave(s.periodicWave):Hn(l,s,"type"),t(n,(()=>n(a)))||Zn(l),t(r,(()=>r(a)))||o(l,a),t(i,(()=>i(a)))||Kn(l),e(a,l),l})(ri,Or,_r,wr,br,xr),Vi=((e,t,n,r,i)=>()=>{const o=new WeakMap;let a=null,s=null,l=null;return{set periodicWave(e){a=e},set start(e){s=e},set stop(e){l=e},render(u,c,h){const d=o.get(c);return void 0!==d?Promise.resolve(d):(async(u,c,h)=>{let d=n(u);const f=Wt(d,c);if(!f){const e={channelCount:d.channelCount,channelCountMode:d.channelCountMode,channelInterpretation:d.channelInterpretation,detune:d.detune.value,frequency:d.frequency.value,periodicWave:null===a?void 0:a,type:d.type};d=t(c,e),null!==s&&d.start(s),null!==l&&d.stop(l)}return o.set(c,d),f?(await e(c,u.detune,d.detune,h),await e(c,u.frequency,d.frequency,h)):(await r(c,u.detune,d.detune,h),await r(c,u.frequency,d.frequency,h)),await i(u,c,d,h),d})(u,c,h)}}})(oi,Li,mn,si,Ir),Fi=((e,t,n,r,i,o,a)=>class extends e{constructor(e,a){const s=i(e),l={...cr,...a},u=n(s,l),c=o(s),h=c?r():null,d=e.sampleRate/2;super(e,!1,u,h),this._detune=t(this,c,u.detune,153600,-153600),this._frequency=t(this,c,u.frequency,d,-d),this._nativeOscillatorNode=u,this._onended=null,this._oscillatorNodeRenderer=h,null!==this._oscillatorNodeRenderer&&void 0!==l.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=l.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(e){const t="function"==typeof e?a(this,e):null;this._nativeOscillatorNode.onended=t;const n=this._nativeOscillatorNode.onended;this._onended=null!==n&&n===t?e:n}get type(){return this._nativeOscillatorNode.type}set type(e){this._nativeOscillatorNode.type=e,null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(e){this._nativeOscillatorNode.setPeriodicWave(e),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=e)}start(e=0){if(this._nativeOscillatorNode.start(e),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.start=e),"closed"!==this.context.state){jt(this);const e=()=>{this._nativeOscillatorNode.removeEventListener("ended",e),Zt(this)&&qt(this)};this._nativeOscillatorNode.addEventListener("ended",e)}}stop(e=0){this._nativeOscillatorNode.stop(e),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=e)}})(Hr,ui,Li,Vi,Vr,zr,kr),ji=(e=>(t,n)=>{const r=e(t,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),i=t.createBuffer(1,2,44100);return r.buffer=i,r.loop=!0,r.connect(n),r.start(),()=>{r.stop(),r.disconnect(n)}})(ai),zi=((e,t,n,r,i)=>(o,{curve:a,oversample:s,...l})=>{const u=o.createWaveShaper(),c=o.createWaveShaper();Yn(u,l),Yn(c,l);const h=n(o,{...l,gain:1}),d=n(o,{...l,gain:-1}),f=n(o,{...l,gain:1}),p=n(o,{...l,gain:-1});let m=null,g=!1,v=null;const y={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(e){h.channelCount=e,d.channelCount=e,u.channelCount=e,f.channelCount=e,c.channelCount=e,p.channelCount=e},get channelCountMode(){return u.channelCountMode},set channelCountMode(e){h.channelCountMode=e,d.channelCountMode=e,u.channelCountMode=e,f.channelCountMode=e,c.channelCountMode=e,p.channelCountMode=e},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(e){h.channelInterpretation=e,d.channelInterpretation=e,u.channelInterpretation=e,f.channelInterpretation=e,c.channelInterpretation=e,p.channelInterpretation=e},get context(){return u.context},get curve(){return v},set curve(n){if(null!==n&&n.length<2)throw t();if(null===n)u.curve=n,c.curve=n;else{const e=n.length,t=new Float32Array(e+2-e%2),r=new Float32Array(e+2-e%2);t[0]=n[0],r[0]=-n[e-1];const i=Math.ceil((e+1)/2),o=(e+1)/2-1;for(let a=1;a<i;a+=1){const s=a/i*o,l=Math.floor(s),u=Math.ceil(s);t[a]=l===u?n[l]:(1-(s-l))*n[l]+(1-(u-s))*n[u],r[a]=l===u?-n[e-1-l]:-(1-(s-l))*n[e-1-l]-(1-(u-s))*n[e-1-u]}t[i]=e%2==1?n[i-1]:(n[i-2]+n[i-1])/2,u.curve=t,c.curve=r}v=n,g&&(r(v)&&null===m?m=e(o,h):null!==m&&(m(),m=null))},get inputs(){return[h]},get numberOfInputs(){return u.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get oversample(){return u.oversample},set oversample(e){u.oversample=e,c.oversample=e},addEventListener:(...e)=>h.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>h.dispatchEvent(e[0]),removeEventListener:(...e)=>h.removeEventListener(e[0],e[1],e[2])};return null!==a&&(y.curve=a instanceof Float32Array?a:new Float32Array(a)),s!==y.oversample&&(y.oversample=s),i(nr(y,f),(()=>{h.connect(u).connect(f),h.connect(d).connect(c).connect(p).connect(f),g=!0,r(v)&&(m=e(o,h))}),(()=>{h.disconnect(u),u.disconnect(f),h.disconnect(d),d.disconnect(c),c.disconnect(p),p.disconnect(f),g=!1,null!==m&&(m(),m=null)}))})(ji,qn,ir,gr,gi),qi=((e,t,n,r,i,o,a)=>(s,l)=>{const u=s.createWaveShaper();if(null!==o&&"webkitAudioContext"===o.name&&void 0===s.createGain().gain.automationRate)return n(s,l);Yn(u,l);const c=null===l.curve||l.curve instanceof Float32Array?l.curve:new Float32Array(l.curve);if(null!==c&&c.length<2)throw t();Hn(u,{curve:c},"curve"),Hn(u,l,"oversample");let h=null,d=!1;return a(u,"curve",(e=>()=>e.call(u)),(t=>n=>(t.call(u,n),d&&(r(n)&&null===h?h=e(s,u):r(n)||null===h||(h(),h=null)),n))),i(u,(()=>{d=!0,r(u.curve)&&(h=e(s,u))}),(()=>{d=!1,null!==h&&(h(),h=null)}))})(ji,qn,zi,gr,gi,Ur,vr),Bi=(No=((e,t,n,r,i,o,a,s,l)=>(u,{coneInnerAngle:c,coneOuterAngle:h,coneOuterGain:d,distanceModel:f,maxDistance:p,orientationX:m,orientationY:g,orientationZ:v,panningModel:y,positionX:_,positionY:w,positionZ:b,refDistance:x,rolloffFactor:k,...E})=>{const S=u.createPanner();if(E.channelCount>2)throw a();if("max"===E.channelCountMode)throw a();Yn(S,E);const C={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},T=n(u,{...C,channelInterpretation:"speakers",numberOfInputs:6}),A=r(u,{...E,gain:1}),O=r(u,{...C,gain:1}),M=r(u,{...C,gain:0}),N=r(u,{...C,gain:0}),D=r(u,{...C,gain:0}),P=r(u,{...C,gain:0}),R=r(u,{...C,gain:0}),I=i(u,256,6,1),L=o(u,{...C,curve:new Float32Array([1,1]),oversample:"none"});let V=[m,g,v],F=[_,w,b];I.onaudioprocess=({inputBuffer:e})=>{const t=[e.getChannelData(0)[0],e.getChannelData(1)[0],e.getChannelData(2)[0]];t.some(((e,t)=>e!==V[t]))&&(S.setOrientation(...t),V=t);const n=[e.getChannelData(3)[0],e.getChannelData(4)[0],e.getChannelData(5)[0]];n.some(((e,t)=>e!==F[t]))&&(S.setPosition(...n),F=n)},Object.defineProperty(M.gain,"defaultValue",{get:()=>0}),Object.defineProperty(N.gain,"defaultValue",{get:()=>0}),Object.defineProperty(D.gain,"defaultValue",{get:()=>0}),Object.defineProperty(P.gain,"defaultValue",{get:()=>0}),Object.defineProperty(R.gain,"defaultValue",{get:()=>0});const j={get bufferSize(){},get channelCount(){return S.channelCount},set channelCount(e){if(e>2)throw a();A.channelCount=e,S.channelCount=e},get channelCountMode(){return S.channelCountMode},set channelCountMode(e){if("max"===e)throw a();A.channelCountMode=e,S.channelCountMode=e},get channelInterpretation(){return S.channelInterpretation},set channelInterpretation(e){A.channelInterpretation=e,S.channelInterpretation=e},get coneInnerAngle(){return S.coneInnerAngle},set coneInnerAngle(e){S.coneInnerAngle=e},get coneOuterAngle(){return S.coneOuterAngle},set coneOuterAngle(e){S.coneOuterAngle=e},get coneOuterGain(){return S.coneOuterGain},set coneOuterGain(e){if(e<0||e>1)throw t();S.coneOuterGain=e},get context(){return S.context},get distanceModel(){return S.distanceModel},set distanceModel(e){S.distanceModel=e},get inputs(){return[A]},get maxDistance(){return S.maxDistance},set maxDistance(e){if(e<0)throw new RangeError;S.maxDistance=e},get numberOfInputs(){return S.numberOfInputs},get numberOfOutputs(){return S.numberOfOutputs},get orientationX(){return O.gain},get orientationY(){return M.gain},get orientationZ(){return N.gain},get panningModel(){return S.panningModel},set panningModel(e){S.panningModel=e},get positionX(){return D.gain},get positionY(){return P.gain},get positionZ(){return R.gain},get refDistance(){return S.refDistance},set refDistance(e){if(e<0)throw new RangeError;S.refDistance=e},get rolloffFactor(){return S.rolloffFactor},set rolloffFactor(e){if(e<0)throw new RangeError;S.rolloffFactor=e},addEventListener:(...e)=>A.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>A.dispatchEvent(e[0]),removeEventListener:(...e)=>A.removeEventListener(e[0],e[1],e[2])};return c!==j.coneInnerAngle&&(j.coneInnerAngle=c),h!==j.coneOuterAngle&&(j.coneOuterAngle=h),d!==j.coneOuterGain&&(j.coneOuterGain=d),f!==j.distanceModel&&(j.distanceModel=f),p!==j.maxDistance&&(j.maxDistance=p),m!==j.orientationX.value&&(j.orientationX.value=m),g!==j.orientationY.value&&(j.orientationY.value=g),v!==j.orientationZ.value&&(j.orientationZ.value=v),y!==j.panningModel&&(j.panningModel=y),_!==j.positionX.value&&(j.positionX.value=_),w!==j.positionY.value&&(j.positionY.value=w),b!==j.positionZ.value&&(j.positionZ.value=b),x!==j.refDistance&&(j.refDistance=x),k!==j.rolloffFactor&&(j.rolloffFactor=k),1===V[0]&&0===V[1]&&0===V[2]||S.setOrientation(...V),0===F[0]&&0===F[1]&&0===F[2]||S.setPosition(...F),l(nr(j,S),(()=>{A.connect(S),e(A,L,0,0),L.connect(O).connect(T,0,0),L.connect(M).connect(T,0,1),L.connect(N).connect(T,0,2),L.connect(D).connect(T,0,3),L.connect(P).connect(T,0,4),L.connect(R).connect(T,0,5),T.connect(I).connect(u.destination)}),(()=>{A.disconnect(S),s(A,L,0,0),L.disconnect(O),O.disconnect(T),L.disconnect(M),M.disconnect(T),L.disconnect(N),N.disconnect(T),L.disconnect(D),D.disconnect(T),L.disconnect(P),P.disconnect(T),L.disconnect(R),R.disconnect(T),T.disconnect(I),I.disconnect(u.destination)}))})(cn,qn,vi,ir,sr,qi,lr,pn,gi),(e,t)=>{const n=e.createPanner();return void 0===n.orientationX?No(e,t):(Yn(n,t),Qn(n,t,"orientationX"),Qn(n,t,"orientationY"),Qn(n,t,"orientationZ"),Qn(n,t,"positionX"),Qn(n,t,"positionY"),Qn(n,t,"positionZ"),Hn(n,t,"coneInnerAngle"),Hn(n,t,"coneOuterAngle"),Hn(n,t,"coneOuterGain"),Hn(n,t,"distanceModel"),Hn(n,t,"maxDistance"),Hn(n,t,"panningModel"),Hn(n,t,"refDistance"),Hn(n,t,"rolloffFactor"),n)}),Ui=((e,t,n,r,i,o,a,s,l,u)=>()=>{const c=new WeakMap;let h=null;return{render(d,f,p){const m=c.get(f);return void 0!==m?Promise.resolve(m):(async(d,f,p)=>{let m=null,g=o(d);const v={channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation},y={...v,coneInnerAngle:g.coneInnerAngle,coneOuterAngle:g.coneOuterAngle,coneOuterGain:g.coneOuterGain,distanceModel:g.distanceModel,maxDistance:g.maxDistance,panningModel:g.panningModel,refDistance:g.refDistance,rolloffFactor:g.rolloffFactor},_=Wt(g,f);if("bufferSize"in g)m=r(f,{...v,gain:1});else if(!_){const e={...y,orientationX:g.orientationX.value,orientationY:g.orientationY.value,orientationZ:g.orientationZ.value,positionX:g.positionX.value,positionY:g.positionY.value,positionZ:g.positionZ.value};g=i(f,e)}if(c.set(f,null===m?g:m),null!==m){if(null===h){if(null===a)throw new Error("Missing the native OfflineAudioContext constructor.");const e=new a(6,d.context.length,f.sampleRate),r=t(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});r.connect(e.destination),h=(async()=>{const t=await Promise.all([d.orientationX,d.orientationY,d.orientationZ,d.positionX,d.positionY,d.positionZ].map((async(t,r)=>{const i=n(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:0===r?1:0});return await s(e,t,i.offset,p),i})));for(let e=0;e<6;e+=1)t[e].connect(r,0,e),t[e].start(0);return u(e)})()}const e=await h,o=r(f,{...v,gain:1});await l(d,f,o,p);const c=[];for(let t=0;t<e.numberOfChannels;t+=1)c.push(e.getChannelData(t));let g=[c[0][0],c[1][0],c[2][0]],_=[c[3][0],c[4][0],c[5][0]],w=r(f,{...v,gain:1}),b=i(f,{...y,orientationX:g[0],orientationY:g[1],orientationZ:g[2],positionX:_[0],positionY:_[1],positionZ:_[2]});o.connect(w).connect(b.inputs[0]),b.connect(m);for(let t=128;t<e.length;t+=128){const e=[c[0][t],c[1][t],c[2][t]],n=[c[3][t],c[4][t],c[5][t]];if(e.some(((e,t)=>e!==g[t]))||n.some(((e,t)=>e!==_[t]))){g=e,_=n;const a=t/f.sampleRate;w.gain.setValueAtTime(0,a),w=r(f,{...v,gain:0}),b=i(f,{...y,orientationX:g[0],orientationY:g[1],orientationZ:g[2],positionX:_[0],positionY:_[1],positionZ:_[2]}),w.gain.setValueAtTime(1,a),o.connect(w).connect(b.inputs[0]),b.connect(m)}}return m}return _?(await e(f,d.orientationX,g.orientationX,p),await e(f,d.orientationY,g.orientationY,p),await e(f,d.orientationZ,g.orientationZ,p),await e(f,d.positionX,g.positionX,p),await e(f,d.positionY,g.positionY,p),await e(f,d.positionZ,g.positionZ,p)):(await s(f,d.orientationX,g.orientationX,p),await s(f,d.orientationY,g.orientationY,p),await s(f,d.orientationZ,g.orientationZ,p),await s(f,d.positionX,g.positionX,p),await s(f,d.positionY,g.positionY,p),await s(f,d.positionZ,g.positionZ,p)),un(g)?await l(d,f,g.inputs[0],p):await l(d,f,g,p),g})(d,f,p)}}})(oi,vi,bi,ir,Bi,mn,jr,si,Ir,Mi),Wi=((e,t,n,r,i,o,a)=>class extends e{constructor(e,s){const l=i(e),u={...hr,...s},c=n(l,u),h=o(l);super(e,!1,c,h?r():null),this._nativePannerNode=c,this._orientationX=t(this,h,c.orientationX,Qt,Xt),this._orientationY=t(this,h,c.orientationY,Qt,Xt),this._orientationZ=t(this,h,c.orientationZ,Qt,Xt),this._positionX=t(this,h,c.positionX,Qt,Xt),this._positionY=t(this,h,c.positionY,Qt,Xt),this._positionZ=t(this,h,c.positionZ,Qt,Xt),a(this,1)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(e){this._nativePannerNode.coneInnerAngle=e}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(e){this._nativePannerNode.coneOuterAngle=e}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(e){this._nativePannerNode.coneOuterGain=e}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(e){this._nativePannerNode.distanceModel=e}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(e){this._nativePannerNode.maxDistance=e}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(e){this._nativePannerNode.panningModel=e}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(e){this._nativePannerNode.refDistance=e}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(e){this._nativePannerNode.rolloffFactor=e}})(Hr,ui,Bi,Ui,Vr,zr,pi),$i=((e,t,n,r)=>class r{constructor(r,i){const o=t(r),a=(e=>{const{imag:t,real:n}=e;return void 0===t?void 0===n?{...e,imag:[0,0],real:[0,0]}:{...e,imag:Array.from(n,(()=>0)),real:n}:void 0===n?{...e,imag:t,real:Array.from(t,(()=>0))}:{...e,imag:t,real:n}})({...dr,...i}),s=e(o,a);return n.add(s),s}static[Symbol.hasInstance](e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===r.prototype||n.has(e)}})((e=>(t,{disableNormalization:n,imag:r,real:i})=>{const o=r instanceof Float32Array?r:new Float32Array(r),a=i instanceof Float32Array?i:new Float32Array(i),s=t.createPeriodicWave(a,o,{disableNormalization:n});if(Array.from(r).length<2)throw e();return s})(Gt),Vr,new WeakSet),Gi=((e,t)=>(n,r)=>{const i=r.channelCountMode;if("clamped-max"===i)throw t();if(void 0===n.createStereoPanner)return e(n,r);const o=n.createStereoPanner();return Yn(o,r),Qn(o,r,"pan"),Object.defineProperty(o,"channelCountMode",{get:()=>i,set:e=>{if(e!==i)throw t()}}),o})(((e,t,n,r,i,o)=>{const a=16385,s=new Float32Array([1,1]),l=Math.PI/2,u={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},c={...u,oversample:"none"},h=(e,o,h,d,f)=>{if(1===o)return((e,t,i,o)=>{const h=new Float32Array(a),d=new Float32Array(a);for(let e=0;e<a;e+=1){const t=e/16384*l;h[e]=Math.cos(t),d[e]=Math.sin(t)}const f=n(e,{...u,gain:0}),p=r(e,{...c,curve:h}),m=r(e,{...c,curve:s}),g=n(e,{...u,gain:0}),v=r(e,{...c,curve:d});return{connectGraph(){t.connect(f),t.connect(void 0===m.inputs?m:m.inputs[0]),t.connect(g),m.connect(i),i.connect(void 0===p.inputs?p:p.inputs[0]),i.connect(void 0===v.inputs?v:v.inputs[0]),p.connect(f.gain),v.connect(g.gain),f.connect(o,0,0),g.connect(o,0,1)},disconnectGraph(){t.disconnect(f),t.disconnect(void 0===m.inputs?m:m.inputs[0]),t.disconnect(g),m.disconnect(i),i.disconnect(void 0===p.inputs?p:p.inputs[0]),i.disconnect(void 0===v.inputs?v:v.inputs[0]),p.disconnect(f.gain),v.disconnect(g.gain),f.disconnect(o,0,0),g.disconnect(o,0,1)}}})(e,h,d,f);if(2===o)return((e,i,o,h)=>{const d=new Float32Array(a),f=new Float32Array(a),p=new Float32Array(a),m=new Float32Array(a),g=Math.floor(8192.5);for(let e=0;e<a;e+=1)if(e>g){const t=(e-g)/(16384-g)*l;d[e]=Math.cos(t),f[e]=Math.sin(t),p[e]=0,m[e]=1}else{const t=e/(16384-g)*l;d[e]=1,f[e]=0,p[e]=Math.cos(t),m[e]=Math.sin(t)}const v=t(e,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),y=n(e,{...u,gain:0}),_=r(e,{...c,curve:d}),w=n(e,{...u,gain:0}),b=r(e,{...c,curve:f}),x=r(e,{...c,curve:s}),k=n(e,{...u,gain:0}),E=r(e,{...c,curve:p}),S=n(e,{...u,gain:0}),C=r(e,{...c,curve:m});return{connectGraph(){i.connect(v),i.connect(void 0===x.inputs?x:x.inputs[0]),v.connect(y,0),v.connect(w,0),v.connect(k,1),v.connect(S,1),x.connect(o),o.connect(void 0===_.inputs?_:_.inputs[0]),o.connect(void 0===b.inputs?b:b.inputs[0]),o.connect(void 0===E.inputs?E:E.inputs[0]),o.connect(void 0===C.inputs?C:C.inputs[0]),_.connect(y.gain),b.connect(w.gain),E.connect(k.gain),C.connect(S.gain),y.connect(h,0,0),k.connect(h,0,0),w.connect(h,0,1),S.connect(h,0,1)},disconnectGraph(){i.disconnect(v),i.disconnect(void 0===x.inputs?x:x.inputs[0]),v.disconnect(y,0),v.disconnect(w,0),v.disconnect(k,1),v.disconnect(S,1),x.disconnect(o),o.disconnect(void 0===_.inputs?_:_.inputs[0]),o.disconnect(void 0===b.inputs?b:b.inputs[0]),o.disconnect(void 0===E.inputs?E:E.inputs[0]),o.disconnect(void 0===C.inputs?C:C.inputs[0]),_.disconnect(y.gain),b.disconnect(w.gain),E.disconnect(k.gain),C.disconnect(S.gain),y.disconnect(h,0,0),k.disconnect(h,0,0),w.disconnect(h,0,1),S.disconnect(h,0,1)}}})(e,h,d,f);throw i()};return(t,{channelCount:r,channelCountMode:a,pan:s,...l})=>{if("max"===a)throw i();const u=e(t,{...l,channelCount:1,channelCountMode:a,numberOfInputs:2}),c=n(t,{...l,channelCount:r,channelCountMode:a,gain:1}),d=n(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:s});let{connectGraph:f,disconnectGraph:p}=h(t,r,c,d,u);Object.defineProperty(d.gain,"defaultValue",{get:()=>0}),Object.defineProperty(d.gain,"maxValue",{get:()=>1}),Object.defineProperty(d.gain,"minValue",{get:()=>-1});const m={get bufferSize(){},get channelCount(){return c.channelCount},set channelCount(e){c.channelCount!==e&&(g&&p(),({connectGraph:f,disconnectGraph:p}=h(t,e,c,d,u)),g&&f()),c.channelCount=e},get channelCountMode(){return c.channelCountMode},set channelCountMode(e){if("clamped-max"===e||"max"===e)throw i();c.channelCountMode=e},get channelInterpretation(){return c.channelInterpretation},set channelInterpretation(e){c.channelInterpretation=e},get context(){return c.context},get inputs(){return[c]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return c.numberOfOutputs},get pan(){return d.gain},addEventListener:(...e)=>c.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>c.dispatchEvent(e[0]),removeEventListener:(...e)=>c.removeEventListener(e[0],e[1],e[2])};let g=!1;return o(nr(m,u),(()=>{f(),g=!0}),(()=>{p(),g=!1}))}})(vi,tr,ir,qi,lr,gi),lr),Hi=((e,t,n,r,i)=>()=>{const o=new WeakMap;return{render(a,s,l){const u=o.get(s);return void 0!==u?Promise.resolve(u):(async(a,s,l)=>{let u=n(a);const c=Wt(u,s);if(!c){const e={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,pan:u.pan.value};u=t(s,e)}return o.set(s,u),c?await e(s,a.pan,u.pan,l):await r(s,a.pan,u.pan,l),un(u)?await i(a,s,u.inputs[0],l):await i(a,s,u,l),u})(a,s,l)}}})(oi,Gi,mn,si,Ir),Yi=((e,t,n,r,i,o)=>class extends e{constructor(e,a){const s=i(e),l={...fr,...a},u=n(s,l),c=o(s);super(e,!1,u,c?r():null),this._pan=t(this,c,u.pan)}get pan(){return this._pan}})(Hr,ui,Gi,Hi,Vr,zr),Xi=((e,t,n)=>()=>{const r=new WeakMap;return{render(i,o,a){const s=r.get(o);return void 0!==s?Promise.resolve(s):(async(i,o,a)=>{let s=t(i);if(!Wt(s,o)){const t={channelCount:s.channelCount,channelCountMode:s.channelCountMode,channelInterpretation:s.channelInterpretation,curve:s.curve,oversample:s.oversample};s=e(o,t)}return r.set(o,s),un(s)?await n(i,o,s.inputs[0],a):await n(i,o,s,a),s})(i,o,a)}}})(qi,mn,Ir),Qi=((e,t,n,r,i,o,a)=>class extends e{constructor(e,t){const s=i(e),l={...mr,...t},u=n(s,l);super(e,!0,u,o(s)?r():null),this._isCurveNullified=!1,this._nativeWaveShaperNode=u,a(this,1)}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(e){if(null===e)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(e.length<2)throw t();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=e}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(e){this._nativeWaveShaperNode.oversample=e}})(Hr,qn,qi,Xi,Vr,zr,pi),Zi=(e=>null!==e&&e.isSecureContext)(Dr),Ki=(e=>(t,n,r)=>{Object.defineProperties(e,{currentFrame:{configurable:!0,get:()=>Math.round(t*n)},currentTime:{configurable:!0,get:()=>t}});try{return r()}finally{null!==e&&(delete e.currentFrame,delete e.currentTime)}})(Dr),Ji=new WeakMap,eo=((e,t)=>n=>{let r=e.get(n);if(void 0!==r)return r;if(null===t)throw new Error("Missing the native OfflineAudioContext constructor.");return r=new t(1,1,44100),e.set(n,r),r})(Ji,jr),to=(e=>null===e?null:e.hasOwnProperty("AudioWorkletNode")?e.AudioWorkletNode:null)(Dr),no=Zi?((e,t,n,r,i,o,a,s,l,u,c,h,d)=>(f,p,m={credentials:"omit"})=>{const g=o(f);if(void 0!==g.audioWorklet)return Promise.all([i(p),Promise.resolve(e(h,h))]).then((([[e,t],n])=>{const[r,i]=Dt(e,t),o=new Blob([`${r};((AudioWorkletProcessor,registerProcessor)=>{${i}\n})(${n?"AudioWorkletProcessor":"class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${n?"":"__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${n?"":"i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac',class extends AudioWorkletProcessor{process(){return !1}})`],{type:"application/javascript; charset=utf-8"}),u=URL.createObjectURL(o);return g.audioWorklet.addModule(u,m).then((()=>{if(s(g))return g;const e=a(g);return e.audioWorklet.addModule(u,m).then((()=>e))})).then((e=>{if(null===l)throw new SyntaxError;try{new l(e,"__sac")}catch{throw new SyntaxError}})).finally((()=>URL.revokeObjectURL(u)))}));const v=c.get(f);if(void 0!==v&&v.has(p))return Promise.resolve();const y=u.get(f);if(void 0!==y){const e=y.get(p);if(void 0!==e)return e}const _=i(p).then((([e,t])=>{const[r,i]=Dt(e,t);return n(`${r};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${i}\n})})(window,'_AWGS')`)})).then((()=>{const e=d._AWGS.pop();if(void 0===e)throw new SyntaxError;r(g.currentTime,g.sampleRate,(()=>e(class{},void 0,((e,n)=>{if(""===e.trim())throw t();const r=At.get(g);if(void 0!==r){if(r.has(e))throw t();Rt(n),Pt(n.parameterDescriptors),r.set(e,n)}else Rt(n),Pt(n.parameterDescriptors),At.set(g,new Map([[e,n]]))}),g.sampleRate,void 0,void 0)))}));return void 0===y?u.set(f,new Map([[p,_]])):y.set(p,_),_.then((()=>{const e=c.get(f);void 0===e?c.set(f,new Set([p])):e.add(p)})).finally((()=>{const e=u.get(f);void 0!==e&&e.delete(p)})),_})(Or,lr,(e=>t=>new Promise(((n,r)=>{if(null===e)return void r(new SyntaxError);const i=e.document.head;if(null===i)r(new SyntaxError);else{const o=e.document.createElement("script"),a=new Blob([t],{type:"application/javascript"}),s=URL.createObjectURL(a),l=e.onerror,u=()=>{e.onerror=l,URL.revokeObjectURL(s)};e.onerror=(t,n,i,o,a)=>n===s||n===e.location.href&&1===i&&1===o?(u(),r(a),!1):null!==l?l(t,n,i,o,a):void 0,o.onerror=()=>{u(),r(new SyntaxError)},o.onload=()=>{u(),n()},o.src=s,o.type="module",i.appendChild(o)}})))(Dr),Ki,(async e=>{try{const t=await fetch(e);if(t.ok)return[await t.text(),t.url]}catch{}throw new DOMException("","AbortError")}),Vr,eo,zr,to,new WeakMap,new WeakMap,((e,t)=>async()=>{if(null===e)return!0;if(null===t)return!1;const n=new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),r=new t(1,128,44100),i=URL.createObjectURL(n);let o=!1,a=!1;try{await r.audioWorklet.addModule(i);const t=new e(r,"a",{numberOfOutputs:0}),n=r.createOscillator();t.port.onmessage=()=>o=!0,t.onprocessorerror=()=>a=!0,n.connect(t),n.start(0),await r.startRendering()}catch{}finally{URL.revokeObjectURL(i)}return o&&!a})(to,jr),Dr):void 0,ro=((e,t)=>n=>e(n)||t(n))(Wr,zr),io=((e,t,n,r,i,o,a,s,l,u,c,h,d,f,p,m,g,v,y,_)=>class extends p{constructor(t,n){super(t,n),this._nativeContext=t,this._audioWorklet=void 0===e?void 0:{addModule:(t,n)=>e(this,t,n)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new t(this)}createBiquadFilter(){return new i(this)}createBuffer(e,t,r){return new n({length:t,numberOfChannels:e,sampleRate:r})}createBufferSource(){return new r(this)}createChannelMerger(e=6){return new o(this,{numberOfInputs:e})}createChannelSplitter(e=6){return new a(this,{numberOfOutputs:e})}createConstantSource(){return new s(this)}createConvolver(){return new l(this)}createDelay(e=1){return new c(this,{maxDelayTime:e})}createDynamicsCompressor(){return new h(this)}createGain(){return new d(this)}createIIRFilter(e,t){return new f(this,{feedback:t,feedforward:e})}createOscillator(){return new m(this)}createPanner(){return new g(this)}createPeriodicWave(e,t,n={disableNormalization:!1}){return new v(this,{...n,imag:t,real:e})}createStereoPanner(){return new y(this)}createWaveShaper(){return new _(this)}decodeAudioData(e,t,n){return u(this._nativeContext,e).then((e=>("function"==typeof t&&t(e),e)),(e=>{throw"function"==typeof n&&n(e),e}))}})(no,Xr,ni,hi,mi,yi,_i,xi,Ei,((e,t,n,r,i,o,a,s,l,u,c)=>(n,r)=>{const h=a(n)?n:o(n);if(i.has(r)){const e=new DOMException("","DataCloneError");return Promise.reject(e)}try{i.add(r)}catch{}return t(l,(()=>l(h)))?h.decodeAudioData(r).then((n=>(Ln(r).catch((()=>{})),t(s,(()=>s(n)))||c(n),e.add(n),n))):new Promise(((t,n)=>{const i=async()=>{try{await Ln(r)}catch{}},o=e=>{n(e),i()};try{h.decodeAudioData(r,(n=>{"function"!=typeof n.copyFromChannel&&(u(n),Ht(n)),e.add(n),i().then((()=>t(n)))}),(e=>{o(null===e?new DOMException("","EncodingError"):e)}))}catch(e){o(e)}}))})(Qr,Or,0,0,new WeakSet,Vr,ro,$t,Gn,ei,ti),Si,Ti,Ai,Di,Ii,Fi,Wi,$i,Yi,Qi),oo=((e,t,n,r)=>class extends e{constructor(e,t){const i=n(e),o=((e,t)=>e.createMediaElementSource(t.mediaElement))(i,t);if(r(i))throw TypeError();super(e,!0,o,null),this._nativeMediaElementAudioSourceNode=o}get mediaElement(){return this._nativeMediaElementAudioSourceNode.mediaElement}})(Hr,0,Vr,zr),ao=((e,t,n,r)=>class extends e{constructor(e,t){const i=n(e);if(r(i))throw new TypeError;const o=((e,t)=>{const n=e.createMediaStreamDestination();return Yn(n,t),1===n.numberOfOutputs&&Object.defineProperty(n,"numberOfOutputs",{get:()=>0}),n})(i,{...$n,...t});super(e,!1,o,null),this._nativeMediaStreamAudioDestinationNode=o}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}})(Hr,0,Vr,zr),so=((e,t,n,r)=>class extends e{constructor(e,t){const i=n(e),o=((e,{mediaStream:t})=>{const n=t.getAudioTracks();n.sort(((e,t)=>e.id<t.id?-1:e.id>t.id?1:0));const r=n.slice(0,1),i=e.createMediaStreamSource(new MediaStream(r));return Object.defineProperty(i,"mediaStream",{value:t}),i})(i,t);if(r(i))throw new TypeError;super(e,!0,o,null),this._nativeMediaStreamAudioSourceNode=o}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}})(Hr,0,Vr,zr),lo=((e,t,n)=>class extends e{constructor(e,r){const i=n(e);super(e,!0,t(i,r),null)}})(Hr,((e,t)=>(n,{mediaStreamTrack:r})=>{if("function"==typeof n.createMediaStreamTrackSource)return n.createMediaStreamTrackSource(r);const i=new MediaStream([r]),o=n.createMediaStreamSource(i);if("audio"!==r.kind)throw e();if(t(n))throw new TypeError;return o})(qn,zr),Vr),uo=((e,t,n,r,i,o,a,s,l)=>class extends e{constructor(e={}){if(null===l)throw new Error("Missing the native AudioContext constructor.");let t;try{t=new l(e)}catch(e){if(12===e.code&&"sampleRate is not in range"===e.message)throw n();throw e}if(null===t)throw r();if(!(e=>void 0===e||"number"==typeof e||"string"==typeof e&&("balanced"===e||"interactive"===e||"playback"===e))(e.latencyHint))throw new TypeError(`The provided value '${e.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==e.sampleRate&&t.sampleRate!==e.sampleRate)throw n();super(t,2);const{latencyHint:i}=e,{sampleRate:o}=t;if(this._baseLatency="number"==typeof t.baseLatency?t.baseLatency:"balanced"===i?512/o:"interactive"===i||void 0===i?256/o:"playback"===i?1024/o:128*Math.max(2,Math.min(128,Math.round(i*o/128)))/o,this._nativeAudioContext=t,"webkitAudioContext"===l.name?(this._nativeGainNode=t.createGain(),this._nativeOscillatorNode=t.createOscillator(),this._nativeGainNode.gain.value=1e-37,this._nativeOscillatorNode.connect(this._nativeGainNode).connect(t.destination),this._nativeOscillatorNode.start()):(this._nativeGainNode=null,this._nativeOscillatorNode=null),this._state=null,"running"===t.state){this._state="suspended";const e=()=>{"suspended"===this._state&&(this._state=null),t.removeEventListener("statechange",e)};t.addEventListener("statechange",e)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then((()=>{throw t()})):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close().then((()=>{null!==this._nativeGainNode&&null!==this._nativeOscillatorNode&&(this._nativeOscillatorNode.stop(),this._nativeGainNode.disconnect(),this._nativeOscillatorNode.disconnect()),nn(this)})))}createMediaElementSource(e){return new i(this,{mediaElement:e})}createMediaStreamDestination(){return new o(this)}createMediaStreamSource(e){return new a(this,{mediaStream:e})}createMediaStreamTrackSource(e){return new s(this,{mediaStreamTrack:e})}resume(){return"suspended"===this._state?new Promise(((e,t)=>{const n=()=>{this._nativeAudioContext.removeEventListener("statechange",n),"running"===this._nativeAudioContext.state?e():this.resume().then(e,t)};this._nativeAudioContext.addEventListener("statechange",n)})):this._nativeAudioContext.resume().catch((e=>{if(void 0===e||15===e.code)throw t();throw e}))}suspend(){return this._nativeAudioContext.suspend().catch((e=>{if(void 0===e)throw t();throw e}))}})(io,qn,lr,pr,oo,ao,so,lo,Ur),co=(e=>t=>{const n=e.get(t);if(void 0===n)throw new Error("The context has no set of AudioWorkletNodes.");return n})(Ri),ho=(e=>(t,n)=>{e(t).add(n)})(co),fo=(e=>(t,n,r=0,i=0)=>{const o=t[r];if(void 0===o)throw e();return bn(n)?o.connect(n,0,i):o.connect(n,0)})(Gt),po=(e=>(t,n)=>{e(t).delete(n)})(co),mo=(e=>(t,n,r,i=0)=>void 0===n?t.forEach((e=>e.disconnect())):"number"==typeof n?Fn(e,t,n).disconnect():bn(n)?void 0===r?t.forEach((e=>e.disconnect(n))):void 0===i?Fn(e,t,r).disconnect(n,0):Fn(e,t,r).disconnect(n,0,i):void 0===r?t.forEach((e=>e.disconnect(n))):Fn(e,t,r).disconnect(n,0))(Gt),go=new WeakMap,vo=((e,t)=>n=>t(e,n))(go,It),yo=((e,t,n,r,i,o,a,s,l,u,c,h,d)=>(f,p,m,g)=>{if(0===g.numberOfInputs&&0===g.numberOfOutputs)throw l();const v=Array.isArray(g.outputChannelCount)?g.outputChannelCount:Array.from(g.outputChannelCount);if(v.some((e=>e<1)))throw l();if(v.length!==g.numberOfOutputs)throw t();if("explicit"!==g.channelCountMode)throw l();const y=g.channelCount*g.numberOfInputs,_=v.reduce(((e,t)=>e+t),0),w=void 0===m.parameterDescriptors?0:m.parameterDescriptors.length;if(y+w>6||_>6)throw l();const b=new MessageChannel,x=[],k=[];for(let e=0;e<g.numberOfInputs;e+=1)x.push(a(f,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1})),k.push(i(f,{channelCount:g.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:g.channelCount}));const E=[];if(void 0!==m.parameterDescriptors)for(const{defaultValue:e,maxValue:t,minValue:n,name:r}of m.parameterDescriptors){const i=o(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==g.parameterData[r]?g.parameterData[r]:void 0===e?0:e});Object.defineProperties(i.offset,{defaultValue:{get:()=>void 0===e?0:e},maxValue:{get:()=>void 0===t?Qt:t},minValue:{get:()=>void 0===n?Xt:n}}),E.push(i)}const S=r(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,y+w)}),C=Jn(p,f.sampleRate),T=s(f,C,y+w,Math.max(1,_)),A=i(f,{channelCount:Math.max(1,_),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,_)}),O=[];for(let e=0;e<g.numberOfOutputs;e+=1)O.push(r(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:v[e]}));for(let e=0;e<g.numberOfInputs;e+=1){x[e].connect(k[e]);for(let t=0;t<g.channelCount;t+=1)k[e].connect(S,t,e*g.channelCount+t)}const M=new Sn(void 0===m.parameterDescriptors?[]:m.parameterDescriptors.map((({name:e},t)=>{const n=E[t];return n.connect(S,0,y+t),n.start(0),[e,n.offset]})));S.connect(T);let N=g.channelInterpretation,D=null;const P=0===g.numberOfOutputs?[T]:O,R={get bufferSize(){return C},get channelCount(){return g.channelCount},set channelCount(e){throw n()},get channelCountMode(){return g.channelCountMode},set channelCountMode(e){throw n()},get channelInterpretation(){return N},set channelInterpretation(e){for(const t of x)t.channelInterpretation=e;N=e},get context(){return T.context},get inputs(){return x},get numberOfInputs(){return g.numberOfInputs},get numberOfOutputs(){return g.numberOfOutputs},get onprocessorerror(){return D},set onprocessorerror(e){"function"==typeof D&&R.removeEventListener("processorerror",D),D="function"==typeof e?e:null,"function"==typeof D&&R.addEventListener("processorerror",D)},get parameters(){return M},get port(){return b.port2},addEventListener:(...e)=>T.addEventListener(e[0],e[1],e[2]),connect:e.bind(null,P),disconnect:u.bind(null,P),dispatchEvent:(...e)=>T.dispatchEvent(e[0]),removeEventListener:(...e)=>T.removeEventListener(e[0],e[1],e[2])},I=new Map;var L,V;b.port1.addEventListener=(L=b.port1.addEventListener,(...e)=>{if("message"===e[0]){const t="function"==typeof e[1]?e[1]:"object"==typeof e[1]&&null!==e[1]&&"function"==typeof e[1].handleEvent?e[1].handleEvent:null;if(null!==t){const n=I.get(e[1]);void 0!==n?e[1]=n:(e[1]=e=>{c(f.currentTime,f.sampleRate,(()=>t(e)))},I.set(t,e[1]))}}return L.call(b.port1,e[0],e[1],e[2])}),b.port1.removeEventListener=(V=b.port1.removeEventListener,(...e)=>{if("message"===e[0]){const t=I.get(e[1]);void 0!==t&&(I.delete(e[1]),e[1]=t)}return V.call(b.port1,e[0],e[1],e[2])});let F=null;Object.defineProperty(b.port1,"onmessage",{get:()=>F,set:e=>{"function"==typeof F&&b.port1.removeEventListener("message",F),F="function"==typeof e?e:null,"function"==typeof F&&(b.port1.addEventListener("message",F),b.port1.start())}}),m.prototype.port=b.port1;let j=null;((e,t,n,r)=>{let i=Ot.get(e);void 0===i&&(i=new WeakMap,Ot.set(e,i));const o=(async(e,t)=>new e(await(e=>new Promise(((t,n)=>{const{port1:r,port2:i}=new MessageChannel;r.onmessage=({data:e})=>{r.close(),i.close(),t(e)},r.onmessageerror=({data:e})=>{r.close(),i.close(),n(e)},i.postMessage(e)})))(t)))(n,r);return i.set(t,o),o})(f,R,m,g).then((e=>j=e));const z=On(g.numberOfInputs,g.channelCount),q=On(g.numberOfOutputs,v),B=void 0===m.parameterDescriptors?[]:m.parameterDescriptors.reduce(((e,{name:t})=>({...e,[t]:new Float32Array(128)})),{});let U=!0;const W=()=>{g.numberOfOutputs>0&&T.disconnect(A);for(let e=0,t=0;e<g.numberOfOutputs;e+=1){const n=O[e];for(let r=0;r<v[e];r+=1)A.disconnect(n,t+r,r);t+=v[e]}},$=new Map;T.onaudioprocess=({inputBuffer:e,outputBuffer:t})=>{if(null!==j){const n=h(R);for(let r=0;r<C;r+=128){for(let t=0;t<g.numberOfInputs;t+=1)for(let n=0;n<g.channelCount;n+=1)Tn(e,z[t],n,n,r);void 0!==m.parameterDescriptors&&m.parameterDescriptors.forEach((({name:t},n)=>{Tn(e,B,t,y+n,r)}));for(let e=0;e<g.numberOfInputs;e+=1)for(let t=0;t<v[e];t+=1)0===q[e][t].byteLength&&(q[e][t]=new Float32Array(128));try{const e=z.map(((e,t)=>{if(n[t].size>0)return $.set(t,C/128),e;const r=$.get(t);return void 0===r?[]:(e.every((e=>e.every((e=>0===e))))&&(1===r?$.delete(t):$.set(t,r-1)),e)})),i=c(f.currentTime+r/f.sampleRate,f.sampleRate,(()=>j.process(e,q,B)));U=i;for(let e=0,n=0;e<g.numberOfOutputs;e+=1){for(let i=0;i<v[e];i+=1)An(t,q[e],i,n+i,r);n+=v[e]}}catch(e){U=!1,R.dispatchEvent(new ErrorEvent("processorerror",{colno:e.colno,filename:e.filename,lineno:e.lineno,message:e.message}))}if(!U){for(let e=0;e<g.numberOfInputs;e+=1){x[e].disconnect(k[e]);for(let t=0;t<g.channelCount;t+=1)k[r].disconnect(S,t,e*g.channelCount+t)}if(void 0!==m.parameterDescriptors){const e=m.parameterDescriptors.length;for(let t=0;t<e;t+=1){const e=E[t];e.disconnect(S,0,y+t),e.stop()}}S.disconnect(T),T.onaudioprocess=null,G?W():X();break}}}};let G=!1;const H=a(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),Y=()=>T.connect(H).connect(f.destination),X=()=>{T.disconnect(H),H.disconnect()};return Y(),d(R,(()=>{if(U){X(),g.numberOfOutputs>0&&T.connect(A);for(let e=0,t=0;e<g.numberOfOutputs;e+=1){const n=O[e];for(let r=0;r<v[e];r+=1)A.connect(n,t+r,r);t+=v[e]}}G=!0}),(()=>{U&&(Y(),W()),G=!1}))})(fo,Gt,qn,vi,tr,bi,ir,sr,lr,mo,Ki,vo,gi),_o=((e,t,n,r,i)=>(o,a,s,l,u,c)=>{if(null!==s)try{const t=new s(o,l,c),r=new Map;let a=null;if(Object.defineProperties(t,{channelCount:{get:()=>c.channelCount,set:()=>{throw e()}},channelCountMode:{get:()=>"explicit",set:()=>{throw e()}},onprocessorerror:{get:()=>a,set:e=>{"function"==typeof a&&t.removeEventListener("processorerror",a),a="function"==typeof e?e:null,"function"==typeof a&&t.addEventListener("processorerror",a)}}}),t.addEventListener=(d=t.addEventListener,(...e)=>{if("processorerror"===e[0]){const t="function"==typeof e[1]?e[1]:"object"==typeof e[1]&&null!==e[1]&&"function"==typeof e[1].handleEvent?e[1].handleEvent:null;if(null!==t){const n=r.get(e[1]);void 0!==n?e[1]=n:(e[1]=n=>{"error"===n.type?(Object.defineProperties(n,{type:{value:"processorerror"}}),t(n)):t(new ErrorEvent(e[0],{...n}))},r.set(t,e[1]))}}return d.call(t,"error",e[1],e[2]),d.call(t,...e)}),t.removeEventListener=(h=t.removeEventListener,(...e)=>{if("processorerror"===e[0]){const t=r.get(e[1]);void 0!==t&&(r.delete(e[1]),e[1]=t)}return h.call(t,"error",e[1],e[2]),h.call(t,e[0],e[1],e[2])}),0!==c.numberOfOutputs){const e=n(o,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return t.connect(e).connect(o.destination),i(t,(()=>e.disconnect()),(()=>e.connect(o.destination)))}return t}catch(e){if(11===e.code)throw r();throw e}var h,d;if(void 0===u)throw r();return(e=>{const{port1:t}=new MessageChannel;try{t.postMessage(e)}finally{t.close()}})(c),t(o,a,u,c)})(qn,yo,ir,lr,gi),wo=((e,t,n,r,i,o,a,s,l,u,c,h,d,f,p,m)=>(g,v,y)=>{const _=new WeakMap;let w=null;return{render(b,x,k){s(x,b);const E=_.get(x);return void 0!==E?Promise.resolve(E):(async(s,b,x)=>{let k=c(s),E=null;const S=Wt(k,b),C=Array.isArray(v.outputChannelCount)?v.outputChannelCount:Array.from(v.outputChannelCount);if(null===h){const e=C.reduce(((e,t)=>e+t),0),n=i(b,{channelCount:Math.max(1,e),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,e)}),o=[];for(let e=0;e<s.numberOfOutputs;e+=1)o.push(r(b,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:C[e]}));const u=a(b,{channelCount:v.channelCount,channelCountMode:v.channelCountMode,channelInterpretation:v.channelInterpretation,gain:1});u.connect=t.bind(null,o),u.disconnect=l.bind(null,o),E=[n,o,u]}else S||(k=new h(b,g));if(_.set(b,null===E?k:E[2]),null!==E){if(null===w){if(void 0===y)throw new Error("Missing the processor constructor.");if(null===d)throw new Error("Missing the native OfflineAudioContext constructor.");const e=s.channelCount*s.numberOfInputs,t=void 0===y.parameterDescriptors?0:y.parameterDescriptors.length,n=e+t,l=async()=>{const l=new d(n,128*Math.ceil(s.context.length/128),b.sampleRate),u=[],c=[];for(let e=0;e<v.numberOfInputs;e+=1)u.push(a(l,{channelCount:v.channelCount,channelCountMode:v.channelCountMode,channelInterpretation:v.channelInterpretation,gain:1})),c.push(i(l,{channelCount:v.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:v.channelCount}));const h=await Promise.all(Array.from(s.parameters.values()).map((async e=>{const t=o(l,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:e.value});return await f(l,e,t.offset,x),t}))),g=r(l,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,e+t)});for(let e=0;e<v.numberOfInputs;e+=1){u[e].connect(c[e]);for(let t=0;t<v.channelCount;t+=1)c[e].connect(g,t,e*v.channelCount+t)}for(const[t,n]of h.entries())n.connect(g,0,e+t),n.start(0);return g.connect(l.destination),await Promise.all(u.map((e=>p(s,l,e,x)))),m(l)};w=Mn(s,0===n?null:await l(),b,v,C,y,u)}const e=await w,t=n(b,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[l,c,h]=E;null!==e&&(t.buffer=e,t.start(0)),t.connect(l);for(let e=0,t=0;e<s.numberOfOutputs;e+=1){const n=c[e];for(let r=0;r<C[e];r+=1)l.connect(n,t+r,r);t+=C[e]}return h}if(S)for(const[t,n]of s.parameters.entries())await e(b,n,k.parameters.get(t),x);else for(const[e,t]of s.parameters.entries())await f(b,t,k.parameters.get(e),x);return await p(s,b,k,x),k})(b,x,k)}}})(oi,fo,ai,vi,tr,bi,ir,po,mo,Ki,mn,to,jr,si,Ir,Mi),bo=(e=>t=>e.get(t))(Ji),xo=(e=>(t,n)=>{e.set(t,n)})(go),ko=Zi?((e,t,n,r,i,o,a,s,l,u,c,h,d,f)=>class extends t{constructor(t,c,d){var f;const p=s(t),m=l(p),g=(e=>({...e,outputChannelCount:void 0!==e.outputChannelCount?e.outputChannelCount:1===e.numberOfInputs&&1===e.numberOfOutputs?[e.channelCount]:Array.from({length:e.numberOfOutputs},(()=>1))}))({...Cn,...d});(e=>{const{port1:t,port2:n}=new MessageChannel;try{t.postMessage(e)}finally{t.close(),n.close()}})(g);const v=At.get(p),y=null==v?void 0:v.get(c),_=m||"closed"!==p.state?p:null!==(f=a(p))&&void 0!==f?f:p,w=i(_,m?null:t.baseLatency,u,c,y,g);super(t,!0,w,m?r(c,g,y):null);const b=[];w.parameters.forEach(((e,t)=>{const r=n(this,m,e);b.push([t,r])})),this._nativeAudioWorkletNode=w,this._onprocessorerror=null,this._parameters=new Sn(b),m&&e(p,this);const{activeInputs:x}=o(this);h(w,x)}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(e){const t="function"==typeof e?f(this,e):null;this._nativeAudioWorkletNode.onprocessorerror=t;const n=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=null!==n&&n===t?e:n}get parameters(){return null===this._parameters?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}})(ho,Hr,ui,wo,_o,Jt,bo,Vr,zr,to,0,xo,0,kr):void 0,Eo=((e,t)=>(n,r,i)=>{if(null===t)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new t(n,r,i)}catch(t){if("SyntaxError"===t.name)throw e();throw t}})(lr,jr),So=((e,t,n,r,i,o,a,s)=>{const l=[];return(u,c)=>n(u).render(u,c,l).then((()=>Promise.all(Array.from(r(c)).map((e=>n(e).render(e,c,l)))))).then((()=>i(c))).then((n=>("function"!=typeof n.copyFromChannel?(a(n),Ht(n)):t(o,(()=>o(n)))||s(n),e.add(n),n)))})(Qr,Or,Rr,co,Mi,$t,ei,ti),Co=((e,t,n,r,i)=>class extends e{constructor(e,n,i){let o;if("number"==typeof e&&void 0!==n&&void 0!==i)o={length:n,numberOfChannels:e,sampleRate:i};else{if("object"!=typeof e)throw new Error("The given parameters are not valid.");o=e}const{length:a,numberOfChannels:s,sampleRate:l}={...ur,...o},u=r(s,a,l);t(Gn,(()=>Gn(u)))||u.addEventListener("statechange",(()=>{let e=0;const t=n=>{"running"===this._state&&(e>0?(u.removeEventListener("statechange",t),n.stopImmediatePropagation(),this._waitForThePromiseToSettle(n)):e+=1)};return t})()),super(u,s),this._length=a,this._nativeOfflineAudioContext=u,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(n()):(this._state="running",i(this.destination,this._nativeOfflineAudioContext).finally((()=>{this._state=null,nn(this)})))}_waitForThePromiseToSettle(e){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(e):setTimeout((()=>this._waitForThePromiseToSettle(e)))}})(io,Or,qn,Eo,So),To=((e,t)=>n=>{const r=e.get(n);return t(r)||t(n)})(St,Wr),Ao=((e,t)=>n=>e.has(n)||t(n))(xt,$r),Oo=((e,t)=>n=>e.has(n)||t(n))(Et,Gr),Mo=((e,t)=>n=>{const r=e.get(n);return t(r)||t(n)})(St,zr);var No;function Do(e,t){if(!e)throw new Error(t)}function Po(e,t,n=1/0){if(!(t<=e&&e<=n))throw new RangeError(`Value must be within [${t}, ${n}], got: ${e}`)}function Ro(e){e.isOffline||"running"===e.state||Lo('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}let Io=console;function Lo(...e){Io.warn(...e)}function Vo(e){return void 0===e}function Fo(e){return!Vo(e)}function jo(e){return"number"==typeof e}function zo(e){return"[object Object]"===Object.prototype.toString.call(e)&&e.constructor===Object}function qo(e){return"boolean"==typeof e}function Bo(e){return Array.isArray(e)}function Uo(e){return"string"==typeof e}function Wo(e){return Uo(e)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(e)}const $o="object"==typeof self?self:null,Go=$o&&($o.hasOwnProperty("AudioContext")||$o.hasOwnProperty("webkitAudioContext"));function Ho(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function Yo(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))}Object.create,Object.create;class Xo{constructor(e,t,n){this._callback=e,this._type=t,this._updateInterval=n,this._createClock()}_createWorker(){const e=new Blob([`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(1e3*this._updateInterval).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`],{type:"text/javascript"}),t=URL.createObjectURL(e),n=new Worker(t);n.onmessage=this._callback.bind(this),this._worker=n}_createTimeout(){this._timeout=setTimeout((()=>{this._createTimeout(),this._callback()}),1e3*this._updateInterval)}_createClock(){if("worker"===this._type)try{this._createWorker()}catch(e){this._type="timeout",this._createClock()}else"timeout"===this._type&&this._createTimeout()}_disposeClock(){this._timeout&&(clearTimeout(this._timeout),this._timeout=0),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)}get updateInterval(){return this._updateInterval}set updateInterval(e){this._updateInterval=Math.max(e,128/44100),"worker"===this._type&&this._worker.postMessage(Math.max(1e3*e,1))}get type(){return this._type}set type(e){this._disposeClock(),this._type=e,this._createClock()}dispose(){this._disposeClock()}}function Qo(e){return Oo(e)}function Zo(e){return Ao(e)}function Ko(e){return Mo(e)}function Jo(e){return To(e)}function ea(e){return e instanceof AudioBuffer}function ta(e,t){return"value"===e||Qo(t)||Zo(t)||ea(t)}function na(e,...t){if(!t.length)return e;const n=t.shift();if(zo(e)&&zo(n))for(const t in n)ta(t,n[t])?e[t]=n[t]:zo(n[t])?(e[t]||Object.assign(e,{[t]:{}}),na(e[t],n[t])):Object.assign(e,{[t]:n[t]});return na(e,...t)}function ra(e,t,n=[],r){const i={},o=Array.from(t);if(zo(o[0])&&r&&!Reflect.has(o[0],r)&&(Object.keys(o[0]).some((t=>Reflect.has(e,t)))||(na(i,{[r]:o[0]}),n.splice(n.indexOf(r),1),o.shift())),1===o.length&&zo(o[0]))na(i,o[0]);else for(let e=0;e<n.length;e++)Fo(o[e])&&(i[n[e]]=o[e]);return na(e,i)}function ia(e,t){return Vo(e)?t:e}function oa(e,t){return t.forEach((t=>{Reflect.has(e,t)&&delete e[t]})),e}class aa{constructor(){this.debug=!1,this._wasDisposed=!1}static getDefaults(){return{}}log(...e){(this.debug||$o&&this.toString()===$o.TONE_DEBUG_CLASS)&&function(...e){Io.log(...e)}(this,...e)}dispose(){return this._wasDisposed=!0,this}get disposed(){return this._wasDisposed}toString(){return this.name}}aa.version="14.7.77";const sa=1e-6;function la(e,t){return e>t+sa}function ua(e,t){return la(e,t)||ha(e,t)}function ca(e,t){return e+sa<t}function ha(e,t){return Math.abs(e-t)<sa}class da extends aa{constructor(){super(),this.name="Timeline",this._timeline=[];const e=ra(da.getDefaults(),arguments,["memory"]);this.memory=e.memory,this.increasing=e.increasing}static getDefaults(){return{memory:1/0,increasing:!1}}get length(){return this._timeline.length}add(e){if(Do(Reflect.has(e,"time"),"Timeline: events must have a time attribute"),e.time=e.time.valueOf(),this.increasing&&this.length){const t=this._timeline[this.length-1];Do(ua(e.time,t.time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(e)}else{const t=this._search(e.time);this._timeline.splice(t+1,0,e)}if(this.length>this.memory){const e=this.length-this.memory;this._timeline.splice(0,e)}return this}remove(e){const t=this._timeline.indexOf(e);return-1!==t&&this._timeline.splice(t,1),this}get(e,t="time"){const n=this._search(e,t);return-1!==n?this._timeline[n]:null}peek(){return this._timeline[0]}shift(){return this._timeline.shift()}getAfter(e,t="time"){const n=this._search(e,t);return n+1<this._timeline.length?this._timeline[n+1]:null}getBefore(e){const t=this._timeline.length;if(t>0&&this._timeline[t-1].time<e)return this._timeline[t-1];const n=this._search(e);return n-1>=0?this._timeline[n-1]:null}cancel(e){if(this._timeline.length>1){let t=this._search(e);if(t>=0)if(ha(this._timeline[t].time,e)){for(let n=t;n>=0&&ha(this._timeline[n].time,e);n--)t=n;this._timeline=this._timeline.slice(0,t)}else this._timeline=this._timeline.slice(0,t+1);else this._timeline=[]}else 1===this._timeline.length&&ua(this._timeline[0].time,e)&&(this._timeline=[]);return this}cancelBefore(e){const t=this._search(e);return t>=0&&(this._timeline=this._timeline.slice(t+1)),this}previousEvent(e){const t=this._timeline.indexOf(e);return t>0?this._timeline[t-1]:null}_search(e,t="time"){if(0===this._timeline.length)return-1;let n=0;const r=this._timeline.length;let i=r;if(r>0&&this._timeline[r-1][t]<=e)return r-1;for(;n<i;){let r=Math.floor(n+(i-n)/2);const o=this._timeline[r],a=this._timeline[r+1];if(ha(o[t],e)){for(let n=r;n<this._timeline.length&&ha(this._timeline[n][t],e);n++)r=n;return r}if(ca(o[t],e)&&la(a[t],e))return r;la(o[t],e)?i=r:n=r+1}return-1}_iterate(e,t=0,n=this._timeline.length-1){this._timeline.slice(t,n+1).forEach(e)}forEach(e){return this._iterate(e),this}forEachBefore(e,t){const n=this._search(e);return-1!==n&&this._iterate(t,0,n),this}forEachAfter(e,t){const n=this._search(e);return this._iterate(t,n+1),this}forEachBetween(e,t,n){let r=this._search(e),i=this._search(t);return-1!==r&&-1!==i?(this._timeline[r].time!==e&&(r+=1),this._timeline[i].time===t&&(i-=1),this._iterate(n,r,i)):-1===r&&this._iterate(n,0,i),this}forEachFrom(e,t){let n=this._search(e);for(;n>=0&&this._timeline[n].time>=e;)n--;return this._iterate(t,n+1),this}forEachAtTime(e,t){const n=this._search(e);if(-1!==n&&ha(this._timeline[n].time,e)){let r=n;for(let t=n;t>=0&&ha(this._timeline[t].time,e);t--)r=t;this._iterate((e=>{t(e)}),r,n)}return this}dispose(){return super.dispose(),this._timeline=[],this}}const fa=[];function pa(e){fa.push(e)}const ma=[];function ga(e){ma.push(e)}class va extends aa{constructor(){super(...arguments),this.name="Emitter"}on(e,t){return e.split(/\W+/).forEach((e=>{Vo(this._events)&&(this._events={}),this._events.hasOwnProperty(e)||(this._events[e]=[]),this._events[e].push(t)})),this}once(e,t){const n=(...r)=>{t(...r),this.off(e,n)};return this.on(e,n),this}off(e,t){return e.split(/\W+/).forEach((n=>{if(Vo(this._events)&&(this._events={}),this._events.hasOwnProperty(e))if(Vo(t))this._events[e]=[];else{const n=this._events[e];for(let e=n.length-1;e>=0;e--)n[e]===t&&n.splice(e,1)}})),this}emit(e,...t){if(this._events&&this._events.hasOwnProperty(e)){const n=this._events[e].slice(0);for(let e=0,r=n.length;e<r;e++)n[e].apply(this,t)}return this}static mixin(e){["on","once","off","emit"].forEach((t=>{const n=Object.getOwnPropertyDescriptor(va.prototype,t);Object.defineProperty(e.prototype,t,n)}))}dispose(){return super.dispose(),this._events=void 0,this}}class ya extends va{constructor(){super(...arguments),this.isOffline=!1}toJSON(){return{}}}class _a extends ya{constructor(){super(),this.name="Context",this._constants=new Map,this._timeouts=new da,this._timeoutIds=0,this._initialized=!1,this.isOffline=!1,this._workletModules=new Map;const e=ra(_a.getDefaults(),arguments,["context"]);e.context?this._context=e.context:this._context=function(e){return new uo(e)}({latencyHint:e.latencyHint}),this._ticker=new Xo(this.emit.bind(this,"tick"),e.clockSource,e.updateInterval),this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=()=>{this.emit("statechange",this.state)},this._setLatencyHint(e.latencyHint),this.lookAhead=e.lookAhead}static getDefaults(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}}initialize(){var e;return this._initialized||(e=this,fa.forEach((t=>t(e))),this._initialized=!0),this}createAnalyser(){return this._context.createAnalyser()}createOscillator(){return this._context.createOscillator()}createBufferSource(){return this._context.createBufferSource()}createBiquadFilter(){return this._context.createBiquadFilter()}createBuffer(e,t,n){return this._context.createBuffer(e,t,n)}createChannelMerger(e){return this._context.createChannelMerger(e)}createChannelSplitter(e){return this._context.createChannelSplitter(e)}createConstantSource(){return this._context.createConstantSource()}createConvolver(){return this._context.createConvolver()}createDelay(e){return this._context.createDelay(e)}createDynamicsCompressor(){return this._context.createDynamicsCompressor()}createGain(){return this._context.createGain()}createIIRFilter(e,t){return this._context.createIIRFilter(e,t)}createPanner(){return this._context.createPanner()}createPeriodicWave(e,t,n){return this._context.createPeriodicWave(e,t,n)}createStereoPanner(){return this._context.createStereoPanner()}createWaveShaper(){return this._context.createWaveShaper()}createMediaStreamSource(e){return Do(Jo(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamSource(e)}createMediaElementSource(e){return Do(Jo(this._context),"Not available if OfflineAudioContext"),this._context.createMediaElementSource(e)}createMediaStreamDestination(){return Do(Jo(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamDestination()}decodeAudioData(e){return this._context.decodeAudioData(e)}get currentTime(){return this._context.currentTime}get state(){return this._context.state}get sampleRate(){return this._context.sampleRate}get listener(){return this.initialize(),this._listener}set listener(e){Do(!this._initialized,"The listener cannot be set after initialization."),this._listener=e}get transport(){return this.initialize(),this._transport}set transport(e){Do(!this._initialized,"The transport cannot be set after initialization."),this._transport=e}get draw(){return this.initialize(),this._draw}set draw(e){Do(!this._initialized,"Draw cannot be set after initialization."),this._draw=e}get destination(){return this.initialize(),this._destination}set destination(e){Do(!this._initialized,"The destination cannot be set after initialization."),this._destination=e}createAudioWorkletNode(e,t){return function(e,t,n){return Do(Fo(ko),"This node only works in a secure context (https or localhost)"),new ko(e,t,n)}(this.rawContext,e,t)}addAudioWorkletModule(e,t){return Yo(this,void 0,void 0,(function*(){Do(Fo(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletModules.has(t)||this._workletModules.set(t,this.rawContext.audioWorklet.addModule(e)),yield this._workletModules.get(t)}))}workletsAreReady(){return Yo(this,void 0,void 0,(function*(){const e=[];this._workletModules.forEach((t=>e.push(t))),yield Promise.all(e)}))}get updateInterval(){return this._ticker.updateInterval}set updateInterval(e){this._ticker.updateInterval=e}get clockSource(){return this._ticker.type}set clockSource(e){this._ticker.type=e}get latencyHint(){return this._latencyHint}_setLatencyHint(e){let t=0;if(this._latencyHint=e,Uo(e))switch(e){case"interactive":t=.1;break;case"playback":t=.5;break;case"balanced":t=.25}this.lookAhead=t,this.updateInterval=t/2}get rawContext(){return this._context}now(){return this._context.currentTime+this.lookAhead}immediate(){return this._context.currentTime}resume(){return Jo(this._context)?this._context.resume():Promise.resolve()}close(){return Yo(this,void 0,void 0,(function*(){var e;Jo(this._context)&&(yield this._context.close()),this._initialized&&(e=this,ma.forEach((t=>t(e))))}))}getConstant(e){if(this._constants.has(e))return this._constants.get(e);{const t=this._context.createBuffer(1,128,this._context.sampleRate),n=t.getChannelData(0);for(let t=0;t<n.length;t++)n[t]=e;const r=this._context.createBufferSource();return r.channelCount=1,r.channelCountMode="explicit",r.buffer=t,r.loop=!0,r.start(0),this._constants.set(e,r),r}}dispose(){return super.dispose(),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map((e=>this._constants[e].disconnect())),this}_timeoutLoop(){const e=this.now();let t=this._timeouts.peek();for(;this._timeouts.length&&t&&t.time<=e;)t.callback(),this._timeouts.shift(),t=this._timeouts.peek()}setTimeout(e,t){this._timeoutIds++;const n=this.now();return this._timeouts.add({callback:e,id:this._timeoutIds,time:n+t}),this._timeoutIds}clearTimeout(e){return this._timeouts.forEach((t=>{t.id===e&&this._timeouts.remove(t)})),this}clearInterval(e){return this.clearTimeout(e)}setInterval(e,t){const n=++this._timeoutIds,r=()=>{const i=this.now();this._timeouts.add({callback:()=>{e(),r()},id:n,time:i+t})};return r(),n}}function wa(e,t){Bo(t)?t.forEach((t=>wa(e,t))):Object.defineProperty(e,t,{enumerable:!0,writable:!1})}function ba(e,t){Bo(t)?t.forEach((t=>ba(e,t))):Object.defineProperty(e,t,{writable:!0})}const xa=()=>{};class ka extends aa{constructor(){super(),this.name="ToneAudioBuffer",this.onload=xa;const e=ra(ka.getDefaults(),arguments,["url","onload","onerror"]);this.reverse=e.reverse,this.onload=e.onload,e.url&&ea(e.url)||e.url instanceof ka?this.set(e.url):Uo(e.url)&&this.load(e.url).catch(e.onerror)}static getDefaults(){return{onerror:xa,onload:xa,reverse:!1}}get sampleRate(){return this._buffer?this._buffer.sampleRate:Ta().sampleRate}set(e){return e instanceof ka?e.loaded?this._buffer=e.get():e.onload=()=>{this.set(e),this.onload(this)}:this._buffer=e,this._reversed&&this._reverse(),this}get(){return this._buffer}load(e){return Yo(this,void 0,void 0,(function*(){const t=ka.load(e).then((e=>{this.set(e),this.onload(this)}));ka.downloads.push(t);try{yield t}finally{const e=ka.downloads.indexOf(t);ka.downloads.splice(e,1)}return this}))}dispose(){return super.dispose(),this._buffer=void 0,this}fromArray(e){const t=Bo(e)&&e[0].length>0,n=t?e.length:1,r=t?e[0].length:e.length,i=Ta(),o=i.createBuffer(n,r,i.sampleRate),a=t||1!==n?e:[e];for(let e=0;e<n;e++)o.copyToChannel(a[e],e);return this._buffer=o,this}toMono(e){if(jo(e))this.fromArray(this.toArray(e));else{let e=new Float32Array(this.length);const t=this.numberOfChannels;for(let n=0;n<t;n++){const t=this.toArray(n);for(let n=0;n<t.length;n++)e[n]+=t[n]}e=e.map((e=>e/t)),this.fromArray(e)}return this}toArray(e){if(jo(e))return this.getChannelData(e);if(1===this.numberOfChannels)return this.toArray(0);{const e=[];for(let t=0;t<this.numberOfChannels;t++)e[t]=this.getChannelData(t);return e}}getChannelData(e){return this._buffer?this._buffer.getChannelData(e):new Float32Array(0)}slice(e,t=this.duration){const n=Math.floor(e*this.sampleRate),r=Math.floor(t*this.sampleRate);Do(n<r,"The start time must be less than the end time");const i=r-n,o=Ta().createBuffer(this.numberOfChannels,i,this.sampleRate);for(let e=0;e<this.numberOfChannels;e++)o.copyToChannel(this.getChannelData(e).subarray(n,r),e);return new ka(o)}_reverse(){if(this.loaded)for(let e=0;e<this.numberOfChannels;e++)this.getChannelData(e).reverse();return this}get loaded(){return this.length>0}get duration(){return this._buffer?this._buffer.duration:0}get length(){return this._buffer?this._buffer.length:0}get numberOfChannels(){return this._buffer?this._buffer.numberOfChannels:0}get reverse(){return this._reversed}set reverse(e){this._reversed!==e&&(this._reversed=e,this._reverse())}static fromArray(e){return(new ka).fromArray(e)}static fromUrl(e){return Yo(this,void 0,void 0,(function*(){const t=new ka;return yield t.load(e)}))}static load(e){return Yo(this,void 0,void 0,(function*(){const t=e.match(/\[([^\]\[]+\|.+)\]$/);if(t){const n=t[1].split("|");let r=n[0];for(const e of n)if(ka.supportsType(e)){r=e;break}e=e.replace(t[0],r)}const n=""===ka.baseUrl||ka.baseUrl.endsWith("/")?ka.baseUrl:ka.baseUrl+"/",r=yield fetch(n+e);if(!r.ok)throw new Error(`could not load url: ${e}`);const i=yield r.arrayBuffer();return yield Ta().decodeAudioData(i)}))}static supportsType(e){const t=e.split("."),n=t[t.length-1];return""!==document.createElement("audio").canPlayType("audio/"+n)}static loaded(){return Yo(this,void 0,void 0,(function*(){for(yield Promise.resolve();ka.downloads.length;)yield ka.downloads[0]}))}}ka.baseUrl="",ka.downloads=[];class Ea extends _a{constructor(){var e,t,n;super({clockSource:"offline",context:Ko(arguments[0])?arguments[0]:(e=arguments[0],t=arguments[1]*arguments[2],n=arguments[2],new Co(e,t,n)),lookAhead:0,updateInterval:Ko(arguments[0])?128/arguments[0].sampleRate:128/arguments[2]}),this.name="OfflineContext",this._currentTime=0,this.isOffline=!0,this._duration=Ko(arguments[0])?arguments[0].length/arguments[0].sampleRate:arguments[1]}now(){return this._currentTime}get currentTime(){return this._currentTime}_renderClock(e){return Yo(this,void 0,void 0,(function*(){let t=0;for(;this._duration-this._currentTime>=0;){this.emit("tick"),this._currentTime+=128/this.sampleRate,t++;const n=Math.floor(this.sampleRate/128);e&&t%n==0&&(yield new Promise((e=>setTimeout(e,1))))}}))}render(e=!0){return Yo(this,void 0,void 0,(function*(){yield this.workletsAreReady(),yield this._renderClock(e);const t=yield this._context.startRendering();return new ka(t)}))}close(){return Promise.resolve()}}const Sa=new class extends ya{constructor(){super(...arguments),this.lookAhead=0,this.latencyHint=0,this.isOffline=!1}createAnalyser(){return{}}createOscillator(){return{}}createBufferSource(){return{}}createBiquadFilter(){return{}}createBuffer(e,t,n){return{}}createChannelMerger(e){return{}}createChannelSplitter(e){return{}}createConstantSource(){return{}}createConvolver(){return{}}createDelay(e){return{}}createDynamicsCompressor(){return{}}createGain(){return{}}createIIRFilter(e,t){return{}}createPanner(){return{}}createPeriodicWave(e,t,n){return{}}createStereoPanner(){return{}}createWaveShaper(){return{}}createMediaStreamSource(e){return{}}createMediaElementSource(e){return{}}createMediaStreamDestination(){return{}}decodeAudioData(e){return Promise.resolve({})}createAudioWorkletNode(e,t){return{}}get rawContext(){return{}}addAudioWorkletModule(e,t){return Yo(this,void 0,void 0,(function*(){return Promise.resolve()}))}resume(){return Promise.resolve()}setTimeout(e,t){return 0}clearTimeout(e){return this}setInterval(e,t){return 0}clearInterval(e){return this}getConstant(e){return{}}get currentTime(){return 0}get state(){return{}}get sampleRate(){return 0}get listener(){return{}}get transport(){return{}}get draw(){return{}}set draw(e){}get destination(){return{}}set destination(e){}now(){return 0}immediate(){return 0}};let Ca=Sa;function Ta(){return Ca===Sa&&Go&&function(e){Ca=Jo(e)?new _a(e):Ko(e)?new Ea(e):e}(new _a),Ca}if($o&&!$o.TONE_SILENCE_LOGGING){const e=` * Tone.js ${"v"}14.7.77 * `;console.log(`%c${e}`,"background: #000; color: #fff")}function Aa(e){return Math.pow(2,e/12)}let Oa=440;function Ma(e){return Math.round(Na(e))}function Na(e){return 69+12*Math.log2(e/Oa)}class Da extends aa{constructor(e,t,n){super(),this.defaultUnits="s",this._val=t,this._units=n,this.context=e,this._expressions=this._getExpressions()}_getExpressions(){return{hz:{method:e=>this._frequencyToUnits(parseFloat(e)),regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:e=>this._ticksToUnits(parseInt(e,10)),regexp:/^(\d+)i$/i},m:{method:e=>this._beatsToUnits(parseInt(e,10)*this._getTimeSignature()),regexp:/^(\d+)m$/i},n:{method:(e,t)=>{const n=parseInt(e,10),r="."===t?1.5:1;return 1===n?this._beatsToUnits(this._getTimeSignature())*r:this._beatsToUnits(4/n)*r},regexp:/^(\d+)n(\.?)$/i},number:{method:e=>this._expressions[this.defaultUnits].method.call(this,e),regexp:/^(\d+(?:\.\d+)?)$/},s:{method:e=>this._secondsToUnits(parseFloat(e)),regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:e=>parseInt(e,10)/this.context.sampleRate,regexp:/^(\d+)samples$/},t:{method:e=>{const t=parseInt(e,10);return this._beatsToUnits(8/(3*Math.floor(t)))},regexp:/^(\d+)t$/i},tr:{method:(e,t,n)=>{let r=0;return e&&"0"!==e&&(r+=this._beatsToUnits(this._getTimeSignature()*parseFloat(e))),t&&"0"!==t&&(r+=this._beatsToUnits(parseFloat(t))),n&&"0"!==n&&(r+=this._beatsToUnits(parseFloat(n)/4)),r},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}}valueOf(){if(this._val instanceof Da&&this.fromType(this._val),Vo(this._val))return this._noArg();if(Uo(this._val)&&Vo(this._units)){for(const e in this._expressions)if(this._expressions[e].regexp.test(this._val.trim())){this._units=e;break}}else if(zo(this._val)){let e=0;for(const t in this._val)if(Fo(this._val[t])){const n=this._val[t];e+=new this.constructor(this.context,t).valueOf()*n}return e}if(Fo(this._units)){const e=this._expressions[this._units],t=this._val.toString().trim().match(e.regexp);return t?e.method.apply(this,t.slice(1)):e.method.call(this,this._val)}return Uo(this._val)?parseFloat(this._val):this._val}_frequencyToUnits(e){return 1/e}_beatsToUnits(e){return 60/this._getBpm()*e}_secondsToUnits(e){return e}_ticksToUnits(e){return e*this._beatsToUnits(1)/this._getPPQ()}_noArg(){return this._now()}_getBpm(){return this.context.transport.bpm.value}_getTimeSignature(){return this.context.transport.timeSignature}_getPPQ(){return this.context.transport.PPQ}fromType(e){switch(this._units=void 0,this.defaultUnits){case"s":this._val=e.toSeconds();break;case"i":this._val=e.toTicks();break;case"hz":this._val=e.toFrequency();break;case"midi":this._val=e.toMidi()}return this}toFrequency(){return 1/this.toSeconds()}toSamples(){return this.toSeconds()*this.context.sampleRate}toMilliseconds(){return 1e3*this.toSeconds()}}class Pa extends Da{constructor(){super(...arguments),this.name="TimeClass"}_getExpressions(){return Object.assign(super._getExpressions(),{now:{method:e=>this._now()+new this.constructor(this.context,e).valueOf(),regexp:/^\+(.+)/},quantize:{method:e=>{const t=new Pa(this.context,e).valueOf();return this._secondsToUnits(this.context.transport.nextSubdivision(t))},regexp:/^@(.+)/}})}quantize(e,t=1){const n=new this.constructor(this.context,e).valueOf(),r=this.valueOf();return r+(Math.round(r/n)*n-r)*t}toNotation(){const e=this.toSeconds(),t=["1m"];for(let e=1;e<9;e++){const n=Math.pow(2,e);t.push(n+"n."),t.push(n+"n"),t.push(n+"t")}t.push("0");let n=t[0],r=new Pa(this.context,t[0]).toSeconds();return t.forEach((t=>{const i=new Pa(this.context,t).toSeconds();Math.abs(i-e)<Math.abs(r-e)&&(n=t,r=i)})),n}toBarsBeatsSixteenths(){const e=this._beatsToUnits(1);let t=this.valueOf()/e;t=parseFloat(t.toFixed(4));const n=Math.floor(t/this._getTimeSignature());let r=t%1*4;t=Math.floor(t)%this._getTimeSignature();const i=r.toString();return i.length>3&&(r=parseFloat(parseFloat(i).toFixed(3))),[n,t,r].join(":")}toTicks(){const e=this._beatsToUnits(1),t=this.valueOf()/e;return Math.round(t*this._getPPQ())}toSeconds(){return this.valueOf()}toMidi(){return Ma(this.toFrequency())}_now(){return this.context.now()}}class Ra extends Pa{constructor(){super(...arguments),this.name="Frequency",this.defaultUnits="hz"}static get A4(){return Oa}static set A4(e){!function(e){Oa=e}(e)}_getExpressions(){return Object.assign({},super._getExpressions(),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method(e){return"midi"===this.defaultUnits?e:Ra.mtof(e)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method(e,t){const n=Ia[e.toLowerCase()]+12*(parseInt(t,10)+1);return"midi"===this.defaultUnits?n:Ra.mtof(n)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method(e,t,n){let r=1;return e&&"0"!==e&&(r*=this._beatsToUnits(this._getTimeSignature()*parseFloat(e))),t&&"0"!==t&&(r*=this._beatsToUnits(parseFloat(t))),n&&"0"!==n&&(r*=this._beatsToUnits(parseFloat(n)/4)),r}}})}transpose(e){return new Ra(this.context,this.valueOf()*Aa(e))}harmonize(e){return e.map((e=>this.transpose(e)))}toMidi(){return Ma(this.valueOf())}toNote(){const e=this.toFrequency(),t=Math.log2(e/Ra.A4);let n=Math.round(12*t)+57;const r=Math.floor(n/12);return r<0&&(n+=-12*r),La[n%12]+r.toString()}toSeconds(){return 1/super.toSeconds()}toTicks(){const e=this._beatsToUnits(1),t=this.valueOf()/e;return Math.floor(t*this._getPPQ())}_noArg(){return 0}_frequencyToUnits(e){return e}_ticksToUnits(e){return 1/(60*e/(this._getBpm()*this._getPPQ()))}_beatsToUnits(e){return 1/super._beatsToUnits(e)}_secondsToUnits(e){return 1/e}static mtof(e){return function(e){return Oa*Math.pow(2,(e-69)/12)}(e)}static ftom(e){return Ma(e)}}const Ia={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},La=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];class Va extends Pa{constructor(){super(...arguments),this.name="TransportTime"}_now(){return this.context.transport.seconds}}class Fa extends aa{constructor(){super();const e=ra(Fa.getDefaults(),arguments,["context"]);this.defaultContext?this.context=this.defaultContext:this.context=e.context}static getDefaults(){return{context:Ta()}}now(){return this.context.currentTime+this.context.lookAhead}immediate(){return this.context.currentTime}get sampleTime(){return 1/this.context.sampleRate}get blockTime(){return 128/this.context.sampleRate}toSeconds(e){return new Pa(this.context,e).toSeconds()}toFrequency(e){return new Ra(this.context,e).toFrequency()}toTicks(e){return new Va(this.context,e).toTicks()}_getPartialProperties(e){const t=this.get();return Object.keys(t).forEach((n=>{Vo(e[n])&&delete t[n]})),t}get(){const e=this.constructor.getDefaults();return Object.keys(e).forEach((t=>{if(Reflect.has(this,t)){const n=this[t];Fo(n)&&Fo(n.value)&&Fo(n.setValueAtTime)?e[t]=n.value:n instanceof Fa?e[t]=n._getPartialProperties(e[t]):Bo(n)||jo(n)||Uo(n)||qo(n)?e[t]=n:delete e[t]}})),e}set(e){return Object.keys(e).forEach((t=>{Reflect.has(this,t)&&Fo(this[t])&&(this[t]&&Fo(this[t].value)&&Fo(this[t].setValueAtTime)?this[t].value!==e[t]&&(this[t].value=e[t]):this[t]instanceof Fa?this[t].set(e[t]):this[t]=e[t])})),this}}class ja extends da{constructor(e="stopped"){super(),this.name="StateTimeline",this._initial=e,this.setStateAtTime(this._initial,0)}getValueAtTime(e){const t=this.get(e);return null!==t?t.state:this._initial}setStateAtTime(e,t,n){return Po(t,0),this.add(Object.assign({},n,{state:e,time:t})),this}getLastState(e,t){for(let n=this._search(t);n>=0;n--){const t=this._timeline[n];if(t.state===e)return t}}getNextState(e,t){const n=this._search(t);if(-1!==n)for(let t=n;t<this._timeline.length;t++){const n=this._timeline[t];if(n.state===e)return n}}}class za extends Fa{constructor(){super(ra(za.getDefaults(),arguments,["param","units","convert"])),this.name="Param",this.overridden=!1,this._minOutput=1e-7;const e=ra(za.getDefaults(),arguments,["param","units","convert"]);for(Do(Fo(e.param)&&(Qo(e.param)||e.param instanceof za),"param must be an AudioParam");!Qo(e.param);)e.param=e.param._param;this._swappable=!!Fo(e.swappable)&&e.swappable,this._swappable?(this.input=this.context.createGain(),this._param=e.param,this.input.connect(this._param)):this._param=this.input=e.param,this._events=new da(1e3),this._initialValue=this._param.defaultValue,this.units=e.units,this.convert=e.convert,this._minValue=e.minValue,this._maxValue=e.maxValue,Fo(e.value)&&e.value!==this._toType(this._initialValue)&&this.setValueAtTime(e.value,0)}static getDefaults(){return Object.assign(Fa.getDefaults(),{convert:!0,units:"number"})}get value(){const e=this.now();return this.getValueAtTime(e)}set value(e){this.cancelScheduledValues(this.now()),this.setValueAtTime(e,this.now())}get minValue(){return Fo(this._minValue)?this._minValue:"time"===this.units||"frequency"===this.units||"normalRange"===this.units||"positive"===this.units||"transportTime"===this.units||"ticks"===this.units||"bpm"===this.units||"hertz"===this.units||"samples"===this.units?0:"audioRange"===this.units?-1:"decibels"===this.units?-1/0:this._param.minValue}get maxValue(){return Fo(this._maxValue)?this._maxValue:"normalRange"===this.units||"audioRange"===this.units?1:this._param.maxValue}_is(e,t){return this.units===t}_assertRange(e){return Fo(this.maxValue)&&Fo(this.minValue)&&Po(e,this._fromType(this.minValue),this._fromType(this.maxValue)),e}_fromType(e){return this.convert&&!this.overridden?this._is(e,"time")?this.toSeconds(e):this._is(e,"decibels")?(t=e,Math.pow(10,t/20)):this._is(e,"frequency")?this.toFrequency(e):e:this.overridden?0:e;var t}_toType(e){return this.convert&&"decibels"===this.units?(t=e,Math.log(t)/Math.LN10*20):e;var t}setValueAtTime(e,t){const n=this.toSeconds(t),r=this._fromType(e);return Do(isFinite(r)&&isFinite(n),`Invalid argument(s) to setValueAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._assertRange(r),this.log(this.units,"setValueAtTime",e,n),this._events.add({time:n,type:"setValueAtTime",value:r}),this._param.setValueAtTime(r,n),this}getValueAtTime(e){const t=Math.max(this.toSeconds(e),0),n=this._events.getAfter(t),r=this._events.get(t);let i=this._initialValue;if(null===r)i=this._initialValue;else if("setTargetAtTime"!==r.type||null!==n&&"setValueAtTime"!==n.type)if(null===n)i=r.value;else if("linearRampToValueAtTime"===n.type||"exponentialRampToValueAtTime"===n.type){let e=r.value;if("setTargetAtTime"===r.type){const t=this._events.getBefore(r.time);e=null===t?this._initialValue:t.value}i="linearRampToValueAtTime"===n.type?this._linearInterpolate(r.time,e,n.time,n.value,t):this._exponentialInterpolate(r.time,e,n.time,n.value,t)}else i=r.value;else{const e=this._events.getBefore(r.time);let n;n=null===e?this._initialValue:e.value,"setTargetAtTime"===r.type&&(i=this._exponentialApproach(r.time,n,r.value,r.constant,t))}return this._toType(i)}setRampPoint(e){e=this.toSeconds(e);let t=this.getValueAtTime(e);return this.cancelAndHoldAtTime(e),0===this._fromType(t)&&(t=this._toType(this._minOutput)),this.setValueAtTime(t,e),this}linearRampToValueAtTime(e,t){const n=this._fromType(e),r=this.toSeconds(t);return Do(isFinite(n)&&isFinite(r),`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._assertRange(n),this._events.add({time:r,type:"linearRampToValueAtTime",value:n}),this.log(this.units,"linearRampToValueAtTime",e,r),this._param.linearRampToValueAtTime(n,r),this}exponentialRampToValueAtTime(e,t){let n=this._fromType(e);n=ha(n,0)?this._minOutput:n,this._assertRange(n);const r=this.toSeconds(t);return Do(isFinite(n)&&isFinite(r),`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._events.add({time:r,type:"exponentialRampToValueAtTime",value:n}),this.log(this.units,"exponentialRampToValueAtTime",e,r),this._param.exponentialRampToValueAtTime(n,r),this}exponentialRampTo(e,t,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialRampToValueAtTime(e,n+this.toSeconds(t)),this}linearRampTo(e,t,n){return n=this.toSeconds(n),this.setRampPoint(n),this.linearRampToValueAtTime(e,n+this.toSeconds(t)),this}targetRampTo(e,t,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialApproachValueAtTime(e,n,t),this}exponentialApproachValueAtTime(e,t,n){t=this.toSeconds(t),n=this.toSeconds(n);const r=Math.log(n+1)/Math.log(200);return this.setTargetAtTime(e,t,r),this.cancelAndHoldAtTime(t+.9*n),this.linearRampToValueAtTime(e,t+n),this}setTargetAtTime(e,t,n){const r=this._fromType(e);Do(isFinite(n)&&n>0,"timeConstant must be a number greater than 0");const i=this.toSeconds(t);return this._assertRange(r),Do(isFinite(r)&&isFinite(i),`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._events.add({constant:n,time:i,type:"setTargetAtTime",value:r}),this.log(this.units,"setTargetAtTime",e,i,n),this._param.setTargetAtTime(r,i,n),this}setValueCurveAtTime(e,t,n,r=1){n=this.toSeconds(n),t=this.toSeconds(t);const i=this._fromType(e[0])*r;this.setValueAtTime(this._toType(i),t);const o=n/(e.length-1);for(let n=1;n<e.length;n++){const i=this._fromType(e[n])*r;this.linearRampToValueAtTime(this._toType(i),t+n*o)}return this}cancelScheduledValues(e){const t=this.toSeconds(e);return Do(isFinite(t),`Invalid argument to cancelScheduledValues: ${JSON.stringify(e)}`),this._events.cancel(t),this._param.cancelScheduledValues(t),this.log(this.units,"cancelScheduledValues",t),this}cancelAndHoldAtTime(e){const t=this.toSeconds(e),n=this._fromType(this.getValueAtTime(t));Do(isFinite(t),`Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(e)}`),this.log(this.units,"cancelAndHoldAtTime",t,"value="+n);const r=this._events.get(t),i=this._events.getAfter(t);return r&&ha(r.time,t)?i?(this._param.cancelScheduledValues(i.time),this._events.cancel(i.time)):(this._param.cancelAndHoldAtTime(t),this._events.cancel(t+this.sampleTime)):i&&(this._param.cancelScheduledValues(i.time),this._events.cancel(i.time),"linearRampToValueAtTime"===i.type?this.linearRampToValueAtTime(this._toType(n),t):"exponentialRampToValueAtTime"===i.type&&this.exponentialRampToValueAtTime(this._toType(n),t)),this._events.add({time:t,type:"setValueAtTime",value:n}),this._param.setValueAtTime(n,t),this}rampTo(e,t=.1,n){return"frequency"===this.units||"bpm"===this.units||"decibels"===this.units?this.exponentialRampTo(e,t,n):this.linearRampTo(e,t,n),this}apply(e){const t=this.context.currentTime;e.setValueAtTime(this.getValueAtTime(t),t);const n=this._events.get(t);if(n&&"setTargetAtTime"===n.type){const r=this._events.getAfter(n.time),i=r?r.time:t+2,o=(i-t)/10;for(let n=t;n<i;n+=o)e.linearRampToValueAtTime(this.getValueAtTime(n),n)}return this._events.forEachAfter(this.context.currentTime,(t=>{"cancelScheduledValues"===t.type?e.cancelScheduledValues(t.time):"setTargetAtTime"===t.type?e.setTargetAtTime(t.value,t.time,t.constant):e[t.type](t.value,t.time)})),this}setParam(e){Do(this._swappable,"The Param must be assigned as 'swappable' in the constructor");const t=this.input;return t.disconnect(this._param),this.apply(e),this._param=e,t.connect(this._param),this}dispose(){return super.dispose(),this._events.dispose(),this}get defaultValue(){return this._toType(this._param.defaultValue)}_exponentialApproach(e,t,n,r,i){return n+(t-n)*Math.exp(-(i-e)/r)}_linearInterpolate(e,t,n,r,i){return t+(i-e)/(n-e)*(r-t)}_exponentialInterpolate(e,t,n,r,i){return t*Math.pow(r/t,(i-e)/(n-e))}}class qa extends Fa{constructor(){super(...arguments),this.name="ToneAudioNode",this._internalChannels=[]}get numberOfInputs(){return Fo(this.input)?Qo(this.input)||this.input instanceof za?1:this.input.numberOfInputs:0}get numberOfOutputs(){return Fo(this.output)?this.output.numberOfOutputs:0}_isAudioNode(e){return Fo(e)&&(e instanceof qa||Zo(e))}_getInternalNodes(){const e=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&e.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&e.push(this.output),e}_setChannelProperties(e){this._getInternalNodes().forEach((t=>{t.channelCount=e.channelCount,t.channelCountMode=e.channelCountMode,t.channelInterpretation=e.channelInterpretation}))}_getChannelProperties(){const e=this._getInternalNodes();Do(e.length>0,"ToneAudioNode does not have any internal nodes");const t=e[0];return{channelCount:t.channelCount,channelCountMode:t.channelCountMode,channelInterpretation:t.channelInterpretation}}get channelCount(){return this._getChannelProperties().channelCount}set channelCount(e){const t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelCount:e}))}get channelCountMode(){return this._getChannelProperties().channelCountMode}set channelCountMode(e){const t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelCountMode:e}))}get channelInterpretation(){return this._getChannelProperties().channelInterpretation}set channelInterpretation(e){const t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelInterpretation:e}))}connect(e,t=0,n=0){return Ua(this,e,t,n),this}toDestination(){return this.connect(this.context.destination),this}toMaster(){return Lo("toMaster() has been renamed toDestination()"),this.toDestination()}disconnect(e,t=0,n=0){return function(e,t,n=0,r=0){if(Fo(t))for(;t instanceof qa;)t=t.input;for(;!Zo(e);)Fo(e.output)&&(e=e.output);Qo(t)?e.disconnect(t,n):Zo(t)?e.disconnect(t,n,r):e.disconnect()}(this,e,t,n),this}chain(...e){return Ba(this,...e),this}fan(...e){return e.forEach((e=>this.connect(e))),this}dispose(){return super.dispose(),Fo(this.input)&&(this.input instanceof qa?this.input.dispose():Zo(this.input)&&this.input.disconnect()),Fo(this.output)&&(this.output instanceof qa?this.output.dispose():Zo(this.output)&&this.output.disconnect()),this._internalChannels=[],this}}function Ba(...e){const t=e.shift();e.reduce(((e,t)=>(e instanceof qa?e.connect(t):Zo(e)&&Ua(e,t),t)),t)}function Ua(e,t,n=0,r=0){for(Do(Fo(e),"Cannot connect from undefined node"),Do(Fo(t),"Cannot connect to undefined node"),(t instanceof qa||Zo(t))&&Do(t.numberOfInputs>0,"Cannot connect to node with no inputs"),Do(e.numberOfOutputs>0,"Cannot connect from node with no outputs");t instanceof qa||t instanceof za;)Fo(t.input)&&(t=t.input);for(;e instanceof qa;)Fo(e.output)&&(e=e.output);Qo(t)?e.connect(t,n):e.connect(t,n,r)}class Wa extends qa{constructor(){super(ra(Wa.getDefaults(),arguments,["gain","units"])),this.name="Gain",this._gainNode=this.context.createGain(),this.input=this._gainNode,this.output=this._gainNode;const e=ra(Wa.getDefaults(),arguments,["gain","units"]);this.gain=new za({context:this.context,convert:e.convert,param:this._gainNode.gain,units:e.units,value:e.gain,minValue:e.minValue,maxValue:e.maxValue}),wa(this,"gain")}static getDefaults(){return Object.assign(qa.getDefaults(),{convert:!0,gain:1,units:"gain"})}dispose(){return super.dispose(),this._gainNode.disconnect(),this.gain.dispose(),this}}class $a extends qa{constructor(e){super(e),this.onended=xa,this._startTime=-1,this._stopTime=-1,this._timeout=-1,this.output=new Wa({context:this.context,gain:0}),this._gainNode=this.output,this.getStateAtTime=function(e){const t=this.toSeconds(e);return-1!==this._startTime&&t>=this._startTime&&(-1===this._stopTime||t<=this._stopTime)?"started":"stopped"},this._fadeIn=e.fadeIn,this._fadeOut=e.fadeOut,this._curve=e.curve,this.onended=e.onended}static getDefaults(){return Object.assign(qa.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:xa})}_startGain(e,t=1){Do(-1===this._startTime,"Source cannot be started more than once");const n=this.toSeconds(this._fadeIn);return this._startTime=e+n,this._startTime=Math.max(this._startTime,this.context.currentTime),n>0?(this._gainNode.gain.setValueAtTime(0,e),"linear"===this._curve?this._gainNode.gain.linearRampToValueAtTime(t,e+n):this._gainNode.gain.exponentialApproachValueAtTime(t,e,n)):this._gainNode.gain.setValueAtTime(t,e),this}stop(e){return this.log("stop",e),this._stopGain(this.toSeconds(e)),this}_stopGain(e){Do(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop();const t=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(e)+t,this._stopTime=Math.max(this._stopTime,this.context.currentTime),t>0?"linear"===this._curve?this._gainNode.gain.linearRampTo(0,t,e):this._gainNode.gain.targetRampTo(0,t,e):(this._gainNode.gain.cancelAndHoldAtTime(e),this._gainNode.gain.setValueAtTime(0,e)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout((()=>{const e="exponential"===this._curve?2*t:0;this._stopSource(this.now()+e),this._onended()}),this._stopTime-this.context.currentTime),this}_onended(){if(this.onended!==xa&&(this.onended(this),this.onended=xa,!this.context.isOffline)){const e=()=>this.dispose();void 0!==window.requestIdleCallback?window.requestIdleCallback(e):setTimeout(e,1e3)}}get state(){return this.getStateAtTime(this.now())}cancelStop(){return this.log("cancelStop"),Do(-1!==this._startTime,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this}dispose(){return super.dispose(),this._gainNode.disconnect(),this}}class Ga extends $a{constructor(){super(ra(Ga.getDefaults(),arguments,["offset"])),this.name="ToneConstantSource",this._source=this.context.createConstantSource();const e=ra(Ga.getDefaults(),arguments,["offset"]);Ua(this._source,this._gainNode),this.offset=new za({context:this.context,convert:e.convert,param:this._source.offset,units:e.units,value:e.offset,minValue:e.minValue,maxValue:e.maxValue})}static getDefaults(){return Object.assign($a.getDefaults(),{convert:!0,offset:1,units:"number"})}start(e){const t=this.toSeconds(e);return this.log("start",t),this._startGain(t),this._source.start(t),this}_stopSource(e){this._source.stop(e)}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._source.disconnect(),this.offset.dispose(),this}}class Ha extends qa{constructor(){super(ra(Ha.getDefaults(),arguments,["value","units"])),this.name="Signal",this.override=!0;const e=ra(Ha.getDefaults(),arguments,["value","units"]);this.output=this._constantSource=new Ga({context:this.context,convert:e.convert,offset:e.value,units:e.units,minValue:e.minValue,maxValue:e.maxValue}),this._constantSource.start(0),this.input=this._param=this._constantSource.offset}static getDefaults(){return Object.assign(qa.getDefaults(),{convert:!0,units:"number",value:0})}connect(e,t=0,n=0){return Ya(this,e,t,n),this}dispose(){return super.dispose(),this._param.dispose(),this._constantSource.dispose(),this}setValueAtTime(e,t){return this._param.setValueAtTime(e,t),this}getValueAtTime(e){return this._param.getValueAtTime(e)}setRampPoint(e){return this._param.setRampPoint(e),this}linearRampToValueAtTime(e,t){return this._param.linearRampToValueAtTime(e,t),this}exponentialRampToValueAtTime(e,t){return this._param.exponentialRampToValueAtTime(e,t),this}exponentialRampTo(e,t,n){return this._param.exponentialRampTo(e,t,n),this}linearRampTo(e,t,n){return this._param.linearRampTo(e,t,n),this}targetRampTo(e,t,n){return this._param.targetRampTo(e,t,n),this}exponentialApproachValueAtTime(e,t,n){return this._param.exponentialApproachValueAtTime(e,t,n),this}setTargetAtTime(e,t,n){return this._param.setTargetAtTime(e,t,n),this}setValueCurveAtTime(e,t,n,r){return this._param.setValueCurveAtTime(e,t,n,r),this}cancelScheduledValues(e){return this._param.cancelScheduledValues(e),this}cancelAndHoldAtTime(e){return this._param.cancelAndHoldAtTime(e),this}rampTo(e,t,n){return this._param.rampTo(e,t,n),this}get value(){return this._param.value}set value(e){this._param.value=e}get convert(){return this._param.convert}set convert(e){this._param.convert=e}get units(){return this._param.units}get overridden(){return this._param.overridden}set overridden(e){this._param.overridden=e}get maxValue(){return this._param.maxValue}get minValue(){return this._param.minValue}apply(e){return this._param.apply(e),this}}function Ya(e,t,n,r){(t instanceof za||Qo(t)||t instanceof Ha&&t.override)&&(t.cancelScheduledValues(0),t.setValueAtTime(0,0),t instanceof Ha&&(t.overridden=!0)),Ua(e,t,n,r)}class Xa extends za{constructor(){super(ra(Xa.getDefaults(),arguments,["value"])),this.name="TickParam",this._events=new da(1/0),this._multiplier=1;const e=ra(Xa.getDefaults(),arguments,["value"]);this._multiplier=e.multiplier,this._events.cancel(0),this._events.add({ticks:0,time:0,type:"setValueAtTime",value:this._fromType(e.value)}),this.setValueAtTime(e.value,0)}static getDefaults(){return Object.assign(za.getDefaults(),{multiplier:1,units:"hertz",value:1})}setTargetAtTime(e,t,n){t=this.toSeconds(t),this.setRampPoint(t);const r=this._fromType(e),i=this._events.get(t),o=Math.round(Math.max(1/n,1));for(let e=0;e<=o;e++){const o=n*e+t,a=this._exponentialApproach(i.time,i.value,r,n,o);this.linearRampToValueAtTime(this._toType(a),o)}return this}setValueAtTime(e,t){const n=this.toSeconds(t);super.setValueAtTime(e,t);const r=this._events.get(n),i=this._events.previousEvent(r),o=this._getTicksUntilEvent(i,n);return r.ticks=Math.max(o,0),this}linearRampToValueAtTime(e,t){const n=this.toSeconds(t);super.linearRampToValueAtTime(e,t);const r=this._events.get(n),i=this._events.previousEvent(r),o=this._getTicksUntilEvent(i,n);return r.ticks=Math.max(o,0),this}exponentialRampToValueAtTime(e,t){t=this.toSeconds(t);const n=this._fromType(e),r=this._events.get(t),i=Math.round(Math.max(10*(t-r.time),1)),o=(t-r.time)/i;for(let e=0;e<=i;e++){const i=o*e+r.time,a=this._exponentialInterpolate(r.time,r.value,t,n,i);this.linearRampToValueAtTime(this._toType(a),i)}return this}_getTicksUntilEvent(e,t){if(null===e)e={ticks:0,time:0,type:"setValueAtTime",value:0};else if(Vo(e.ticks)){const t=this._events.previousEvent(e);e.ticks=this._getTicksUntilEvent(t,e.time)}const n=this._fromType(this.getValueAtTime(e.time));let r=this._fromType(this.getValueAtTime(t));const i=this._events.get(t);return i&&i.time===t&&"setValueAtTime"===i.type&&(r=this._fromType(this.getValueAtTime(t-this.sampleTime))),.5*(t-e.time)*(n+r)+e.ticks}getTicksAtTime(e){const t=this.toSeconds(e),n=this._events.get(t);return Math.max(this._getTicksUntilEvent(n,t),0)}getDurationOfTicks(e,t){const n=this.toSeconds(t),r=this.getTicksAtTime(t);return this.getTimeOfTick(r+e)-n}getTimeOfTick(e){const t=this._events.get(e,"ticks"),n=this._events.getAfter(e,"ticks");if(t&&t.ticks===e)return t.time;if(t&&n&&"linearRampToValueAtTime"===n.type&&t.value!==n.value){const r=this._fromType(this.getValueAtTime(t.time)),i=(this._fromType(this.getValueAtTime(n.time))-r)/(n.time-t.time),o=Math.sqrt(Math.pow(r,2)-2*i*(t.ticks-e)),a=(-r+o)/i,s=(-r-o)/i;return(a>0?a:s)+t.time}return t?0===t.value?1/0:t.time+(e-t.ticks)/t.value:e/this._initialValue}ticksToTime(e,t){return this.getDurationOfTicks(e,t)}timeToTicks(e,t){const n=this.toSeconds(t),r=this.toSeconds(e),i=this.getTicksAtTime(n);return this.getTicksAtTime(n+r)-i}_fromType(e){return"bpm"===this.units&&this.multiplier?1/(60/e/this.multiplier):super._fromType(e)}_toType(e){return"bpm"===this.units&&this.multiplier?e/this.multiplier*60:super._toType(e)}get multiplier(){return this._multiplier}set multiplier(e){const t=this.value;this._multiplier=e,this.cancelScheduledValues(0),this.setValueAtTime(t,0)}}class Qa extends Ha{constructor(){super(ra(Qa.getDefaults(),arguments,["value"])),this.name="TickSignal";const e=ra(Qa.getDefaults(),arguments,["value"]);this.input=this._param=new Xa({context:this.context,convert:e.convert,multiplier:e.multiplier,param:this._constantSource.offset,units:e.units,value:e.value})}static getDefaults(){return Object.assign(Ha.getDefaults(),{multiplier:1,units:"hertz",value:1})}ticksToTime(e,t){return this._param.ticksToTime(e,t)}timeToTicks(e,t){return this._param.timeToTicks(e,t)}getTimeOfTick(e){return this._param.getTimeOfTick(e)}getDurationOfTicks(e,t){return this._param.getDurationOfTicks(e,t)}getTicksAtTime(e){return this._param.getTicksAtTime(e)}get multiplier(){return this._param.multiplier}set multiplier(e){this._param.multiplier=e}dispose(){return super.dispose(),this._param.dispose(),this}}class Za extends Fa{constructor(){super(ra(Za.getDefaults(),arguments,["frequency"])),this.name="TickSource",this._state=new ja,this._tickOffset=new da;const e=ra(Za.getDefaults(),arguments,["frequency"]);this.frequency=new Qa({context:this.context,units:e.units,value:e.frequency}),wa(this,"frequency"),this._state.setStateAtTime("stopped",0),this.setTicksAtTime(0,0)}static getDefaults(){return Object.assign({frequency:1,units:"hertz"},Fa.getDefaults())}get state(){return this.getStateAtTime(this.now())}start(e,t){const n=this.toSeconds(e);return"started"!==this._state.getValueAtTime(n)&&(this._state.setStateAtTime("started",n),Fo(t)&&this.setTicksAtTime(t,n)),this}stop(e){const t=this.toSeconds(e);if("stopped"===this._state.getValueAtTime(t)){const e=this._state.get(t);e&&e.time>0&&(this._tickOffset.cancel(e.time),this._state.cancel(e.time))}return this._state.cancel(t),this._state.setStateAtTime("stopped",t),this.setTicksAtTime(0,t),this}pause(e){const t=this.toSeconds(e);return"started"===this._state.getValueAtTime(t)&&this._state.setStateAtTime("paused",t),this}cancel(e){return e=this.toSeconds(e),this._state.cancel(e),this._tickOffset.cancel(e),this}getTicksAtTime(e){const t=this.toSeconds(e),n=this._state.getLastState("stopped",t),r={state:"paused",time:t};this._state.add(r);let i=n,o=0;return this._state.forEachBetween(n.time,t+this.sampleTime,(e=>{let t=i.time;const n=this._tickOffset.get(e.time);n&&n.time>=i.time&&(o=n.ticks,t=n.time),"started"===i.state&&"started"!==e.state&&(o+=this.frequency.getTicksAtTime(e.time)-this.frequency.getTicksAtTime(t)),i=e})),this._state.remove(r),o}get ticks(){return this.getTicksAtTime(this.now())}set ticks(e){this.setTicksAtTime(e,this.now())}get seconds(){return this.getSecondsAtTime(this.now())}set seconds(e){const t=this.now(),n=this.frequency.timeToTicks(e,t);this.setTicksAtTime(n,t)}getSecondsAtTime(e){e=this.toSeconds(e);const t=this._state.getLastState("stopped",e),n={state:"paused",time:e};this._state.add(n);let r=t,i=0;return this._state.forEachBetween(t.time,e+this.sampleTime,(e=>{let t=r.time;const n=this._tickOffset.get(e.time);n&&n.time>=r.time&&(i=n.seconds,t=n.time),"started"===r.state&&"started"!==e.state&&(i+=e.time-t),r=e})),this._state.remove(n),i}setTicksAtTime(e,t){return t=this.toSeconds(t),this._tickOffset.cancel(t),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(e,t),ticks:e,time:t}),this}getStateAtTime(e){return e=this.toSeconds(e),this._state.getValueAtTime(e)}getTimeOfTick(e,t=this.now()){const n=this._tickOffset.get(t),r=this._state.get(t),i=Math.max(n.time,r.time),o=this.frequency.getTicksAtTime(i)+e-n.ticks;return this.frequency.getTimeOfTick(o)}forEachTickBetween(e,t,n){let r=this._state.get(e);this._state.forEachBetween(e,t,(t=>{r&&"started"===r.state&&"started"!==t.state&&this.forEachTickBetween(Math.max(r.time,e),t.time-this.sampleTime,n),r=t}));let i=null;if(r&&"started"===r.state){const o=Math.max(r.time,e),a=this.frequency.getTicksAtTime(o),s=a-this.frequency.getTicksAtTime(r.time);let l=Math.ceil(s)-s;l=ha(l,1)?0:l;let u=this.frequency.getTimeOfTick(a+l);for(;u<t;){try{n(u,Math.round(this.getTicksAtTime(u)))}catch(e){i=e;break}u+=this.frequency.getDurationOfTicks(1,u)}}if(i)throw i;return this}dispose(){return super.dispose(),this._state.dispose(),this._tickOffset.dispose(),this.frequency.dispose(),this}}class Ka extends Fa{constructor(){super(ra(Ka.getDefaults(),arguments,["callback","frequency"])),this.name="Clock",this.callback=xa,this._lastUpdate=0,this._state=new ja("stopped"),this._boundLoop=this._loop.bind(this);const e=ra(Ka.getDefaults(),arguments,["callback","frequency"]);this.callback=e.callback,this._tickSource=new Za({context:this.context,frequency:e.frequency,units:e.units}),this._lastUpdate=0,this.frequency=this._tickSource.frequency,wa(this,"frequency"),this._state.setStateAtTime("stopped",0),this.context.on("tick",this._boundLoop)}static getDefaults(){return Object.assign(Fa.getDefaults(),{callback:xa,frequency:1,units:"hertz"})}get state(){return this._state.getValueAtTime(this.now())}start(e,t){Ro(this.context);const n=this.toSeconds(e);return this.log("start",n),"started"!==this._state.getValueAtTime(n)&&(this._state.setStateAtTime("started",n),this._tickSource.start(n,t),n<this._lastUpdate&&this.emit("start",n,t)),this}stop(e){const t=this.toSeconds(e);return this.log("stop",t),this._state.cancel(t),this._state.setStateAtTime("stopped",t),this._tickSource.stop(t),t<this._lastUpdate&&this.emit("stop",t),this}pause(e){const t=this.toSeconds(e);return"started"===this._state.getValueAtTime(t)&&(this._state.setStateAtTime("paused",t),this._tickSource.pause(t),t<this._lastUpdate&&this.emit("pause",t)),this}get ticks(){return Math.ceil(this.getTicksAtTime(this.now()))}set ticks(e){this._tickSource.ticks=e}get seconds(){return this._tickSource.seconds}set seconds(e){this._tickSource.seconds=e}getSecondsAtTime(e){return this._tickSource.getSecondsAtTime(e)}setTicksAtTime(e,t){return this._tickSource.setTicksAtTime(e,t),this}getTimeOfTick(e,t=this.now()){return this._tickSource.getTimeOfTick(e,t)}getTicksAtTime(e){return this._tickSource.getTicksAtTime(e)}nextTickTime(e,t){const n=this.toSeconds(t),r=this.getTicksAtTime(n);return this._tickSource.getTimeOfTick(r+e,n)}_loop(){const e=this._lastUpdate,t=this.now();this._lastUpdate=t,this.log("loop",e,t),e!==t&&(this._state.forEachBetween(e,t,(e=>{switch(e.state){case"started":const t=this._tickSource.getTicksAtTime(e.time);this.emit("start",e.time,t);break;case"stopped":0!==e.time&&this.emit("stop",e.time);break;case"paused":this.emit("pause",e.time)}})),this._tickSource.forEachTickBetween(e,t,((e,t)=>{this.callback(e,t)})))}getStateAtTime(e){const t=this.toSeconds(e);return this._state.getValueAtTime(t)}dispose(){return super.dispose(),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this}}va.mixin(Ka);class Ja extends aa{constructor(){super(),this.name="ToneAudioBuffers",this._buffers=new Map,this._loadingCount=0;const e=ra(Ja.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");this.baseUrl=e.baseUrl,Object.keys(e.urls).forEach((t=>{this._loadingCount++;const n=e.urls[t];this.add(t,n,this._bufferLoaded.bind(this,e.onload),e.onerror)}))}static getDefaults(){return{baseUrl:"",onerror:xa,onload:xa,urls:{}}}has(e){return this._buffers.has(e.toString())}get(e){return Do(this.has(e),`ToneAudioBuffers has no buffer named: ${e}`),this._buffers.get(e.toString())}_bufferLoaded(e){this._loadingCount--,0===this._loadingCount&&e&&e()}get loaded(){return Array.from(this._buffers).every((([e,t])=>t.loaded))}add(e,t,n=xa,r=xa){return Uo(t)?this._buffers.set(e.toString(),new ka(this.baseUrl+t,n,r)):this._buffers.set(e.toString(),new ka(t,n,r)),this}dispose(){return super.dispose(),this._buffers.forEach((e=>e.dispose())),this._buffers.clear(),this}}class es extends Va{constructor(){super(...arguments),this.name="Ticks",this.defaultUnits="i"}_now(){return this.context.transport.ticks}_beatsToUnits(e){return this._getPPQ()*e}_secondsToUnits(e){return Math.floor(e/(60/this._getBpm())*this._getPPQ())}_ticksToUnits(e){return e}toTicks(){return this.valueOf()}toSeconds(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())}}class ts extends Fa{constructor(){super(...arguments),this.name="Draw",this.expiration=.25,this.anticipation=.008,this._events=new da,this._boundDrawLoop=this._drawLoop.bind(this),this._animationFrame=-1}schedule(e,t){return this._events.add({callback:e,time:this.toSeconds(t)}),1===this._events.length&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this}cancel(e){return this._events.cancel(this.toSeconds(e)),this}_drawLoop(){const e=this.context.currentTime;for(;this._events.length&&this._events.peek().time-this.anticipation<=e;){const t=this._events.shift();t&&e-t.time<=this.expiration&&t.callback()}this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))}dispose(){return super.dispose(),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this}}pa((e=>{e.draw=new ts({context:e})})),ga((e=>{e.draw.dispose()}));class ns extends aa{constructor(){super(...arguments),this.name="IntervalTimeline",this._root=null,this._length=0}add(e){Do(Fo(e.time),"Events must have a time property"),Do(Fo(e.duration),"Events must have a duration parameter"),e.time=e.time.valueOf();let t=new rs(e.time,e.time+e.duration,e);for(null===this._root?this._root=t:this._root.insert(t),this._length++;null!==t;)t.updateHeight(),t.updateMax(),this._rebalance(t),t=t.parent;return this}remove(e){if(null!==this._root){const t=[];this._root.search(e.time,t);for(const n of t)if(n.event===e){this._removeNode(n),this._length--;break}}return this}get length(){return this._length}cancel(e){return this.forEachFrom(e,(e=>this.remove(e))),this}_setRoot(e){this._root=e,null!==this._root&&(this._root.parent=null)}_replaceNodeInParent(e,t){null!==e.parent?(e.isLeftChild()?e.parent.left=t:e.parent.right=t,this._rebalance(e.parent)):this._setRoot(t)}_removeNode(e){if(null===e.left&&null===e.right)this._replaceNodeInParent(e,null);else if(null===e.right)this._replaceNodeInParent(e,e.left);else if(null===e.left)this._replaceNodeInParent(e,e.right);else{let t,n=null;if(e.getBalance()>0)if(null===e.left.right)t=e.left,t.right=e.right,n=t;else{for(t=e.left.right;null!==t.right;)t=t.right;t.parent&&(t.parent.right=t.left,n=t.parent,t.left=e.left,t.right=e.right)}else if(null===e.right.left)t=e.right,t.left=e.left,n=t;else{for(t=e.right.left;null!==t.left;)t=t.left;t.parent&&(t.parent.left=t.right,n=t.parent,t.left=e.left,t.right=e.right)}null!==e.parent?e.isLeftChild()?e.parent.left=t:e.parent.right=t:this._setRoot(t),n&&this._rebalance(n)}e.dispose()}_rotateLeft(e){const t=e.parent,n=e.isLeftChild(),r=e.right;r&&(e.right=r.left,r.left=e),null!==t?n?t.left=r:t.right=r:this._setRoot(r)}_rotateRight(e){const t=e.parent,n=e.isLeftChild(),r=e.left;r&&(e.left=r.right,r.right=e),null!==t?n?t.left=r:t.right=r:this._setRoot(r)}_rebalance(e){const t=e.getBalance();t>1&&e.left?e.left.getBalance()<0?this._rotateLeft(e.left):this._rotateRight(e):t<-1&&e.right&&(e.right.getBalance()>0?this._rotateRight(e.right):this._rotateLeft(e))}get(e){if(null!==this._root){const t=[];if(this._root.search(e,t),t.length>0){let e=t[0];for(let n=1;n<t.length;n++)t[n].low>e.low&&(e=t[n]);return e.event}}return null}forEach(e){if(null!==this._root){const t=[];this._root.traverse((e=>t.push(e))),t.forEach((t=>{t.event&&e(t.event)}))}return this}forEachAtTime(e,t){if(null!==this._root){const n=[];this._root.search(e,n),n.forEach((e=>{e.event&&t(e.event)}))}return this}forEachFrom(e,t){if(null!==this._root){const n=[];this._root.searchAfter(e,n),n.forEach((e=>{e.event&&t(e.event)}))}return this}dispose(){return super.dispose(),null!==this._root&&this._root.traverse((e=>e.dispose())),this._root=null,this}}class rs{constructor(e,t,n){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=n,this.low=e,this.high=t,this.max=this.high}insert(e){e.low<=this.low?null===this.left?this.left=e:this.left.insert(e):null===this.right?this.right=e:this.right.insert(e)}search(e,t){e>this.max||(null!==this.left&&this.left.search(e,t),this.low<=e&&this.high>e&&t.push(this),this.low>e||null!==this.right&&this.right.search(e,t))}searchAfter(e,t){this.low>=e&&(t.push(this),null!==this.left&&this.left.searchAfter(e,t)),null!==this.right&&this.right.searchAfter(e,t)}traverse(e){e(this),null!==this.left&&this.left.traverse(e),null!==this.right&&this.right.traverse(e)}updateHeight(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0}updateMax(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))}getBalance(){let e=0;return null!==this.left&&null!==this.right?e=this.left.height-this.right.height:null!==this.left?e=this.left.height+1:null!==this.right&&(e=-(this.right.height+1)),e}isLeftChild(){return null!==this.parent&&this.parent.left===this}get left(){return this._left}set left(e){this._left=e,null!==e&&(e.parent=this),this.updateHeight(),this.updateMax()}get right(){return this._right}set right(e){this._right=e,null!==e&&(e.parent=this),this.updateHeight(),this.updateMax()}dispose(){this.parent=null,this._left=null,this._right=null,this.event=null}}class is extends qa{constructor(){super(ra(is.getDefaults(),arguments,["volume"])),this.name="Volume";const e=ra(is.getDefaults(),arguments,["volume"]);this.input=this.output=new Wa({context:this.context,gain:e.volume,units:"decibels"}),this.volume=this.output.gain,wa(this,"volume"),this._unmutedVolume=e.volume,this.mute=e.mute}static getDefaults(){return Object.assign(qa.getDefaults(),{mute:!1,volume:0})}get mute(){return this.volume.value===-1/0}set mute(e){!this.mute&&e?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!e&&(this.volume.value=this._unmutedVolume)}dispose(){return super.dispose(),this.input.dispose(),this.volume.dispose(),this}}class os extends qa{constructor(){super(ra(os.getDefaults(),arguments)),this.name="Destination",this.input=new is({context:this.context}),this.output=new Wa({context:this.context}),this.volume=this.input.volume;const e=ra(os.getDefaults(),arguments);Ba(this.input,this.output,this.context.rawContext.destination),this.mute=e.mute,this._internalChannels=[this.input,this.context.rawContext.destination,this.output]}static getDefaults(){return Object.assign(qa.getDefaults(),{mute:!1,volume:0})}get mute(){return this.input.mute}set mute(e){this.input.mute=e}chain(...e){return this.input.disconnect(),e.unshift(this.input),e.push(this.output),Ba(...e),this}get maxChannelCount(){return this.context.rawContext.destination.maxChannelCount}dispose(){return super.dispose(),this.volume.dispose(),this}}pa((e=>{e.destination=new os({context:e})})),ga((e=>{e.destination.dispose()}));class as extends aa{constructor(e){super(),this.name="TimelineValue",this._timeline=new da({memory:10}),this._initialValue=e}set(e,t){return this._timeline.add({value:e,time:t}),this}get(e){const t=this._timeline.get(e);return t?t.value:this._initialValue}}class ss{constructor(e,t){this.id=ss._eventId++;const n=Object.assign(ss.getDefaults(),t);this.transport=e,this.callback=n.callback,this._once=n.once,this.time=n.time}static getDefaults(){return{callback:xa,once:!1,time:0}}invoke(e){this.callback&&(this.callback(e),this._once&&this.transport.clear(this.id))}dispose(){return this.callback=void 0,this}}ss._eventId=0;class ls extends ss{constructor(e,t){super(e,t),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this);const n=Object.assign(ls.getDefaults(),t);this.duration=new es(e.context,n.duration).valueOf(),this._interval=new es(e.context,n.interval).valueOf(),this._nextTick=n.time,this.transport.on("start",this._boundRestart),this.transport.on("loopStart",this._boundRestart),this.context=this.transport.context,this._restart()}static getDefaults(){return Object.assign({},ss.getDefaults(),{duration:1/0,interval:1,once:!1})}invoke(e){this._createEvents(e),super.invoke(e)}_createEvents(e){const t=this.transport.getTicksAtTime(e);t>=this.time&&t>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new es(this.context,this._nextTick).toSeconds()))}_restart(e){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.time;const t=this.transport.getTicksAtTime(e);t>this.time&&(this._nextTick=this.time+Math.ceil((t-this.time)/this._interval)*this._interval),this._currentId=this.transport.scheduleOnce(this.invoke.bind(this),new es(this.context,this._nextTick).toSeconds()),this._nextTick+=this._interval,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new es(this.context,this._nextTick).toSeconds())}dispose(){return super.dispose(),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this}}class us extends Fa{constructor(){super(ra(us.getDefaults(),arguments)),this.name="Transport",this._loop=new as(!1),this._loopStart=0,this._loopEnd=0,this._scheduledEvents={},this._timeline=new da,this._repeatedEvents=new ns,this._syncedSignals=[],this._swingAmount=0;const e=ra(us.getDefaults(),arguments);this._ppq=e.ppq,this._clock=new Ka({callback:this._processTick.bind(this),context:this.context,frequency:0,units:"bpm"}),this._bindClockEvents(),this.bpm=this._clock.frequency,this._clock.frequency.multiplier=e.ppq,this.bpm.setValueAtTime(e.bpm,0),wa(this,"bpm"),this._timeSignature=e.timeSignature,this._swingTicks=e.ppq/2}static getDefaults(){return Object.assign(Fa.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})}_processTick(e,t){if(this._loop.get(e)&&t>=this._loopEnd&&(this.emit("loopEnd",e),this._clock.setTicksAtTime(this._loopStart,e),t=this._loopStart,this.emit("loopStart",e,this._clock.getSecondsAtTime(e)),this.emit("loop",e)),this._swingAmount>0&&t%this._ppq!=0&&t%(2*this._swingTicks)!=0){const n=t%(2*this._swingTicks)/(2*this._swingTicks),r=Math.sin(n*Math.PI)*this._swingAmount;e+=new es(this.context,2*this._swingTicks/3).toSeconds()*r}this._timeline.forEachAtTime(t,(t=>t.invoke(e)))}schedule(e,t){const n=new ss(this,{callback:e,time:new Va(this.context,t).toTicks()});return this._addEvent(n,this._timeline)}scheduleRepeat(e,t,n,r=1/0){const i=new ls(this,{callback:e,duration:new Pa(this.context,r).toTicks(),interval:new Pa(this.context,t).toTicks(),time:new Va(this.context,n).toTicks()});return this._addEvent(i,this._repeatedEvents)}scheduleOnce(e,t){const n=new ss(this,{callback:e,once:!0,time:new Va(this.context,t).toTicks()});return this._addEvent(n,this._timeline)}clear(e){if(this._scheduledEvents.hasOwnProperty(e)){const t=this._scheduledEvents[e.toString()];t.timeline.remove(t.event),t.event.dispose(),delete this._scheduledEvents[e.toString()]}return this}_addEvent(e,t){return this._scheduledEvents[e.id.toString()]={event:e,timeline:t},t.add(e),e.id}cancel(e=0){const t=this.toTicks(e);return this._timeline.forEachFrom(t,(e=>this.clear(e.id))),this._repeatedEvents.forEachFrom(t,(e=>this.clear(e.id))),this}_bindClockEvents(){this._clock.on("start",((e,t)=>{t=new es(this.context,t).toSeconds(),this.emit("start",e,t)})),this._clock.on("stop",(e=>{this.emit("stop",e)})),this._clock.on("pause",(e=>{this.emit("pause",e)}))}get state(){return this._clock.getStateAtTime(this.now())}start(e,t){let n;return Fo(t)&&(n=this.toTicks(t)),this._clock.start(e,n),this}stop(e){return this._clock.stop(e),this}pause(e){return this._clock.pause(e),this}toggle(e){return e=this.toSeconds(e),"started"!==this._clock.getStateAtTime(e)?this.start(e):this.stop(e),this}get timeSignature(){return this._timeSignature}set timeSignature(e){Bo(e)&&(e=e[0]/e[1]*4),this._timeSignature=e}get loopStart(){return new Pa(this.context,this._loopStart,"i").toSeconds()}set loopStart(e){this._loopStart=this.toTicks(e)}get loopEnd(){return new Pa(this.context,this._loopEnd,"i").toSeconds()}set loopEnd(e){this._loopEnd=this.toTicks(e)}get loop(){return this._loop.get(this.now())}set loop(e){this._loop.set(e,this.now())}setLoopPoints(e,t){return this.loopStart=e,this.loopEnd=t,this}get swing(){return this._swingAmount}set swing(e){this._swingAmount=e}get swingSubdivision(){return new es(this.context,this._swingTicks).toNotation()}set swingSubdivision(e){this._swingTicks=this.toTicks(e)}get position(){const e=this.now(),t=this._clock.getTicksAtTime(e);return new es(this.context,t).toBarsBeatsSixteenths()}set position(e){const t=this.toTicks(e);this.ticks=t}get seconds(){return this._clock.seconds}set seconds(e){const t=this.now(),n=this._clock.frequency.timeToTicks(e,t);this.ticks=n}get progress(){if(this.loop){const e=this.now();return(this._clock.getTicksAtTime(e)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}get ticks(){return this._clock.ticks}set ticks(e){if(this._clock.ticks!==e){const t=this.now();if("started"===this.state){const n=this._clock.getTicksAtTime(t),r=t+this._clock.frequency.getDurationOfTicks(Math.ceil(n)-n,t);this.emit("stop",r),this._clock.setTicksAtTime(e,r),this.emit("start",r,this._clock.getSecondsAtTime(r))}else this._clock.setTicksAtTime(e,t)}}getTicksAtTime(e){return Math.round(this._clock.getTicksAtTime(e))}getSecondsAtTime(e){return this._clock.getSecondsAtTime(e)}get PPQ(){return this._clock.frequency.multiplier}set PPQ(e){this._clock.frequency.multiplier=e}nextSubdivision(e){if(e=this.toTicks(e),"started"!==this.state)return 0;{const t=this.now(),n=e-this.getTicksAtTime(t)%e;return this._clock.nextTickTime(n,t)}}syncSignal(e,t){if(!t){const n=this.now();if(0!==e.getValueAtTime(n)){const r=1/(60/this.bpm.getValueAtTime(n)/this.PPQ);t=e.getValueAtTime(n)/r}else t=0}const n=new Wa(t);return this.bpm.connect(n),n.connect(e._param),this._syncedSignals.push({initial:e.value,ratio:n,signal:e}),e.value=0,this}unsyncSignal(e){for(let t=this._syncedSignals.length-1;t>=0;t--){const n=this._syncedSignals[t];n.signal===e&&(n.ratio.dispose(),n.signal.value=n.initial,this._syncedSignals.splice(t,1))}return this}dispose(){return super.dispose(),this._clock.dispose(),ba(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this}}va.mixin(us),pa((e=>{e.transport=new us({context:e})})),ga((e=>{e.transport.dispose()}));class cs extends qa{constructor(e){super(e),this.input=void 0,this._state=new ja("stopped"),this._synced=!1,this._scheduled=[],this._syncedStart=xa,this._syncedStop=xa,this._state.memory=100,this._state.increasing=!0,this._volume=this.output=new is({context:this.context,mute:e.mute,volume:e.volume}),this.volume=this._volume.volume,wa(this,"volume"),this.onstop=e.onstop}static getDefaults(){return Object.assign(qa.getDefaults(),{mute:!1,onstop:xa,volume:0})}get state(){return this._synced?"started"===this.context.transport.state?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())}get mute(){return this._volume.mute}set mute(e){this._volume.mute=e}_clampToCurrentTime(e){return this._synced?e:Math.max(e,this.context.currentTime)}start(e,t,n){let r=Vo(e)&&this._synced?this.context.transport.seconds:this.toSeconds(e);if(r=this._clampToCurrentTime(r),this._synced||"started"!==this._state.getValueAtTime(r))if(this.log("start",r),this._state.setStateAtTime("started",r),this._synced){const e=this._state.get(r);e&&(e.offset=this.toSeconds(ia(t,0)),e.duration=n?this.toSeconds(n):void 0);const i=this.context.transport.schedule((e=>{this._start(e,t,n)}),r);this._scheduled.push(i),"started"===this.context.transport.state&&this.context.transport.getSecondsAtTime(this.immediate())>r&&this._syncedStart(this.now(),this.context.transport.seconds)}else Ro(this.context),this._start(r,t,n);else Do(la(r,this._state.get(r).time),"Start time must be strictly greater than previous start time"),this._state.cancel(r),this._state.setStateAtTime("started",r),this.log("restart",r),this.restart(r,t,n);return this}stop(e){let t=Vo(e)&&this._synced?this.context.transport.seconds:this.toSeconds(e);if(t=this._clampToCurrentTime(t),"started"===this._state.getValueAtTime(t)||Fo(this._state.getNextState("started",t))){if(this.log("stop",t),this._synced){const e=this.context.transport.schedule(this._stop.bind(this),t);this._scheduled.push(e)}else this._stop(t);this._state.cancel(t),this._state.setStateAtTime("stopped",t)}return this}restart(e,t,n){return e=this.toSeconds(e),"started"===this._state.getValueAtTime(e)&&(this._state.cancel(e),this._restart(e,t,n)),this}sync(){return this._synced||(this._synced=!0,this._syncedStart=(e,t)=>{if(t>0){const n=this._state.get(t);if(n&&"started"===n.state&&n.time!==t){const r=t-this.toSeconds(n.time);let i;n.duration&&(i=this.toSeconds(n.duration)-r),this._start(e,this.toSeconds(n.offset)+r,i)}}},this._syncedStop=e=>{const t=this.context.transport.getSecondsAtTime(Math.max(e-this.sampleTime,0));"started"===this._state.getValueAtTime(t)&&this._stop(e)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this}unsync(){return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach((e=>this.context.transport.clear(e))),this._scheduled=[],this._state.cancel(0),this._stop(0),this}dispose(){return super.dispose(),this.onstop=xa,this.unsync(),this._volume.dispose(),this._state.dispose(),this}}class hs extends $a{constructor(){super(ra(hs.getDefaults(),arguments,["url","onload"])),this.name="ToneBufferSource",this._source=this.context.createBufferSource(),this._internalChannels=[this._source],this._sourceStarted=!1,this._sourceStopped=!1;const e=ra(hs.getDefaults(),arguments,["url","onload"]);Ua(this._source,this._gainNode),this._source.onended=()=>this._stopSource(),this.playbackRate=new za({context:this.context,param:this._source.playbackRate,units:"positive",value:e.playbackRate}),this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this._buffer=new ka(e.url,e.onload,e.onerror),this._internalChannels.push(this._source)}static getDefaults(){return Object.assign($a.getDefaults(),{url:new ka,loop:!1,loopEnd:0,loopStart:0,onload:xa,onerror:xa,playbackRate:1})}get fadeIn(){return this._fadeIn}set fadeIn(e){this._fadeIn=e}get fadeOut(){return this._fadeOut}set fadeOut(e){this._fadeOut=e}get curve(){return this._curve}set curve(e){this._curve=e}start(e,t,n,r=1){Do(this.buffer.loaded,"buffer is either not set or not loaded");const i=this.toSeconds(e);this._startGain(i,r),t=this.loop?ia(t,this.loopStart):ia(t,0);let o=Math.max(this.toSeconds(t),0);if(this.loop){const e=this.toSeconds(this.loopEnd)||this.buffer.duration,t=this.toSeconds(this.loopStart),n=e-t;ua(o,e)&&(o=(o-t)%n+t),ha(o,this.buffer.duration)&&(o=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,ca(o,this.buffer.duration)&&(this._sourceStarted=!0,this._source.start(i,o)),Fo(n)){let e=this.toSeconds(n);e=Math.max(e,0),this.stop(i+e)}return this}_stopSource(e){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(e)),this._onended())}get loopStart(){return this._source.loopStart}set loopStart(e){this._source.loopStart=this.toSeconds(e)}get loopEnd(){return this._source.loopEnd}set loopEnd(e){this._source.loopEnd=this.toSeconds(e)}get buffer(){return this._buffer}set buffer(e){this._buffer.set(e)}get loop(){return this._source.loop}set loop(e){this._source.loop=e,this._sourceStarted&&this.cancelStop()}dispose(){return super.dispose(),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this}}function ds(e,t){return Yo(this,void 0,void 0,(function*(){const n=t/e.context.sampleRate,r=new Ea(1,n,e.context.sampleRate);return new e.constructor(Object.assign(e.get(),{frequency:2/n,detune:0,context:r})).toDestination().start(0),(yield r.render()).getChannelData(0)}))}class fs extends $a{constructor(){super(ra(fs.getDefaults(),arguments,["frequency","type"])),this.name="ToneOscillatorNode",this._oscillator=this.context.createOscillator(),this._internalChannels=[this._oscillator];const e=ra(fs.getDefaults(),arguments,["frequency","type"]);Ua(this._oscillator,this._gainNode),this.type=e.type,this.frequency=new za({context:this.context,param:this._oscillator.frequency,units:"frequency",value:e.frequency}),this.detune=new za({context:this.context,param:this._oscillator.detune,units:"cents",value:e.detune}),wa(this,["frequency","detune"])}static getDefaults(){return Object.assign($a.getDefaults(),{detune:0,frequency:440,type:"sine"})}start(e){const t=this.toSeconds(e);return this.log("start",t),this._startGain(t),this._oscillator.start(t),this}_stopSource(e){this._oscillator.stop(e)}setPeriodicWave(e){return this._oscillator.setPeriodicWave(e),this}get type(){return this._oscillator.type}set type(e){this._oscillator.type=e}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this}}class ps extends cs{constructor(){super(ra(ps.getDefaults(),arguments,["frequency","type"])),this.name="Oscillator",this._oscillator=null;const e=ra(ps.getDefaults(),arguments,["frequency","type"]);this.frequency=new Ha({context:this.context,units:"frequency",value:e.frequency}),wa(this,"frequency"),this.detune=new Ha({context:this.context,units:"cents",value:e.detune}),wa(this,"detune"),this._partials=e.partials,this._partialCount=e.partialCount,this._type=e.type,e.partialCount&&"custom"!==e.type&&(this._type=this.baseType+e.partialCount.toString()),this.phase=e.phase}static getDefaults(){return Object.assign(cs.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})}_start(e){const t=this.toSeconds(e),n=new fs({context:this.context,onended:()=>this.onstop(this)});this._oscillator=n,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(t)}_stop(e){const t=this.toSeconds(e);this._oscillator&&this._oscillator.stop(t)}_restart(e){const t=this.toSeconds(e);return this.log("restart",t),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(t),this}syncFrequency(){return this.context.transport.syncSignal(this.frequency),this}unsyncFrequency(){return this.context.transport.unsyncSignal(this.frequency),this}_getCachedPeriodicWave(){if("custom"===this._type)return ps._periodicWaveCache.find((e=>{return e.phase===this._phase&&(t=e.partials,n=this._partials,t.length===n.length&&t.every(((e,t)=>n[t]===e)));var t,n}));{const e=ps._periodicWaveCache.find((e=>e.type===this._type&&e.phase===this._phase));return this._partialCount=e?e.partialCount:this._partialCount,e}}get type(){return this._type}set type(e){this._type=e;const t=-1!==["sine","square","sawtooth","triangle"].indexOf(e);if(0===this._phase&&t)this._wave=void 0,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=e);else{const t=this._getCachedPeriodicWave();if(Fo(t)){const{partials:e,wave:n}=t;this._wave=n,this._partials=e,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}else{const[t,n]=this._getRealImaginary(e,this._phase),r=this.context.createPeriodicWave(t,n);this._wave=r,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave),ps._periodicWaveCache.push({imag:n,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:t,type:this._type,wave:this._wave}),ps._periodicWaveCache.length>100&&ps._periodicWaveCache.shift()}}}get baseType(){return this._type.replace(this.partialCount.toString(),"")}set baseType(e){this.partialCount&&"custom"!==this._type&&"custom"!==e?this.type=e+this.partialCount:this.type=e}get partialCount(){return this._partialCount}set partialCount(e){Po(e,0);let t=this._type;const n=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(n&&(t=n[1]),"custom"!==this._type)this.type=0===e?t:t+e.toString();else{const t=new Float32Array(e);this._partials.forEach(((e,n)=>t[n]=e)),this._partials=Array.from(t),this.type=this._type}}_getRealImaginary(e,t){let n=2048;const r=new Float32Array(n),i=new Float32Array(n);let o=1;if("custom"===e){if(o=this._partials.length+1,this._partialCount=this._partials.length,n=o,0===this._partials.length)return[r,i]}else{const t=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(e);t?(o=parseInt(t[2],10)+1,this._partialCount=parseInt(t[2],10),e=t[1],o=Math.max(o,2),n=o):this._partialCount=0,this._partials=[]}for(let a=1;a<n;++a){const n=2/(a*Math.PI);let s;switch(e){case"sine":s=a<=o?1:0,this._partials[a-1]=s;break;case"square":s=1&a?2*n:0,this._partials[a-1]=s;break;case"sawtooth":s=n*(1&a?1:-1),this._partials[a-1]=s;break;case"triangle":s=1&a?n*n*2*(a-1>>1&1?-1:1):0,this._partials[a-1]=s;break;case"custom":s=this._partials[a-1];break;default:throw new TypeError("Oscillator: invalid type: "+e)}0!==s?(r[a]=-s*Math.sin(t*a),i[a]=s*Math.cos(t*a)):(r[a]=0,i[a]=0)}return[r,i]}_inverseFFT(e,t,n){let r=0;const i=e.length;for(let o=0;o<i;o++)r+=e[o]*Math.cos(o*n)+t[o]*Math.sin(o*n);return r}getInitialValue(){const[e,t]=this._getRealImaginary(this._type,0);let n=0;const r=2*Math.PI;for(let i=0;i<32;i++)n=Math.max(this._inverseFFT(e,t,i/32*r),n);return i=-this._inverseFFT(e,t,this._phase)/n,-1,1,Math.max(Math.min(i,1),-1);var i}get partials(){return this._partials.slice(0,this.partialCount)}set partials(e){this._partials=e,this._partialCount=this._partials.length,e.length&&(this.type="custom")}get phase(){return this._phase*(180/Math.PI)}set phase(e){this._phase=e*Math.PI/180,this.type=this._type}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),null!==this._oscillator&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this}}ps._periodicWaveCache=[];class ms extends qa{constructor(){super(Object.assign(ra(ms.getDefaults(),arguments,["context"])))}connect(e,t=0,n=0){return Ya(this,e,t,n),this}}class gs extends ms{constructor(){super(Object.assign(ra(gs.getDefaults(),arguments,["mapping","length"]))),this.name="WaveShaper",this._shaper=this.context.createWaveShaper(),this.input=this._shaper,this.output=this._shaper;const e=ra(gs.getDefaults(),arguments,["mapping","length"]);Bo(e.mapping)||e.mapping instanceof Float32Array?this.curve=Float32Array.from(e.mapping):"function"==typeof e.mapping&&this.setMap(e.mapping,e.length)}static getDefaults(){return Object.assign(Ha.getDefaults(),{length:1024})}setMap(e,t=1024){const n=new Float32Array(t);for(let r=0,i=t;r<i;r++){const t=r/(i-1)*2-1;n[r]=e(t,r)}return this.curve=n,this}get curve(){return this._shaper.curve}set curve(e){this._shaper.curve=e}get oversample(){return this._shaper.oversample}set oversample(e){Do(["none","2x","4x"].some((t=>t.includes(e))),"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=e}dispose(){return super.dispose(),this._shaper.disconnect(),this}}class vs extends ms{constructor(){super(...arguments),this.name="AudioToGain",this._norm=new gs({context:this.context,mapping:e=>(e+1)/2}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class ys extends Ha{constructor(){super(Object.assign(ra(ys.getDefaults(),arguments,["value"]))),this.name="Multiply",this.override=!1;const e=ra(ys.getDefaults(),arguments,["value"]);this._mult=this.input=this.output=new Wa({context:this.context,minValue:e.minValue,maxValue:e.maxValue}),this.factor=this._param=this._mult.gain,this.factor.setValueAtTime(e.value,0)}static getDefaults(){return Object.assign(Ha.getDefaults(),{value:0})}dispose(){return super.dispose(),this._mult.dispose(),this}}class _s extends cs{constructor(){super(ra(_s.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="AMOscillator",this._modulationScale=new vs({context:this.context}),this._modulationNode=new Wa({context:this.context});const e=ra(_s.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new ps({context:this.context,detune:e.detune,frequency:e.frequency,onstop:()=>this.onstop(this),phase:e.phase,type:e.type}),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this._modulator=new ps({context:this.context,phase:e.phase,type:e.modulationType}),this.harmonicity=new ys({context:this.context,units:"positive",value:e.harmonicity}),this.frequency.chain(this.harmonicity,this._modulator.frequency),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),wa(this,["frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(ps.getDefaults(),{harmonicity:1,modulationType:"square"})}_start(e){this._modulator.start(e),this._carrier.start(e)}_stop(e){this._modulator.stop(e),this._carrier.stop(e)}_restart(e){this._modulator.restart(e),this._carrier.restart(e)}get type(){return this._carrier.type}set type(e){this._carrier.type=e}get baseType(){return this._carrier.baseType}set baseType(e){this._carrier.baseType=e}get partialCount(){return this._carrier.partialCount}set partialCount(e){this._carrier.partialCount=e}get modulationType(){return this._modulator.type}set modulationType(e){this._modulator.type=e}get phase(){return this._carrier.phase}set phase(e){this._carrier.phase=e,this._modulator.phase=e}get partials(){return this._carrier.partials}set partials(e){this._carrier.partials=e}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this}}class ws extends cs{constructor(){super(ra(ws.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="FMOscillator",this._modulationNode=new Wa({context:this.context,gain:0});const e=ra(ws.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new ps({context:this.context,detune:e.detune,frequency:0,onstop:()=>this.onstop(this),phase:e.phase,type:e.type}),this.detune=this._carrier.detune,this.frequency=new Ha({context:this.context,units:"frequency",value:e.frequency}),this._modulator=new ps({context:this.context,phase:e.phase,type:e.modulationType}),this.harmonicity=new ys({context:this.context,units:"positive",value:e.harmonicity}),this.modulationIndex=new ys({context:this.context,units:"positive",value:e.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),wa(this,["modulationIndex","frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(ps.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})}_start(e){this._modulator.start(e),this._carrier.start(e)}_stop(e){this._modulator.stop(e),this._carrier.stop(e)}_restart(e){return this._modulator.restart(e),this._carrier.restart(e),this}get type(){return this._carrier.type}set type(e){this._carrier.type=e}get baseType(){return this._carrier.baseType}set baseType(e){this._carrier.baseType=e}get partialCount(){return this._carrier.partialCount}set partialCount(e){this._carrier.partialCount=e}get modulationType(){return this._modulator.type}set modulationType(e){this._modulator.type=e}get phase(){return this._carrier.phase}set phase(e){this._carrier.phase=e,this._modulator.phase=e}get partials(){return this._carrier.partials}set partials(e){this._carrier.partials=e}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this}}class bs extends cs{constructor(){super(ra(bs.getDefaults(),arguments,["frequency","width"])),this.name="PulseOscillator",this._widthGate=new Wa({context:this.context,gain:0}),this._thresh=new gs({context:this.context,mapping:e=>e<=0?-1:1});const e=ra(bs.getDefaults(),arguments,["frequency","width"]);this.width=new Ha({context:this.context,units:"audioRange",value:e.width}),this._triangle=new ps({context:this.context,detune:e.detune,frequency:e.frequency,onstop:()=>this.onstop(this),phase:e.phase,type:"triangle"}),this.frequency=this._triangle.frequency,this.detune=this._triangle.detune,this._triangle.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),wa(this,["width","frequency","detune"])}static getDefaults(){return Object.assign(cs.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})}_start(e){e=this.toSeconds(e),this._triangle.start(e),this._widthGate.gain.setValueAtTime(1,e)}_stop(e){e=this.toSeconds(e),this._triangle.stop(e),this._widthGate.gain.cancelScheduledValues(e),this._widthGate.gain.setValueAtTime(0,e)}_restart(e){this._triangle.restart(e),this._widthGate.gain.cancelScheduledValues(e),this._widthGate.gain.setValueAtTime(1,e)}get phase(){return this._triangle.phase}set phase(e){this._triangle.phase=e}get type(){return"pulse"}get baseType(){return"pulse"}get partials(){return[]}get partialCount(){return 0}set carrierType(e){this._triangle.type=e}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),this._triangle.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this}}class xs extends cs{constructor(){super(ra(xs.getDefaults(),arguments,["frequency","type","spread"])),this.name="FatOscillator",this._oscillators=[];const e=ra(xs.getDefaults(),arguments,["frequency","type","spread"]);this.frequency=new Ha({context:this.context,units:"frequency",value:e.frequency}),this.detune=new Ha({context:this.context,units:"cents",value:e.detune}),this._spread=e.spread,this._type=e.type,this._phase=e.phase,this._partials=e.partials,this._partialCount=e.partialCount,this.count=e.count,wa(this,["frequency","detune"])}static getDefaults(){return Object.assign(ps.getDefaults(),{count:3,spread:20,type:"sawtooth"})}_start(e){e=this.toSeconds(e),this._forEach((t=>t.start(e)))}_stop(e){e=this.toSeconds(e),this._forEach((t=>t.stop(e)))}_restart(e){this._forEach((t=>t.restart(e)))}_forEach(e){for(let t=0;t<this._oscillators.length;t++)e(this._oscillators[t],t)}get type(){return this._type}set type(e){this._type=e,this._forEach((t=>t.type=e))}get spread(){return this._spread}set spread(e){if(this._spread=e,this._oscillators.length>1){const t=-e/2,n=e/(this._oscillators.length-1);this._forEach(((e,r)=>e.detune.value=t+n*r))}}get count(){return this._oscillators.length}set count(e){if(Po(e,1),this._oscillators.length!==e){this._forEach((e=>e.dispose())),this._oscillators=[];for(let t=0;t<e;t++){const n=new ps({context:this.context,volume:-6-1.1*e,type:this._type,phase:this._phase+t/e*360,partialCount:this._partialCount,onstop:0===t?()=>this.onstop(this):xa});"custom"===this.type&&(n.partials=this._partials),this.frequency.connect(n.frequency),this.detune.connect(n.detune),n.detune.overridden=!1,n.connect(this.output),this._oscillators[t]=n}this.spread=this._spread,"started"===this.state&&this._forEach((e=>e.start()))}}get phase(){return this._phase}set phase(e){this._phase=e,this._forEach(((e,t)=>e.phase=this._phase+t/this.count*360))}get baseType(){return this._oscillators[0].baseType}set baseType(e){this._forEach((t=>t.baseType=e)),this._type=this._oscillators[0].type}get partials(){return this._oscillators[0].partials}set partials(e){this._partials=e,this._partialCount=this._partials.length,e.length&&(this._type="custom",this._forEach((t=>t.partials=e)))}get partialCount(){return this._oscillators[0].partialCount}set partialCount(e){this._partialCount=e,this._forEach((t=>t.partialCount=e)),this._type=this._oscillators[0].type}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this._forEach((e=>e.dispose())),this}}class ks extends cs{constructor(){super(ra(ks.getDefaults(),arguments,["frequency","modulationFrequency"])),this.name="PWMOscillator",this.sourceType="pwm",this._scale=new ys({context:this.context,value:2});const e=ra(ks.getDefaults(),arguments,["frequency","modulationFrequency"]);this._pulse=new bs({context:this.context,frequency:e.modulationFrequency}),this._pulse.carrierType="sine",this.modulationFrequency=this._pulse.frequency,this._modulator=new ps({context:this.context,detune:e.detune,frequency:e.frequency,onstop:()=>this.onstop(this),phase:e.phase}),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),wa(this,["modulationFrequency","frequency","detune"])}static getDefaults(){return Object.assign(cs.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})}_start(e){e=this.toSeconds(e),this._modulator.start(e),this._pulse.start(e)}_stop(e){e=this.toSeconds(e),this._modulator.stop(e),this._pulse.stop(e)}_restart(e){this._modulator.restart(e),this._pulse.restart(e)}get type(){return"pwm"}get baseType(){return"pwm"}get partials(){return[]}get partialCount(){return 0}get phase(){return this._modulator.phase}set phase(e){this._modulator.phase=e}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this}}const Es={am:_s,fat:xs,fm:ws,oscillator:ps,pulse:bs,pwm:ks};class Ss extends cs{constructor(){super(ra(Ss.getDefaults(),arguments,["frequency","type"])),this.name="OmniOscillator";const e=ra(Ss.getDefaults(),arguments,["frequency","type"]);this.frequency=new Ha({context:this.context,units:"frequency",value:e.frequency}),this.detune=new Ha({context:this.context,units:"cents",value:e.detune}),wa(this,["frequency","detune"]),this.set(e)}static getDefaults(){return Object.assign(ps.getDefaults(),ws.getDefaults(),_s.getDefaults(),xs.getDefaults(),bs.getDefaults(),ks.getDefaults())}_start(e){this._oscillator.start(e)}_stop(e){this._oscillator.stop(e)}_restart(e){return this._oscillator.restart(e),this}get type(){let e="";return["am","fm","fat"].some((e=>this._sourceType===e))&&(e=this._sourceType),e+this._oscillator.type}set type(e){"fm"===e.substr(0,2)?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=e.substr(2)):"am"===e.substr(0,2)?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=e.substr(2)):"fat"===e.substr(0,3)?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=e.substr(3)):"pwm"===e?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):"pulse"===e?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=e)}get partials(){return this._oscillator.partials}set partials(e){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partials=e)}get partialCount(){return this._oscillator.partialCount}set partialCount(e){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partialCount=e)}set(e){return Reflect.has(e,"type")&&e.type&&(this.type=e.type),super.set(e),this}_createNewOscillator(e){if(e!==this._sourceType){this._sourceType=e;const t=Es[e],n=this.now();if(this._oscillator){const e=this._oscillator;e.stop(n),this.context.setTimeout((()=>e.dispose()),this.blockTime)}this._oscillator=new t({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=()=>this.onstop(this),"started"===this.state&&this._oscillator.start(n)}}get phase(){return this._oscillator.phase}set phase(e){this._oscillator.phase=e}get sourceType(){return this._sourceType}set sourceType(e){let t="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(t=this._oscillator.type),"fm"===e?this.type="fm"+t:"am"===e?this.type="am"+t:"fat"===e?this.type="fat"+t:"oscillator"===e?this.type=t:"pulse"===e?this.type="pulse":"pwm"===e&&(this.type="pwm")}_getOscType(e,t){return e instanceof Es[t]}get baseType(){return this._oscillator.baseType}set baseType(e){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||"pulse"===e||"pwm"===e||(this._oscillator.baseType=e)}get width(){return this._getOscType(this._oscillator,"pulse")?this._oscillator.width:void 0}get count(){return this._getOscType(this._oscillator,"fat")?this._oscillator.count:void 0}set count(e){this._getOscType(this._oscillator,"fat")&&jo(e)&&(this._oscillator.count=e)}get spread(){return this._getOscType(this._oscillator,"fat")?this._oscillator.spread:void 0}set spread(e){this._getOscType(this._oscillator,"fat")&&jo(e)&&(this._oscillator.spread=e)}get modulationType(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.modulationType:void 0}set modulationType(e){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&Uo(e)&&(this._oscillator.modulationType=e)}get modulationIndex(){return this._getOscType(this._oscillator,"fm")?this._oscillator.modulationIndex:void 0}get harmonicity(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.harmonicity:void 0}get modulationFrequency(){return this._getOscType(this._oscillator,"pwm")?this._oscillator.modulationFrequency:void 0}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){return ds(this,e)}))}dispose(){return super.dispose(),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this}}function Cs(e,t=1/0){const n=new WeakMap;return function(r,i){Reflect.defineProperty(r,i,{configurable:!0,enumerable:!0,get:function(){return n.get(this)},set:function(r){Po(r,e,t),n.set(this,r)}})}}function Ts(e,t=1/0){const n=new WeakMap;return function(r,i){Reflect.defineProperty(r,i,{configurable:!0,enumerable:!0,get:function(){return n.get(this)},set:function(r){Po(this.toSeconds(r),e,t),n.set(this,r)}})}}class As extends cs{constructor(){super(ra(As.getDefaults(),arguments,["url","onload"])),this.name="Player",this._activeSources=new Set;const e=ra(As.getDefaults(),arguments,["url","onload"]);this._buffer=new ka({onload:this._onload.bind(this,e.onload),onerror:e.onerror,reverse:e.reverse,url:e.url}),this.autostart=e.autostart,this._loop=e.loop,this._loopStart=e.loopStart,this._loopEnd=e.loopEnd,this._playbackRate=e.playbackRate,this.fadeIn=e.fadeIn,this.fadeOut=e.fadeOut}static getDefaults(){return Object.assign(cs.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:xa,onerror:xa,playbackRate:1,reverse:!1})}load(e){return Yo(this,void 0,void 0,(function*(){return yield this._buffer.load(e),this._onload(),this}))}_onload(e=xa){e(),this.autostart&&this.start()}_onSourceEnd(e){this.onstop(this),this._activeSources.delete(e),0!==this._activeSources.size||this._synced||"started"!==this._state.getValueAtTime(this.now())||(this._state.cancel(this.now()),this._state.setStateAtTime("stopped",this.now()))}start(e,t,n){return super.start(e,t,n),this}_start(e,t,n){t=this._loop?ia(t,this._loopStart):ia(t,0);const r=this.toSeconds(t),i=n;n=ia(n,Math.max(this._buffer.duration-r,0));let o=this.toSeconds(n);o/=this._playbackRate,e=this.toSeconds(e);const a=new hs({url:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);this._loop||this._synced||(this._state.cancel(e+o),this._state.setStateAtTime("stopped",e+o,{implicitEnd:!0})),this._activeSources.add(a),this._loop&&Vo(i)?a.start(e,r):a.start(e,r,o-this.toSeconds(this.fadeOut))}_stop(e){const t=this.toSeconds(e);this._activeSources.forEach((e=>e.stop(t)))}restart(e,t,n){return super.restart(e,t,n),this}_restart(e,t,n){this._stop(e),this._start(e,t,n)}seek(e,t){const n=this.toSeconds(t);if("started"===this._state.getValueAtTime(n)){const t=this.toSeconds(e);this._stop(n),this._start(n,t)}return this}setLoopPoints(e,t){return this.loopStart=e,this.loopEnd=t,this}get loopStart(){return this._loopStart}set loopStart(e){this._loopStart=e,this.buffer.loaded&&Po(this.toSeconds(e),0,this.buffer.duration),this._activeSources.forEach((t=>{t.loopStart=e}))}get loopEnd(){return this._loopEnd}set loopEnd(e){this._loopEnd=e,this.buffer.loaded&&Po(this.toSeconds(e),0,this.buffer.duration),this._activeSources.forEach((t=>{t.loopEnd=e}))}get buffer(){return this._buffer}set buffer(e){this._buffer.set(e)}get loop(){return this._loop}set loop(e){if(this._loop!==e&&(this._loop=e,this._activeSources.forEach((t=>{t.loop=e})),e)){const e=this._state.getNextState("stopped",this.now());e&&this._state.cancel(e.time)}}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e;const t=this.now(),n=this._state.getNextState("stopped",t);n&&n.implicitEnd&&(this._state.cancel(n.time),this._activeSources.forEach((e=>e.cancelStop()))),this._activeSources.forEach((n=>{n.playbackRate.setValueAtTime(e,t)}))}get reverse(){return this._buffer.reverse}set reverse(e){this._buffer.reverse=e}get loaded(){return this._buffer.loaded}dispose(){return super.dispose(),this._activeSources.forEach((e=>e.dispose())),this._activeSources.clear(),this._buffer.dispose(),this}}Ho([Ts(0)],As.prototype,"fadeIn",void 0),Ho([Ts(0)],As.prototype,"fadeOut",void 0);class Os extends qa{constructor(){super(ra(Os.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="Envelope",this._sig=new Ha({context:this.context,value:0}),this.output=this._sig,this.input=void 0;const e=ra(Os.getDefaults(),arguments,["attack","decay","sustain","release"]);this.attack=e.attack,this.decay=e.decay,this.sustain=e.sustain,this.release=e.release,this.attackCurve=e.attackCurve,this.releaseCurve=e.releaseCurve,this.decayCurve=e.decayCurve}static getDefaults(){return Object.assign(qa.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})}get value(){return this.getValueAtTime(this.now())}_getCurve(e,t){if(Uo(e))return e;{let n;for(n in Ms)if(Ms[n][t]===e)return n;return e}}_setCurve(e,t,n){if(Uo(n)&&Reflect.has(Ms,n)){const r=Ms[n];zo(r)?"_decayCurve"!==e&&(this[e]=r[t]):this[e]=r}else{if(!Bo(n)||"_decayCurve"===e)throw new Error("Envelope: invalid curve: "+n);this[e]=n}}get attackCurve(){return this._getCurve(this._attackCurve,"In")}set attackCurve(e){this._setCurve("_attackCurve","In",e)}get releaseCurve(){return this._getCurve(this._releaseCurve,"Out")}set releaseCurve(e){this._setCurve("_releaseCurve","Out",e)}get decayCurve(){return this._decayCurve}set decayCurve(e){Do(["linear","exponential"].some((t=>t===e)),`Invalid envelope curve: ${e}`),this._decayCurve=e}triggerAttack(e,t=1){this.log("triggerAttack",e,t),e=this.toSeconds(e);let n=this.toSeconds(this.attack);const r=this.toSeconds(this.decay),i=this.getValueAtTime(e);if(i>0&&(n=(1-i)/(1/n)),n<this.sampleTime)this._sig.cancelScheduledValues(e),this._sig.setValueAtTime(t,e);else if("linear"===this._attackCurve)this._sig.linearRampTo(t,n,e);else if("exponential"===this._attackCurve)this._sig.targetRampTo(t,n,e);else{this._sig.cancelAndHoldAtTime(e);let r=this._attackCurve;for(let e=1;e<r.length;e++)if(r[e-1]<=i&&i<=r[e]){r=this._attackCurve.slice(e),r[0]=i;break}this._sig.setValueCurveAtTime(r,e,n,t)}if(r&&this.sustain<1){const i=t*this.sustain,o=e+n;this.log("decay",o),"linear"===this._decayCurve?this._sig.linearRampToValueAtTime(i,r+o):this._sig.exponentialApproachValueAtTime(i,o,r)}return this}triggerRelease(e){this.log("triggerRelease",e),e=this.toSeconds(e);const t=this.getValueAtTime(e);if(t>0){const n=this.toSeconds(this.release);n<this.sampleTime?this._sig.setValueAtTime(0,e):"linear"===this._releaseCurve?this._sig.linearRampTo(0,n,e):"exponential"===this._releaseCurve?this._sig.targetRampTo(0,n,e):(Do(Bo(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(e),this._sig.setValueCurveAtTime(this._releaseCurve,e,n,t))}return this}getValueAtTime(e){return this._sig.getValueAtTime(e)}triggerAttackRelease(e,t,n=1){return t=this.toSeconds(t),this.triggerAttack(t,n),this.triggerRelease(t+this.toSeconds(e)),this}cancel(e){return this._sig.cancelScheduledValues(this.toSeconds(e)),this}connect(e,t=0,n=0){return Ya(this,e,t,n),this}asArray(e=1024){return Yo(this,void 0,void 0,(function*(){const t=e/this.context.sampleRate,n=new Ea(1,t,this.context.sampleRate),r=this.toSeconds(this.attack)+this.toSeconds(this.decay),i=r+this.toSeconds(this.release),o=.1*i,a=i+o,s=new this.constructor(Object.assign(this.get(),{attack:t*this.toSeconds(this.attack)/a,decay:t*this.toSeconds(this.decay)/a,release:t*this.toSeconds(this.release)/a,context:n}));return s._sig.toDestination(),s.triggerAttackRelease(t*(r+o)/a,0),(yield n.render()).getChannelData(0)}))}dispose(){return super.dispose(),this._sig.dispose(),this}}Ho([Ts(0)],Os.prototype,"attack",void 0),Ho([Ts(0)],Os.prototype,"decay",void 0),Ho([Cs(0,1)],Os.prototype,"sustain",void 0),Ho([Ts(0)],Os.prototype,"release",void 0);const Ms=(()=>{const e=128;let t,n;const r=[];for(t=0;t<e;t++)r[t]=Math.sin(t/127*(Math.PI/2));const i=[];for(t=0;t<127;t++){n=t/127;const e=Math.sin(n*(2*Math.PI)*6.4-Math.PI/2)+1;i[t]=e/10+.83*n}i[127]=1;const o=[];for(t=0;t<e;t++)o[t]=Math.ceil(t/127*5)/5;const a=[];for(t=0;t<e;t++)n=t/127,a[t]=.5*(1-Math.cos(Math.PI*n));const s=[];for(t=0;t<e;t++){n=t/127;const e=4*Math.pow(n,3)+.2,r=Math.cos(e*Math.PI*2*n);s[t]=Math.abs(r*(1-n))}function l(e){const t=new Array(e.length);for(let n=0;n<e.length;n++)t[n]=1-e[n];return t}return{bounce:{In:l(s),Out:s},cosine:{In:r,Out:(u=r,u.slice(0).reverse())},exponential:"exponential",linear:"linear",ripple:{In:i,Out:l(i)},sine:{In:a,Out:l(a)},step:{In:o,Out:l(o)}};var u})();class Ns extends qa{constructor(){super(ra(Ns.getDefaults(),arguments)),this._scheduledEvents=[],this._synced=!1,this._original_triggerAttack=this.triggerAttack,this._original_triggerRelease=this.triggerRelease;const e=ra(Ns.getDefaults(),arguments);this._volume=this.output=new is({context:this.context,volume:e.volume}),this.volume=this._volume.volume,wa(this,"volume")}static getDefaults(){return Object.assign(qa.getDefaults(),{volume:0})}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0)),this}_syncState(){let e=!1;return this._synced||(this._synced=!0,e=!0),e}_syncMethod(e,t){const n=this["_original_"+e]=this[e];this[e]=(...e)=>{const r=e[t],i=this.context.transport.schedule((r=>{e[t]=r,n.apply(this,e)}),r);this._scheduledEvents.push(i)}}unsync(){return this._scheduledEvents.forEach((e=>this.context.transport.clear(e))),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this}triggerAttackRelease(e,t,n,r){const i=this.toSeconds(n),o=this.toSeconds(t);return this.triggerAttack(e,i,r),this.triggerRelease(i+o),this}dispose(){return super.dispose(),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this}}class Ds extends Ns{constructor(){super(ra(Ds.getDefaults(),arguments));const e=ra(Ds.getDefaults(),arguments);this.portamento=e.portamento,this.onsilence=e.onsilence}static getDefaults(){return Object.assign(Ns.getDefaults(),{detune:0,onsilence:xa,portamento:0})}triggerAttack(e,t,n=1){this.log("triggerAttack",e,t,n);const r=this.toSeconds(t);return this._triggerEnvelopeAttack(r,n),this.setNote(e,r),this}triggerRelease(e){this.log("triggerRelease",e);const t=this.toSeconds(e);return this._triggerEnvelopeRelease(t),this}setNote(e,t){const n=this.toSeconds(t),r=e instanceof Ra?e.toFrequency():e;if(this.portamento>0&&this.getLevelAtTime(n)>.05){const e=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(r,e,n)}else this.frequency.setValueAtTime(r,n);return this}}Ho([Ts(0)],Ds.prototype,"portamento",void 0);class Ps extends Os{constructor(){super(ra(Ps.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="AmplitudeEnvelope",this._gainNode=new Wa({context:this.context,gain:0}),this.output=this._gainNode,this.input=this._gainNode,this._sig.connect(this._gainNode.gain),this.output=this._gainNode,this.input=this._gainNode}dispose(){return super.dispose(),this._gainNode.dispose(),this}}class Rs extends Ds{constructor(){super(ra(Rs.getDefaults(),arguments)),this.name="Synth";const e=ra(Rs.getDefaults(),arguments);this.oscillator=new Ss(Object.assign({context:this.context,detune:e.detune,onstop:()=>this.onsilence(this)},e.oscillator)),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new Ps(Object.assign({context:this.context},e.envelope)),this.oscillator.chain(this.envelope,this.output),wa(this,["oscillator","frequency","detune","envelope"])}static getDefaults(){return Object.assign(Ds.getDefaults(),{envelope:Object.assign(oa(Os.getDefaults(),Object.keys(qa.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(oa(Ss.getDefaults(),[...Object.keys(cs.getDefaults()),"frequency","detune"]),{type:"triangle"})})}_triggerEnvelopeAttack(e,t){if(this.envelope.triggerAttack(e,t),this.oscillator.start(e),0===this.envelope.sustain){const t=this.toSeconds(this.envelope.attack),n=this.toSeconds(this.envelope.decay);this.oscillator.stop(e+t+n)}}_triggerEnvelopeRelease(e){this.envelope.triggerRelease(e),this.oscillator.stop(e+this.toSeconds(this.envelope.release))}getLevelAtTime(e){return e=this.toSeconds(e),this.envelope.getValueAtTime(e)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this}}class Is extends Rs{constructor(){super(ra(Is.getDefaults(),arguments)),this.name="MembraneSynth",this.portamento=0;const e=ra(Is.getDefaults(),arguments);this.pitchDecay=e.pitchDecay,this.octaves=e.octaves,wa(this,["oscillator","envelope"])}static getDefaults(){return na(Ds.getDefaults(),Rs.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})}setNote(e,t){const n=this.toSeconds(t),r=this.toFrequency(e instanceof Ra?e.toFrequency():e),i=r*this.octaves;return this.oscillator.frequency.setValueAtTime(i,n),this.oscillator.frequency.exponentialRampToValueAtTime(r,n+this.toSeconds(this.pitchDecay)),this}dispose(){return super.dispose(),this}}Ho([Cs(0)],Is.prototype,"octaves",void 0),Ho([Ts(0)],Is.prototype,"pitchDecay",void 0);const Ls=new Set;function Vs(e){Ls.add(e)}function Fs(e,t){const n=`registerProcessor("${e}", ${t})`;Ls.add(n)}Vs('\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it\'s disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === "dispose") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n'),Vs("\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n"),Vs("\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n"),Fs("feedback-comb-filter",'\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: "delayTime",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}, {\n\t\t\t\tname: "feedback",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n');class js extends Ns{constructor(){super(ra(js.getDefaults(),arguments,["urls","onload","baseUrl"],"urls")),this.name="Sampler",this._activeSources=new Map;const e=ra(js.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"),t={};Object.keys(e.urls).forEach((n=>{const r=parseInt(n,10);if(Do(Wo(n)||jo(r)&&isFinite(r),`url key is neither a note or midi pitch: ${n}`),Wo(n)){const r=new Ra(this.context,n).toMidi();t[r]=e.urls[n]}else jo(r)&&isFinite(r)&&(t[r]=e.urls[r])})),this._buffers=new Ja({urls:t,onload:e.onload,baseUrl:e.baseUrl,onerror:e.onerror}),this.attack=e.attack,this.release=e.release,this.curve=e.curve,this._buffers.loaded&&Promise.resolve().then(e.onload)}static getDefaults(){return Object.assign(Ns.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:xa,onerror:xa,release:.1,urls:{}})}_findClosest(e){let t=0;for(;t<96;){if(this._buffers.has(e+t))return-t;if(this._buffers.has(e-t))return t;t++}throw new Error(`No available buffers for note: ${e}`)}triggerAttack(e,t,n=1){return this.log("triggerAttack",e,t,n),Array.isArray(e)||(e=[e]),e.forEach((e=>{const r=Na(new Ra(this.context,e).toFrequency()),i=Math.round(r),o=r-i,a=this._findClosest(i),s=i-a,l=this._buffers.get(s),u=Aa(a+o),c=new hs({url:l,context:this.context,curve:this.curve,fadeIn:this.attack,fadeOut:this.release,playbackRate:u}).connect(this.output);c.start(t,0,l.duration/u,n),Bo(this._activeSources.get(i))||this._activeSources.set(i,[]),this._activeSources.get(i).push(c),c.onended=()=>{if(this._activeSources&&this._activeSources.has(i)){const e=this._activeSources.get(i),t=e.indexOf(c);-1!==t&&e.splice(t,1)}}})),this}triggerRelease(e,t){return this.log("triggerRelease",e,t),Array.isArray(e)||(e=[e]),e.forEach((e=>{const n=new Ra(this.context,e).toMidi();if(this._activeSources.has(n)&&this._activeSources.get(n).length){const e=this._activeSources.get(n);t=this.toSeconds(t),e.forEach((e=>{e.stop(t)})),this._activeSources.set(n,[])}})),this}releaseAll(e){const t=this.toSeconds(e);return this._activeSources.forEach((e=>{for(;e.length;)e.shift().stop(t)})),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}triggerAttackRelease(e,t,n,r=1){const i=this.toSeconds(n);return this.triggerAttack(e,i,r),Bo(t)?(Do(Bo(e),"notes must be an array when duration is array"),e.forEach(((e,n)=>{const r=t[Math.min(n,t.length-1)];this.triggerRelease(e,i+this.toSeconds(r))}))):this.triggerRelease(e,i+this.toSeconds(t)),this}add(e,t,n){if(Do(Wo(e)||isFinite(e),`note must be a pitch or midi: ${e}`),Wo(e)){const r=new Ra(this.context,e).toMidi();this._buffers.add(r,t,n)}else this._buffers.add(e,t,n);return this}get loaded(){return this._buffers.loaded}dispose(){return super.dispose(),this._buffers.dispose(),this._activeSources.forEach((e=>{e.forEach((e=>e.dispose()))})),this._activeSources.clear(),this}}Ho([Ts(0)],js.prototype,"attack",void 0),Ho([Ts(0)],js.prototype,"release",void 0);class zs extends Fa{constructor(){super(ra(zs.getDefaults(),arguments,["callback","value"])),this.name="ToneEvent",this._state=new ja("stopped"),this._startOffset=0;const e=ra(zs.getDefaults(),arguments,["callback","value"]);this._loop=e.loop,this.callback=e.callback,this.value=e.value,this._loopStart=this.toTicks(e.loopStart),this._loopEnd=this.toTicks(e.loopEnd),this._playbackRate=e.playbackRate,this._probability=e.probability,this._humanize=e.humanize,this.mute=e.mute,this._playbackRate=e.playbackRate,this._state.increasing=!0,this._rescheduleEvents()}static getDefaults(){return Object.assign(Fa.getDefaults(),{callback:xa,humanize:!1,loop:!1,loopEnd:"1m",loopStart:0,mute:!1,playbackRate:1,probability:1,value:null})}_rescheduleEvents(e=-1){this._state.forEachFrom(e,(e=>{let t;if("started"===e.state){-1!==e.id&&this.context.transport.clear(e.id);const n=e.time+Math.round(this.startOffset/this._playbackRate);if(!0===this._loop||jo(this._loop)&&this._loop>1){t=1/0,jo(this._loop)&&(t=this._loop*this._getLoopDuration());const r=this._state.getAfter(n);null!==r&&(t=Math.min(t,r.time-n)),t!==1/0&&(this._state.setStateAtTime("stopped",n+t+1,{id:-1}),t=new es(this.context,t));const i=new es(this.context,this._getLoopDuration());e.id=this.context.transport.scheduleRepeat(this._tick.bind(this),i,new es(this.context,n),t)}else e.id=this.context.transport.schedule(this._tick.bind(this),new es(this.context,n))}}))}get state(){return this._state.getValueAtTime(this.context.transport.ticks)}get startOffset(){return this._startOffset}set startOffset(e){this._startOffset=e}get probability(){return this._probability}set probability(e){this._probability=e}get humanize(){return this._humanize}set humanize(e){this._humanize=e}start(e){const t=this.toTicks(e);return"stopped"===this._state.getValueAtTime(t)&&(this._state.add({id:-1,state:"started",time:t}),this._rescheduleEvents(t)),this}stop(e){this.cancel(e);const t=this.toTicks(e);if("started"===this._state.getValueAtTime(t)){this._state.setStateAtTime("stopped",t,{id:-1});const e=this._state.getBefore(t);let n=t;null!==e&&(n=e.time),this._rescheduleEvents(n)}return this}cancel(e){e=ia(e,-1/0);const t=this.toTicks(e);return this._state.forEachFrom(t,(e=>{this.context.transport.clear(e.id)})),this._state.cancel(t),this}_tick(e){const t=this.context.transport.getTicksAtTime(e);if(!this.mute&&"started"===this._state.getValueAtTime(t)){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){let t=.02;qo(this.humanize)||(t=this.toSeconds(this.humanize)),e+=(2*Math.random()-1)*t}this.callback(e,this.value)}}_getLoopDuration(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)}get loop(){return this._loop}set loop(e){this._loop=e,this._rescheduleEvents()}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e,this._rescheduleEvents()}get loopEnd(){return new es(this.context,this._loopEnd).toSeconds()}set loopEnd(e){this._loopEnd=this.toTicks(e),this._loop&&this._rescheduleEvents()}get loopStart(){return new es(this.context,this._loopStart).toSeconds()}set loopStart(e){this._loopStart=this.toTicks(e),this._loop&&this._rescheduleEvents()}get progress(){if(this._loop){const e=this.context.transport.ticks,t=this._state.get(e);if(null!==t&&"started"===t.state){const n=this._getLoopDuration();return(e-t.time)%n/n}return 0}return 0}dispose(){return super.dispose(),this.cancel(),this._state.dispose(),this}}class qs extends Fa{constructor(){super(ra(qs.getDefaults(),arguments,["callback","interval"])),this.name="Loop";const e=ra(qs.getDefaults(),arguments,["callback","interval"]);this._event=new zs({context:this.context,callback:this._tick.bind(this),loop:!0,loopEnd:e.interval,playbackRate:e.playbackRate,probability:e.probability}),this.callback=e.callback,this.iterations=e.iterations}static getDefaults(){return Object.assign(Fa.getDefaults(),{interval:"4n",callback:xa,playbackRate:1,iterations:1/0,probability:1,mute:!1,humanize:!1})}start(e){return this._event.start(e),this}stop(e){return this._event.stop(e),this}cancel(e){return this._event.cancel(e),this}_tick(e){this.callback(e)}get state(){return this._event.state}get progress(){return this._event.progress}get interval(){return this._event.loopEnd}set interval(e){this._event.loopEnd=e}get playbackRate(){return this._event.playbackRate}set playbackRate(e){this._event.playbackRate=e}get humanize(){return this._event.humanize}set humanize(e){this._event.humanize=e}get probability(){return this._event.probability}set probability(e){this._event.probability=e}get mute(){return this._event.mute}set mute(e){this._event.mute=e}get iterations(){return!0===this._event.loop?1/0:this._event.loop}set iterations(e){this._event.loop=e===1/0||e}dispose(){return super.dispose(),this._event.dispose(),this}}class Bs extends qa{constructor(){super(Object.assign(ra(Bs.getDefaults(),arguments,["pan"]))),this.name="Panner",this._panner=this.context.createStereoPanner(),this.input=this._panner,this.output=this._panner;const e=ra(Bs.getDefaults(),arguments,["pan"]);this.pan=new za({context:this.context,param:this._panner.pan,value:e.pan,minValue:-1,maxValue:1}),this._panner.channelCount=e.channelCount,this._panner.channelCountMode="explicit",wa(this,"pan")}static getDefaults(){return Object.assign(qa.getDefaults(),{pan:0,channelCount:1})}dispose(){return super.dispose(),this._panner.disconnect(),this.pan.dispose(),this}}Fs("bit-crusher","\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n");class Us extends qa{constructor(){super(ra(Us.getDefaults(),arguments,["solo"])),this.name="Solo";const e=ra(Us.getDefaults(),arguments,["solo"]);this.input=this.output=new Wa({context:this.context}),Us._allSolos.has(this.context)||Us._allSolos.set(this.context,new Set),Us._allSolos.get(this.context).add(this),this.solo=e.solo}static getDefaults(){return Object.assign(qa.getDefaults(),{solo:!1})}get solo(){return this._isSoloed()}set solo(e){e?this._addSolo():this._removeSolo(),Us._allSolos.get(this.context).forEach((e=>e._updateSolo()))}get muted(){return 0===this.input.gain.value}_addSolo(){Us._soloed.has(this.context)||Us._soloed.set(this.context,new Set),Us._soloed.get(this.context).add(this)}_removeSolo(){Us._soloed.has(this.context)&&Us._soloed.get(this.context).delete(this)}_isSoloed(){return Us._soloed.has(this.context)&&Us._soloed.get(this.context).has(this)}_noSolos(){return!Us._soloed.has(this.context)||Us._soloed.has(this.context)&&0===Us._soloed.get(this.context).size}_updateSolo(){this._isSoloed()||this._noSolos()?this.input.gain.value=1:this.input.gain.value=0}dispose(){return super.dispose(),Us._allSolos.get(this.context).delete(this),this._removeSolo(),this}}Us._allSolos=new Map,Us._soloed=new Map;class Ws extends qa{constructor(){super(ra(Ws.getDefaults(),arguments,["pan","volume"])),this.name="PanVol";const e=ra(Ws.getDefaults(),arguments,["pan","volume"]);this._panner=this.input=new Bs({context:this.context,pan:e.pan,channelCount:e.channelCount}),this.pan=this._panner.pan,this._volume=this.output=new is({context:this.context,volume:e.volume}),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=e.mute,wa(this,["pan","volume"])}static getDefaults(){return Object.assign(qa.getDefaults(),{mute:!1,pan:0,volume:0,channelCount:1})}get mute(){return this._volume.mute}set mute(e){this._volume.mute=e}dispose(){return super.dispose(),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this}}class $s extends qa{constructor(){super(ra($s.getDefaults(),arguments,["volume","pan"])),this.name="Channel";const e=ra($s.getDefaults(),arguments,["volume","pan"]);this._solo=this.input=new Us({solo:e.solo,context:this.context}),this._panVol=this.output=new Ws({context:this.context,pan:e.pan,volume:e.volume,mute:e.mute,channelCount:e.channelCount}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),wa(this,["pan","volume"])}static getDefaults(){return Object.assign(qa.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1,channelCount:1})}get solo(){return this._solo.solo}set solo(e){this._solo.solo=e}get muted(){return this._solo.muted||this.mute}get mute(){return this._panVol.mute}set mute(e){this._panVol.mute=e}_getBus(e){return $s.buses.has(e)||$s.buses.set(e,new Wa({context:this.context})),$s.buses.get(e)}send(e,t=0){const n=this._getBus(e),r=new Wa({context:this.context,units:"decibels",gain:t});return this.connect(r),r.connect(n),r}receive(e){return this._getBus(e).connect(this),this}dispose(){return super.dispose(),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this}}$s.buses=new Map;class Gs extends qa{constructor(){super(...arguments),this.name="Listener",this.positionX=new za({context:this.context,param:this.context.rawContext.listener.positionX}),this.positionY=new za({context:this.context,param:this.context.rawContext.listener.positionY}),this.positionZ=new za({context:this.context,param:this.context.rawContext.listener.positionZ}),this.forwardX=new za({context:this.context,param:this.context.rawContext.listener.forwardX}),this.forwardY=new za({context:this.context,param:this.context.rawContext.listener.forwardY}),this.forwardZ=new za({context:this.context,param:this.context.rawContext.listener.forwardZ}),this.upX=new za({context:this.context,param:this.context.rawContext.listener.upX}),this.upY=new za({context:this.context,param:this.context.rawContext.listener.upY}),this.upZ=new za({context:this.context,param:this.context.rawContext.listener.upZ})}static getDefaults(){return Object.assign(qa.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})}dispose(){return super.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this}}pa((e=>{e.listener=new Gs({context:e})})),ga((e=>{e.listener.dispose()}));const Hs=Ta().transport;Ta().destination,Ta().destination,Ta().listener,Ta().draw,Ta();var Ys={};"Fs2\nAs3\nAs4\nA2\nA3\nA4\nB2\nB3\nB4\nBb2\nCs3\nCs4\nCs5\nC3\nC4\nC5\nDs2\nDs3\nDs4\nD2\nD3\nD4\nD5\nE2\nE3\nE4\nFs3\nFs4\nF2\nF3\nF4\nGs2\nGs3\nGs4\nG2\nG3\nG4".split(/\n+/).forEach((function(e){Ys[e]=new As("/guitar/".concat(e,".wav")).toDestination()}));const Xs={triggerAttackRelease:function(e,t,n){Ys[e].loaded&&Ys[e].start(n,0,1e4)}};var Qs={};"kick\nkick2\nsnare-free\nstick\nhat-closed-4\nhat-closed-5".split(/\n+/).forEach((function(e){Qs[e]=new As("/drum/".concat(e,".wav")).toDestination()}));const Zs={guitar:Xs,baseDrum:{triggerAttackRelease:function(e,t,n){Qs[e].loaded&&Qs[e].start(n,0,1e4)}}};var Ks=n(792),Js=n.n(Ks);const el=function(t){var n=t.width,r=t.height,i=t.rhythm,o=t.position,a=t.colors,l=t.radius,u=void 0===l?50:l,c=t.nodeRadius,h=function(e){for(var t=e.containerWidth,n=e.containerHeight,r=e.rhythm,i=e.index,o=e.displayRadius,a=e.circleRadius,s=e.colors,l=r.length,u=2*Math.PI/l,c=[],h=0;h<l;h++){var d=t/2+o*Math.cos(u*h),f=n/2+o*Math.sin(u*h),p=s[r[h]],m=h==i?2*a:a;c.push({cx:d,cy:f,fill:p,r:m})}return c}({containerWidth:n,containerHeight:r,rhythm:i,index:o,displayRadius:u,circleRadius:void 0===c?10:c,colors:a}).map((function(t){return e.createElement("circle",s({},t,{key:"".concat(t.cx,"-").concat(t.cy)}))}));return e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},h)};var tl;const nl=yt.div(tl||(tl=Y(["\n  min-height: 100%;\n\n  & > section:nth-child(2n) {\n    background-color: #1b1b1b;\n  }\n"])));var rl;const il=yt.section(rl||(rl=Y(["\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: #222;\n  color: white;\n"])));var ol;const al=yt.div(ol||(ol=Y(["\n  display: flex;\n"])));function sl(e,t,n,r,i,o,a){try{var s=e[o](a),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}function ll(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){sl(o,r,i,a,s,"next",e)}function s(e){sl(o,r,i,a,s,"throw",e)}a(void 0)}))}}function ul(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function cl(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(o.push(r.value),!t||o.length!==t);a=!0);}catch(e){s=!0,i=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw i}}return o}}(e,t)||function(e,t){if(e){if("string"==typeof e)return ul(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ul(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var hl=n(757),dl=n.n(hl);const fl=function(){var t=cl((0,e.useState)(0),2),n=t[0],r=t[1],i=cl((0,e.useState)(240),2),o=i[0],a=i[1],s=cl((0,e.useState)(!1),2),l=s[0],u=s[1],c=cl((0,e.useState)(!1),2),h=c[0],d=c[1],f=(0,e.useRef)(),p=(0,e.useCallback)(ll(dl().mark((function e(){return dl().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(l){e.next=8;break}return e.next=3,Ca.resume();case 3:f.current||(f.current=new qs((function(e){r(e)}),"4n").start(0),Hs.start()),d(!0),u(!0),e.next=9;break;case 8:h?(Hs.stop(),d(!1)):(Hs.start(),d(!0));case 9:case"end":return e.stop()}}),e)}))),[l,u,h,d]);return(0,e.useEffect)((function(){Hs.bpm.value=o}),[o]),(0,e.useEffect)((function(){return function(){return f.current.stop()}}),[]),{tick:n,start:p,isPlaying:h,setTempo:a}},pl=function(t){var n=t.synth,r=t.tick,i=t.play,o=void 0===i||i,a=t.numbers,s=t.colors,l=t.notes,u=a.filter((function(e){return 1==e})).length,c=new Array(a.length+1).fill(1).map((function(t,n){var r=(600-60*a.length)/2,i=s[n];return e.createElement("circle",{r:n==u?20:10,cx:r+60*n,fill:i,cy:40,key:"".concat(n)})}));return(0,e.useLayoutEffect)((function(){if(o){var e=l[u];e&&n.triggerAttackRelease(e,"8n",r)}}),[r,o]),e.createElement(e.Fragment,null,c)};var ml=["1","2","3","4","5","6"],gl=function(){return window.location.pathname.match(/\/tune\/([\w\-])/)[1]};const vl=function(){var t=F(M);(0,e.useEffect)((function(){var e=function(e){var n=e.which;37==n?function(){var e=gl(),n=ml.indexOf(e);-1==n||0==n?n=ml.length-1:n--;var r=ml[n];t.replace("/tune/".concat(r))}():39==n&&function(){var e=gl(),n=ml.indexOf(e);-1==n||n==ml.length-1?n=0:n++;var r=ml[n];t.replace("/tune/".concat(r))}()};return window.addEventListener("keydown",e),function(){return window.removeEventListener("keydown",e)}}),[])};function yl(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function wl(e,t,n){return t&&_l(e.prototype,t),n&&_l(e,n),e}const bl=function(){function e(t){var n=t.synth,r=t.beat,i=t.notes,o=t.colors;yl(this,e),this.synth=n,this.beat=r,this.position=0,this.notes=i,this.colors=o}return wl(e,[{key:"update",value:function(){this.position==this.beat.length-1?this.position=0:this.position++}},{key:"play",value:function(e){var t=this.beat[this.position];if(t){var n=this.notes[t-1];this.synth.triggerAttackRelease(n,"8n",e)}}}]),e}(),xl={8:Js().scale("Spectral").colors(8),16:Js().scale("Spectral").colors(16),256:Js().scale("Spectral").colors(256)};var kl=[-9,-8,-7,-1,0,1,7,8,9];const El=function(){function e(t){yl(this,e),this.match=t,this.main=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],this.hint=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}return wl(e,[{key:"surround",value:function(e,t){for(var n=[],r=0,i=kl.length;r<i;){var o=e+kl[r];o<0?n.push(t[t.length-1+o]):o>t.length-1?n.push(t[o-t.length-1]):n.push(t[o]),r++}return n}},{key:"update0",value:function(e,t){for(var n=0;n<t;){for(var r=0;r<t;){var i=n*t+r,o=i==e,a=this.surround(i,this.hint),s=this.match({input:o,area:a,i,u:n,v:r});this.main[i]=s,r++}n++}}},{key:"update1",value:function(e){for(var t=0;t<e;){for(var n=0;n<e;){var r=t*e+n;this.hint[r]=this.main[r],n++}t++}}},{key:"update",value:function(e){this.update0(e,8),this.update1(8)}},{key:"draw",value:function(e){for(var t=60*(e.length-1),n=(600-t)/2,r=(600-t)/2,i=[],o=0;o<8;){for(var a=0;a<8;){var s=8*o+a,l=1==this.main[s],u=e[a],c=n+60*a,h=r+60*o,d=l?20:10;i.push({fill:u,cx:c,cy:h,r:d,key:"".concat(c,"-").concat(h)}),a++}o++}return i}}]),e}(),Sl=function(t){var n=t.tick,r=t.number,i=t.match,o=(0,e.useMemo)((function(){return new El(i)}),[]);(0,e.useLayoutEffect)((function(){o.update(r)}),[n]);var a=o.draw(xl[8]).map((function(t){return e.createElement("circle",t)}));return e.createElement(e.Fragment,null,a)};var Cl=function(){return new Array(65536).fill(0)},Tl=256,Al=[-257,-256,-255,-1,1,255,Tl,257];const Ol=function(){function e(t){yl(this,e),this.match=t,this.main=Cl(),this.hint=Cl()}return wl(e,[{key:"surround",value:function(e,t){for(var n=[],r=0,i=Al.length;r<i;){var o=e+Al[r];o<0?n.push(t[t.length-1+o]):o>t.length-1?n.push(t[o-t.length-1]):n.push(t[o]),r++}return n}},{key:"update0",value:function(e,t){for(var n=0;n<t;){for(var r=0;r<t;){var i=n*t+r,o=i==e,a=this.surround(i,this.hint),s=this.match({input:o,area:a,i,u:n,v:r});this.main[i]=s,r++}n++}}},{key:"update1",value:function(e){for(var t=0;t<e;){for(var n=0;n<e;){var r=t*e+n;this.hint[r]=this.main[r],n++}t++}}},{key:"update",value:function(e){this.update0(e,Tl),this.update1(Tl)}},{key:"draw",value:function(e,t){e.clearRect(45,45,510,510);for(var n=0;n<Tl;){for(var r=0;r<Tl;){var i=n*Tl+r,o=1==this.main[i]?t[0]:t[1],a=45+2*r,s=45+2*n;e.fillStyle=o,e.fillRect(a,s,2,2),r++}n++}return[]}}]),e}(),Ml=function(t){var n=t.tick,r=t.number,i=t.match,o=(0,e.useRef)(null),a=(0,e.useMemo)((function(){return new Ol(i)}),[]);return(0,e.useLayoutEffect)((function(){a.draw(o.current.getContext("2d"),[xl[8][5],xl[8][7]]),a.update(r)}),[n]),e.createElement("canvas",{width:600,height:600,ref:o})},Nl=function(t){var n=t.index,r=xl[8].map((function(t,r){return e.createElement("circle",{r:r==n?20:10,cx:90+60*r,fill:t,cy:40,key:"".concat(r)})}));return e.createElement(e.Fragment,null,r)};var Dl=n(396),Pl=n.n(Dl);const Rl={about:{title:Il("Ub(A)wt"),description:Il("dj(E)nOreydiq my(u)zIk cruw k(a)mbInUt(o)rIks And Ut(a)mOta")},home:Il("howm"),song:Il("saq"),clickToStartAudio:Il("klIk tO start adiyow"),clickToStartAudioFollowUp:Il("CEn skrol dAwn"),format:Il};function Il(t){return e.createElement("span",{className:"text"},Pl()(t))}var Ll,Vl,Fl=yt.h1(Ll||(Ll=Y(["\n  top: -15px;\n"]))),jl=yt.h2(Vl||(Vl=Y(["\n  top: -15px;\n"])));const zl=function(){return e.createElement(il,null,e.createElement(Fl,null,Rl.clickToStartAudio),e.createElement(jl,null,Rl.clickToStartAudioFollowUp),e.createElement("p",null,"▼"),e.createElement("p",null,"▼"),e.createElement("p",null,"▼"))},ql=function(t){var n,r,i,o=(n={rhythm:t.rhythm,index:t.position,colors:t.colors},r=n.index,i=n.colors,n.rhythm.map((function(e,t){var n=30+60*t;return{r:t==r?20:10,cx:n,cy:40,fill:i[e],key:"".concat(n,"-").concat(40)}}))).map((function(t){return e.createElement("circle",t)}));return e.createElement(e.Fragment,null,o)},Bl=function(t){var n=t.metronomes.map((function(t,n){return e.createElement("div",{style:{height:"50px",width:"600px"},key:"key-".concat(n)},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(ql,{rhythm:t.beat,position:t.position,colors:t.colors})))}));return e.createElement(il,null,n)},Ul=function(){return e.createElement(il,null,e.createElement($,{to:"/"},Rl.home))};var Wl=function(e){return e.reduce((function(e,t){return e+t}),0)};const $l=new Rs({oscillator:{type:"sine"},envelope:{attack:.005,decay:.1,sustain:0,release:0}}).toDestination();var Gl=new Rs({oscillator:{type:"sine"},envelope:{attack:.005,decay:.1,sustain:0,release:1}}).toDestination();Gl.volume.value-=40;const Hl=Gl,Yl=new Rs({oscillator:{type:"sine"},envelope:{attack:.005,decay:0,sustain:1,release:.8}}).toDestination();var Xl=new Rs({oscillator:{type:"sine"},envelope:{attack:.005,decay:.2,sustain:1,release:.8}}).toDestination();Xl.volume.value-=30;const Ql={baseDrum:$l,hiHat:Hl,flute:Yl,piano:Xl};var Zl=function(e){return e.reduce((function(e,t){return e+t}),0)},Kl=function(e){return e.reduce((function(e,t){return e+t}),0)},Jl=function(e){return e.reduce((function(e,t){return e+t}),0)},eu=function(e){return e.reduce((function(e,t){return e+t}),0)},tu=function(e){return e.reduce((function(e,t){return e+t}),0)},nu=function(e){return e.reduce((function(e,t){return e+t}),0)},ru={1:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,2,2],notes:["hat-closed-5","hat-closed-4"],colors:[null,i[5],i[7]]})}),[]),a=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,0,0,0],notes:["snare-free"],colors:[i[7],i[5]]})}),[]),s=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,0,1,0,0],notes:["kick2"],colors:[i[7],i[5]]})}),[]),l=(0,e.useMemo)((function(){return[o,a,s]}),[]);(0,e.useLayoutEffect)((function(){!function(e){l.forEach((function(t){return t.play(e)})),l.forEach((function(e){return e.update()}))}(r)}),[r]);var u=[o.beat[o.position],a.beat[a.position]-1==0?1:0,s.beat[s.position]],c=parseInt(u.join(""),2),h=u.map((function(t,n){var r=(600-60*(u.length-1))/2,o=0==n?i[1]:1==n?i[4]:i[5];return e.createElement("circle",{r:"1"==t?20:10,cx:r+60*n,fill:o,cy:40,key:"".concat(n)})})),d={1:function(e){var t=e.area,n=e.input;return e.i,1==t[0]?t[4]?0:1:n?1:0},2:function(e){var t=e.area,n=e.input;return e.i,e.u,e.v%2==0?1==t[0]?t[4]?0:1:n?1:0:1==t[2]?t[4]?0:1:n?1:0},3:function(e){var t=e.area,n=e.input;return e.i,e.u,e.v%2==0?1==t[0]||1==t[7]?t[4]?0:1:n?1:0:1==t[2]||1==t[5]?t[4]?0:1:n?1:0},4:function(e){var t=e.area,n=e.input;return e.i,e.u,e.v%2==0?t[6]?0:1:1==t[2]||1==t[5]?t[4]?0:1:n?1:0},5:function(e){var t=e.area,n=e.input;return e.i,e.u,e.v%2==0?t[3]||t[2]||n?1:0:n||t[1]&&t[5]?1:t[4]?0:1},6:function(e){var t=e.area,n=e.input,r=(e.i,e.u,e.v);return n?1:r%2==0?Wl(t)<3?1:0:t[1]&&t[5]?1:t[4]?0:1},7:function(e){var t=e.area;return e.input?1:Wl(t)>3?t[4]?0:1:t[0]||t[2]?1:0}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o,a,s]}),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(pl,{synth:Zs.guitar,numbers:u,tick:r,colors:[i[1],i[4],i[5],i[7]],notes:["D4",null,"F4","E4"]})))),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},h))),e.createElement(il,null,e.createElement(al,null,e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},e.createElement(el,{width:200,height:200,rhythm:o.beat,position:o.position,colors:o.colors}))),e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},e.createElement(el,{width:200,height:200,rhythm:a.beat,position:a.position,colors:a.colors}))),e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement(el,{width:200,height:200,rhythm:s.beat,position:s.position,colors:s.colors})))),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(Nl,{index:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[1],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[2],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[3],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[4],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[5],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[6],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement(Ml,{match:d[7],tick:r,number:c}))),e.createElement(Ul,null))},2:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,2],notes:["hat-closed-5","hat-closed-4"],colors:[null,i[5],i[7]]})}),[]),a=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[0,1,0,0,0],notes:["snare-free"],colors:[i[7],i[5]]})}),[]),s=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,0,1,0,1,0,0],notes:["kick2"],colors:[i[7],i[5]]})}),[]),l=(0,e.useMemo)((function(){return[o,a,s]}),[]);(0,e.useLayoutEffect)((function(){!function(e){l.forEach((function(t){return t.play(e)})),l.forEach((function(e){return e.update()}))}(r)}),[r]);var u=[o.beat[o.position],a.beat[a.position]-1==0?1:0,s.beat[s.position]],c=parseInt(u.join(""),2),h=u.map((function(t,n){var r=(600-60*(u.length-1))/2,o=0==n?i[1]:1==n?i[4]:i[5];return e.createElement("circle",{r:"1"==t?20:10,cx:r+60*n,fill:o,cy:40,key:"".concat(n)})})),d={1:function(e){var t=e.area,n=e.input;return e.i,1==t[0]?t[4]?0:1:n?1:0},2:function(e){var t=e.area,n=e.input;return e.i,n?1:Zl(t)>5?t[2]&&t[5]?1:0:t[3]&&t[7]?0:1},3:function(e){var t=e.area,n=e.input;return e.i,n?1:5==Zl(t)?t[2]&&t[5]?1:0:t[3]&&t[7]?0:1}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o,a,s]}),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(pl,{synth:Zs.guitar,numbers:u,tick:r,colors:[i[1],i[4],i[5],i[7]],notes:["F4",null,"D4","A4"]})))),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},h))),e.createElement(il,null,e.createElement(al,null,e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},e.createElement(el,{width:200,height:200,rhythm:o.beat,position:o.position,colors:o.colors}))),e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},e.createElement(el,{width:200,height:200,rhythm:a.beat,position:a.position,colors:a.colors}))),e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement(el,{width:200,height:200,rhythm:s.beat,position:s.position,colors:s.colors})))),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(Nl,{index:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[1],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[2],tick:r,number:c%2})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[3],tick:r,number:c})))),e.createElement(Ul,null))},3:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Ql.baseDrum,beat:[1,0],notes:["D1"],colors:[i[7],i[5]]})}),[]),a=(0,e.useMemo)((function(){return[o]}),[]),s=o.beat[o.position];(0,e.useLayoutEffect)((function(){!function(e){a.forEach((function(t){return t.play(e)})),a.forEach((function(e){return e.update()}))}(r)}),[r]);var l={1:function(e){var t=e.area;return e.input?1:t[0]||t[2]?t[4]?0:1:0},2:function(e){var t=e.area;return e.input?1:t[0]||t[7]?t[4]?0:1:0},3:function(e){var t=e.area;return e.input?1:t[9]||t[7]?t[4]?0:1:0},4:function(e){var t=e.area;return e.input||4==Kl([t[0],t[2],t[6],t[8]])?1:t[4]?0:1},5:function(e){var t=e.area;return e.input?1:Kl(t)>3?t[4]?0:1:t[0]||t[2]?1:0}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o]}),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[1],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[2],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[3],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[4],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement(Ml,{match:l[5],tick:r,number:s}))),e.createElement(Ul,null))},4:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Ql.baseDrum,beat:[1,0,1,0,0],notes:["D1"],colors:[i[7],i[5]]})}),[]),a=(0,e.useMemo)((function(){return[o]}),[]),s=o.beat[o.position];(0,e.useLayoutEffect)((function(){!function(e){a.forEach((function(t){return t.play(e)})),a.forEach((function(e){return e.update()}))}(r)}),[r]);var l={1:function(e){var t=e.area;return e.input?1:t[0]||t[2]?t[4]?0:1:0},2:function(e){var t=e.area;return e.input?1:t[0]||t[7]?t[4]?0:1:0},3:function(e){var t=e.area;return e.input?1:t[8]||t[7]?t[4]?0:1:0},4:function(e){var t=e.area;return e.input?1:3==Jl([t[0],t[4],t[8]])||1==t[1]?t[4]?0:1:0},5:function(e){var t=e.area;return e.input?1:3==Jl([t[0],t[4],t[8]])||1==t[2]?t[4]?0:1:0},6:function(e){var t=e.area;return e.input?1:Jl(t)>3?t[4]?0:1:t[0]||t[2]?1:0}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o]}),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[1],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[2],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[3],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[4],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[5],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement(Ml,{match:l[6],tick:r,number:s}))),e.createElement(Ul,null))},5:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Ql.baseDrum,beat:[1,0,0],notes:["D1"],colors:[i[7],i[5]]})}),[]),a=(0,e.useMemo)((function(){return[o]}),[]),s=o.beat[o.position];(0,e.useLayoutEffect)((function(){!function(e){a.forEach((function(t){return t.play(e)})),a.forEach((function(e){return e.update()}))}(r)}),[r]);var l={1:function(e){var t=e.area;return e.input?1:t[0]||t[2]?t[4]?0:1:0},2:function(e){var t=e.area;return e.input?1:t[0]||t[7]?t[4]?0:1:0},3:function(e){var t=e.area;return e.input?1:t[8]||t[7]?t[4]?0:1:0},4:function(e){var t=e.area;return e.input?1:3==eu([t[0],t[4],t[8]])||1==t[1]?t[4]?0:1:0},5:function(e){var t=e.area;return e.input?1:3==eu([t[0],t[4],t[8]])||1==t[2]?t[4]?0:1:0}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o]}),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[1],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[2],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[3],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[4],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[5],tick:r,number:s})))),e.createElement(Ul,null))},6:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Ql.baseDrum,beat:[1,0,1,0,1,0,0],notes:["D1"],colors:[i[7],i[5]]})}),[]),a=(0,e.useMemo)((function(){return[o]}),[]),s=o.beat[o.position];(0,e.useLayoutEffect)((function(){!function(e){a.forEach((function(t){return t.play(e)})),a.forEach((function(e){return e.update()}))}(r)}),[r]);var l={1:function(e){var t=e.area;return e.input?1:t[0]||t[2]?t[4]?0:1:0},2:function(e){var t=e.area;return e.input?1:t[0]||t[7]?t[4]?0:1:0},3:function(e){var t=e.area;return e.input?1:t[8]||t[7]?t[4]?0:1:0},4:function(e){var t=e.area;return e.input?1:3==tu([t[0],t[4],t[8]])||1==t[1]?t[4]?0:1:0},5:function(e){var t=e.area;return e.input?1:3==tu([t[0],t[4],t[8]])||1==t[2]?t[4]?0:1:0}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o]}),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[1],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[2],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[3],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[4],tick:r,number:s})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:l[5],tick:r,number:s})))),e.createElement(Ul,null))},7:function(){vl();var t=fl(),n=t.start,r=t.tick,i=xl[8],o=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,2,1,2,2],notes:["hat-closed-5","hat-closed-4"],colors:[null,i[5],i[7]]})}),[]),a=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[0,0,0,1,0,0,0],notes:["snare-free"],colors:[i[7],i[5]]})}),[]),s=(0,e.useMemo)((function(){return new bl({synth:Zs.baseDrum,beat:[1,0,1,0,1,0,1,0,0],notes:["kick2"],colors:[i[7],i[5]]})}),[]),l=(0,e.useMemo)((function(){return[o,a,s]}),[]);(0,e.useLayoutEffect)((function(){!function(e){l.forEach((function(t){return t.play(e)})),l.forEach((function(e){return e.update()}))}(r)}),[r]);var u=[o.beat[o.position],a.beat[a.position]-1==0?1:0,s.beat[s.position]],c=parseInt(u.join(""),2),h=u.map((function(t,n){var r=(600-60*(u.length-1))/2,o=0==n?i[1]:1==n?i[4]:i[5];return e.createElement("circle",{r:"1"==t?20:10,cx:r+60*n,fill:o,cy:40,key:"".concat(n)})})),d={1:function(e){var t=e.area,n=e.input;return e.i,1==t[0]?t[4]?0:1:n?1:0},2:function(e){var t=e.area,n=e.input;return e.i,n?1:nu(t)>5?t[2]&&t[5]?1:0:t[3]&&t[7]?0:1},3:function(e){var t=e.area,n=e.input;return e.i,n?1:5==nu(t)?t[2]&&t[5]?1:0:t[3]&&t[7]?0:1}};return e.createElement(nl,{onClick:n},e.createElement(zl,null),e.createElement(Bl,{metronomes:[o,a,s]}),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(pl,{synth:Zs.guitar,numbers:u,tick:r,colors:[i[1],i[4],i[5],i[7]],notes:["F4",null,"D4","A4"]})))),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},h))),e.createElement(il,null,e.createElement(al,null,e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},e.createElement(el,{width:200,height:200,rhythm:o.beat,position:o.position,colors:o.colors}))),e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 200 200"},e.createElement(el,{width:200,height:200,rhythm:a.beat,position:a.position,colors:a.colors}))),e.createElement("div",{style:{width:"200px",height:"160px"}},e.createElement(el,{width:200,height:200,rhythm:s.beat,position:s.position,colors:s.colors})))),e.createElement(il,null,e.createElement("div",{style:{height:"50px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 200"},e.createElement(Nl,{index:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[1],tick:r,number:c})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[2],tick:r,number:c%2})))),e.createElement(il,null,e.createElement("div",{style:{height:"600px",width:"600px"}},e.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 600 600"},e.createElement(Sl,{match:d[3],tick:r,number:c})))),e.createElement(Ul,null))}};const iu=function(t){t.children;var n,r=(n=F(N).match,n?n.params:{}).id,i=ru[r];return e.createElement(i,null)};var ou,au,su,lu,uu=yt.nav(ou||(ou=Y(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  flex-direction: column;\n"]))),cu=yt.ul(au||(au=Y(["\n  display: flex;\n  height: 100%;\n  flex-wrap: wrap;\n  max-width: 600px;\n  justify-content: center;\n"]))),hu=yt.li(su||(su=Y(["\n  display: inline-block;\n  margin: 10px;\n\n  a {\n    display: block;\n    padding: 18px 22px;\n    border: 1px dotted #333;\n  }\n"]))),du=yt.p(lu||(lu=Y(["\n  padding-top: 40px;\n  max-width: 600px;\n  text-align: center;\n  color: #999;\n"])));const fu=function(){var t=Object.keys(ru).map((function(t){return e.createElement(hu,{key:t},e.createElement($,{to:"/tune/".concat(t)},Rl.song," ",Rl.format(function(e,t){var n=t.length,r="";do{r=t[e%n]+r,e=Math.floor(e/n)}while(e);return r}(t-1,"mnqgdbptkhsfvxjwyrl"))))}));return e.createElement(uu,null,e.createElement(cu,null,t),e.createElement(du,null,e.createElement($,{to:"/code/home"},Rl.about.title)))};var pu,mu,gu=yt.p(pu||(pu=Y(["\n  margin-bottom: 30px;\n  text-align: center;\n  max-width: 600px;\n"]))),vu=yt.section(mu||(mu=Y(["\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n"])));const yu=function(){return e.createElement(e.Fragment,null,e.createElement(vu,null,e.createElement(gu,null,Rl.about.description)),e.createElement(vu,null,e.createElement($,{to:"/"},Rl.home)))},_u=function(){return e.createElement(j,null,e.createElement(V,null,e.createElement(L,{exact:!0,path:"/code/home",component:yu}),e.createElement(L,{exact:!0,path:"/tune/:id",component:iu}),e.createElement(L,{exact:!0,path:"/",component:fu})))};t.render(e.createElement(_u,null),document.getElementById("build"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,